WEBVTT

NOTE duration:"01:36:43"

NOTE recognizability:0.751

NOTE language:en-us

NOTE Confidence: 0.830871104

00:00:08.310 --> 00:00:10.940
And you should be good.

NOTE Confidence: 0.830871104

00:00:10.940 --> 00:00:12.820
Hi, welcome back to another

NOTE Confidence: 0.830871104

00:00:12.820 --> 00:00:14.700
VC libraries Open code review.

NOTE Confidence: 0.830871104

00:00:14.700 --> 00:00:17.115
I'm Stephanie Lawhead on STL

NOTE Confidence: 0.830871104

00:00:17.115 --> 00:00:19.530
maintainer and today we'll be

NOTE Confidence: 0.830871104

00:00:19.621 --> 00:00:21.922
looking at a PR again a PR.

NOTE Confidence: 0.830871104

00:00:21.922 --> 00:00:23.068
2158 extend memcpy,

NOTE Confidence: 0.830871104

00:00:23.068 --> 00:00:24.596
memmove and memcpy comp.

NOTE Confidence: 0.830871104

00:00:24.600 --> 00:00:26.612
Optimizations from our contributor

NOTE Confidence: 0.830871104

00:00:26.612 --> 00:00:28.728
Adam Busier so let me go

NOTE Confidence: 0.830871104

00:00:28.728 --> 00:00:30.390
ahead and share out my screen.

NOTE Confidence: 0.6524368375

00:00:33.920 --> 00:00:35.328
And here we go.

NOTE Confidence: 0.042212725

00:00:37.420 --> 00:00:38.050
Cat.

NOTE Confidence: 0.788770674090909

00:00:42.230 --> 00:00:45.303
So, uh, resuming the review that I

NOTE Confidence: 0.788770674090909

00:00:45.303 --> 00:00:48.918
left off last week, I got through up

NOTE Confidence: 0.788770674090909

00:00:48.918 --> 00:00:52.286
to line right line 4005 of X utility.

NOTE Confidence: 0.788770674090909

00:00:52.286 --> 00:00:54.710
One of our central internal headers,

NOTE Confidence: 0.788770674090909

00:00:54.710 --> 00:00:56.390
not the most central, but fairly central.

NOTE Confidence: 0.788770674090909

00:00:56.390 --> 00:00:59.126
Contains lots of commonly used algorithms,

NOTE Confidence: 0.788770674090909

00:00:59.130 --> 00:01:00.890
so we'll be resuming there.

NOTE Confidence: 0.788770674090909

00:01:00.890 --> 00:01:06.210
Adam also pushed one commit to updated

NOTE Confidence: 0.788770674090909

00:01:06.210 --> 00:01:09.710
comments. Let's just check that.

NOTE Confidence: 0.788770674090909

00:01:09.710 --> 00:01:11.313
It has a comma addressing the one

NOTE Confidence: 0.788770674090909

00:01:11.313 --> 00:01:13.267
comment I had from last time excellent.

NOTE Confidence: 0.788770674090909

00:01:13.270 --> 00:01:15.446
OK, so that's good.

NOTE Confidence: 0.788770674090909

00:01:15.446 --> 00:01:18.270
Uh, let's get this to disappear.

NOTE Confidence: 0.788770674090909

00:01:18.270 --> 00:01:21.430
OK? So let's go look at the code.

NOTE Confidence: 0.809734008421053

00:01:25.790 --> 00:01:27.608
We got all the product code

NOTE Confidence: 0.809734008421053

00:01:27.608 --> 00:01:29.477
reviewed except for X utility and

NOTE Confidence: 0.809734008421053

00:01:29.477 --> 00:01:31.542
then we've got test to look at.

NOTE Confidence: 0.809734008421053

00:01:31.550 --> 00:01:35.690
OK, so let's load this stiff.

NOTE Confidence: 0.809734008421053

00:01:35.690 --> 00:01:39.180
Scroll down to Bright Line 4005.

NOTE Confidence: 0.725331372083333

00:01:43.060 --> 00:01:45.828
I seem to recall, at least for this

NOTE Confidence: 0.725331372083333

00:01:45.828 --> 00:01:48.080
top part I had chosen to split

NOTE Confidence: 0.725331372083333

00:01:48.080 --> 00:01:50.240
left and right rather than inline.

NOTE Confidence: 0.725331372083333

00:01:50.240 --> 00:01:53.360
Let me see if. There's 4005,

NOTE Confidence: 0.725331372083333

00:01:53.360 --> 00:01:56.320
let me see if the stuff below it.

NOTE Confidence: 0.725331372083333

00:01:56.320 --> 00:01:57.960
Would benefit from being split.

NOTE Confidence: 0.612808234

00:02:00.180 --> 00:02:02.300
This part kind of yes,

NOTE Confidence: 0.612808234

00:02:02.300 --> 00:02:06.170
not massively well yeah here.

NOTE Confidence: 0.612808234

00:02:06.170 --> 00:02:08.456
Here this is kind of a.

NOTE Confidence: 0.612808234

00:02:08.460 --> 00:02:10.756
I guess it's a rename plus a refactoring.

NOTE Confidence: 0.854829857

00:02:13.640 --> 00:02:15.810
The diff isn't quite to the point

NOTE Confidence: 0.854829857

00:02:15.810 --> 00:02:18.318
where it's unreadable. This is like.

NOTE Confidence: 0.854829857

00:02:18.318 --> 00:02:21.942
Here this is sort of almost looks

NOTE Confidence: 0.854829857

00:02:21.942 --> 00:02:24.294
like unrelated code getting John.

NOTE Confidence: 0.854829857

00:02:24.294 --> 00:02:27.206
It's jumping in and out of add remove

NOTE Confidence: 0.854829857

00:02:27.206 --> 00:02:29.739
because it sees these empty lines the.

NOTE Confidence: 0.854829857

00:02:29.739 --> 00:02:31.902
And the diff algorithm used can be

NOTE Confidence: 0.854829857

00:02:31.902 --> 00:02:33.818
responsible for this sort of behavior.

NOTE Confidence: 0.854829857

00:02:33.820 --> 00:02:35.675
This down here is enough that I

NOTE Confidence: 0.854829857

00:02:35.675 --> 00:02:37.706
think I wanna use side by side OK.

NOTE Confidence: 0.69332415

00:02:39.790 --> 00:02:42.250
So let's do that quickly. Gear split

NOTE Confidence: 0.69332415

00:02:42.250 --> 00:02:45.250
may as well hide whitespace changes.

NOTE Confidence: 0.807644753333333

00:02:48.950 --> 00:02:50.018
I could also use the Umm,

NOTE Confidence: 0.807644753333333

00:02:50.020 --> 00:02:52.190
the VS code GitHub extension,

NOTE Confidence: 0.807644753333333

00:02:52.190 --> 00:02:53.510
but I'm more used to the

NOTE Confidence: 0.807644753333333

00:02:53.510 --> 00:02:54.790
web UI at this point.

NOTE Confidence: 0.785364757727273

00:02:57.220 --> 00:02:59.476
The VS code extension is very nice because

NOTE Confidence: 0.785364757727273

00:02:59.476 --> 00:03:01.962
it lets you see an arbitrary amount of

NOTE Confidence: 0.785364757727273

00:03:01.962 --> 00:03:03.999
context around the lines being edited.

NOTE Confidence: 0.785364757727273

00:03:04.000 --> 00:03:06.238
You don't have to click more.

NOTE Confidence: 0.785364757727273

00:03:06.240 --> 00:03:08.826
I should get used to using it. OK,

NOTE Confidence: 0.785364757727273

00:03:08.826 --> 00:03:11.580
so here's where we reviewed X utility up to,

NOTE Confidence: 0.785364757727273

00:03:11.580 --> 00:03:12.960
but not including this line.

NOTE Confidence: 0.785364757727273

00:03:12.960 --> 00:03:15.624
I always pay attention to my

NOTE Confidence: 0.785364757727273

00:03:15.624 --> 00:03:16.956
inclusive exclusive issues,

NOTE Confidence: 0.785364757727273

00:03:16.960 --> 00:03:19.515
so go ahead and resolve this and

NOTE Confidence: 0.785364757727273

00:03:19.515 --> 00:03:22.119
let's pick up where we left off.

NOTE Confidence: 0.785364757727273

00:03:22.120 --> 00:03:25.808
OK, so this is the copy unchecked algorithm.

NOTE Confidence: 0.785364757727273

00:03:25.810 --> 00:03:27.890
Uh, here we are copying a range first,

NOTE Confidence: 0.785364757727273

00:03:27.890 --> 00:03:30.500
last, Umm to a destination iterator.

NOTE Confidence: 0.785364757727273

00:03:30.500 --> 00:03:32.610
It's internal and it's unchecked,

NOTE Confidence: 0.785364757727273

00:03:32.610 --> 00:03:35.346
saying that we are going to assume that

NOTE Confidence: 0.785364757727273

00:03:35.346 --> 00:03:37.815
the iterator range is valid and that

NOTE Confidence: 0.785364757727273

00:03:37.815 --> 00:03:39.930
we have sufficient space and desk.

NOTE Confidence: 0.785364757727273

00:03:39.930 --> 00:03:42.541
We have outer layers like the publicly

NOTE Confidence: 0.785364757727273

00:03:42.541 --> 00:03:44.584
accessible stood copy function that

NOTE Confidence: 0.785364757727273

00:03:44.584 --> 00:03:46.300
will perform iterator debugging

NOTE Confidence: 0.785364757727273

00:03:46.300 --> 00:03:48.679
checks when possible to do things

NOTE Confidence: 0.785364757727273

00:03:48.679 --> 00:03:50.765
like make sure that the first and

NOTE Confidence: 0.785364757727273

00:03:50.765 --> 00:03:52.370
last iterators are not reversed.

NOTE Confidence: 0.785364757727273

00:03:52.370 --> 00:03:54.632
If you accidentally say like V end

NOTE Confidence: 0.785364757727273

00:03:54.632 --> 00:03:56.530
comma V begin, or if you mismatch.

NOTE Confidence: 0.785364757727273

00:03:56.530 --> 00:03:57.670
Them into different containers,

NOTE Confidence: 0.785364757727273

00:03:57.670 --> 00:03:59.848
like uh V begin V2 end.

NOTE Confidence: 0.785364757727273

00:03:59.850 --> 00:04:01.290
That would be bad.

NOTE Confidence: 0.785364757727273

00:04:01.290 --> 00:04:03.330
UM, or if the destination range does not

NOTE Confidence: 0.785364757727273

00:04:03.330 --> 00:04:05.530
have enough space, we can detect that.

NOTE Confidence: 0.785364757727273

00:04:05.530 --> 00:04:07.010
Sometimes if we can,

NOTE Confidence: 0.785364757727273

00:04:07.010 --> 00:04:07.554
Umm sense,

NOTE Confidence: 0.785364757727273

00:04:07.554 --> 00:04:09.458
how many elements are in the input

NOTE Confidence: 0.785364757727273

00:04:09.458 --> 00:04:11.340
range by doing like a difference

NOTE Confidence: 0.785364757727273

00:04:11.340 --> 00:04:12.890
on forward or better iterators.

NOTE Confidence: 0.785364757727273

00:04:12.890 --> 00:04:16.130
And if the output range is forward or better,

NOTE Confidence: 0.785364757727273

00:04:16.130 --> 00:04:17.530
and especially if it's a random access,

NOTE Confidence: 0.785364757727273

00:04:17.530 --> 00:04:20.127
we can see whether we can form,

NOTE Confidence: 0.785364757727273

00:04:20.130 --> 00:04:22.471
you know guest plus and or next

NOTE Confidence: 0.785364757727273

00:04:22.471 --> 00:04:24.438
guest comma N and see if that's

NOTE Confidence: 0.785364757727273

00:04:24.438 --> 00:04:26.409
valid and then once we have the.

NOTE Confidence: 0.785364757727273

00:04:26.410 --> 00:04:28.170
Provide that the iterators are

NOTE Confidence: 0.785364757727273

00:04:28.170 --> 00:04:29.930
not reversed and that there's

NOTE Confidence: 0.785364757727273

00:04:29.988 --> 00:04:32.098
sufficient space in the destination.

NOTE Confidence: 0.785364757727273

00:04:32.100 --> 00:04:32.452
Uh,

NOTE Confidence: 0.785364757727273

00:04:32.452 --> 00:04:35.268
we can do what we call unwrap the

NOTE Confidence: 0.785364757727273

00:04:35.268 --> 00:04:38.026
iterators down to either raw pointers

NOTE Confidence: 0.785364757727273

00:04:38.026 --> 00:04:40.351
for contiguous things or unchecked

NOTE Confidence: 0.785364757727273

00:04:40.428 --> 00:04:43.242
class types that don't do iterator

NOTE Confidence: 0.785364757727273

00:04:43.242 --> 00:04:45.800
debugging logic to sort of avoid overhead,

NOTE Confidence: 0.785364757727273

00:04:45.800 --> 00:04:47.900
especially in debug mode.

NOTE Confidence: 0.785364757727273

00:04:47.900 --> 00:04:49.575
Where we don't get inlining

NOTE Confidence: 0.785364757727273

00:04:49.575 --> 00:04:50.915
or any fancy optimizations?

NOTE Confidence: 0.785364757727273

00:04:50.920 --> 00:04:52.369
Uh, so that's what copy and check,

NOTE Confidence: 0.785364757727273

00:04:52.370 --> 00:04:54.010
uh is doing here.

NOTE Confidence: 0.785364757727273

00:04:54.010 --> 00:04:55.988
Uh, we have a note as a reminder.

NOTE Confidence: 0.785364757727273

00:04:55.990 --> 00:04:59.518
Umm, that things other than just stood.

NOTE Confidence: 0.785364757727273

00:04:59.520 --> 00:05:01.640
Copy will directly call this.

NOTE Confidence: 0.785364757727273

00:05:01.640 --> 00:05:03.200
We don't usually know this,

NOTE Confidence: 0.785364757727273

00:05:03.200 --> 00:05:05.504
but the pattern of having unchecked

NOTE Confidence: 0.785364757727273

00:05:05.504 --> 00:05:07.548
helpers just exist to implement

NOTE Confidence: 0.785364757727273

00:05:07.548 --> 00:05:09.738
the public functions is strong

NOTE Confidence: 0.785364757727273

00:05:09.738 --> 00:05:12.071
enough that when there's direct

NOTE Confidence: 0.785364757727273

00:05:12.071 --> 00:05:14.119
callers to something unchecked,

NOTE Confidence: 0.785364757727273

00:05:14.120 --> 00:05:16.360
we did start adding some of these

NOTE Confidence: 0.785364757727273

00:05:16.360 --> 00:05:19.340
comments here. Just as a reminder.

NOTE Confidence: 0.785364757727273

00:05:19.340 --> 00:05:19.799
OK,

NOTE Confidence: 0.785364757727273

00:05:19.799 --> 00:05:22.094
so this is changing from

NOTE Confidence: 0.785364757727273

00:05:22.094 --> 00:05:24.740
putter copycat to ITER copycat.

NOTE Confidence: 0.785364757727273

00:05:24.740 --> 00:05:27.146
That's the rename because it's being

NOTE Confidence: 0.785364757727273

00:05:27.146 --> 00:05:28.750
generalized and trivially copyable.

NOTE Confidence: 0.785364757727273

00:05:28.750 --> 00:05:30.534
Changes to trivially assignable

NOTE Confidence: 0.785364757727273

00:05:30.534 --> 00:05:32.764
because here we are assigning

NOTE Confidence: 0.785364757727273

00:05:32.764 --> 00:05:35.170
over elements that already exist.

NOTE Confidence: 0.785364757727273

00:05:35.170 --> 00:05:39.445
This is not the uninitialized special

NOTE Confidence: 0.785364757727273

00:05:39.445 --> 00:05:42.355
algorithm that will fill raw memory,

NOTE Confidence: 0.785364757727273

00:05:42.360 --> 00:05:43.596
so this is correct.

NOTE Confidence: 0.785364757727273

00:05:43.596 --> 00:05:45.935
This is that make the type traits

NOTE Confidence: 0.785364757727273

00:05:45.935 --> 00:05:48.005
we're using more fine grained.

NOTE Confidence: 0.785364757727273

00:05:48.010 --> 00:05:49.330
OK, sit down here.

NOTE Confidence: 0.785364757727273

00:05:49.330 --> 00:05:51.310
This looks like a ranges version.

NOTE Confidence: 0.785364757727273

00:05:51.310 --> 00:05:53.660
Let me expand some context.

NOTE Confidence: 0.785364757727273

00:05:53.660 --> 00:05:57.580
We've got the ranges helper copy unchecked.

NOTE Confidence: 0.785364757727273

00:05:57.580 --> 00:05:59.729
I can tell it's ranges because it's

NOTE Confidence: 0.785364757727273

00:05:59.729 --> 00:06:01.962
got all this Sentinel stuff here.

NOTE Confidence: 0.785364757727273

00:06:01.962 --> 00:06:02.988
Put her copycat,

NOTE Confidence: 0.785364757727273

00:06:02.988 --> 00:06:04.014
renamed Inter Copycat.

NOTE Confidence: 0.5430271112

00:06:04.020 --> 00:06:05.772
Trivially copyable, changed.

NOTE Confidence: 0.5430271112

00:06:05.772 --> 00:06:06.940
Trivially assignable,

NOTE Confidence: 0.5430271112

00:06:06.940 --> 00:06:09.636
same rationale writing to it out that already

NOTE Confidence: 0.5430271112

00:06:09.636 --> 00:06:12.238
exists and not changing the size Sentinel.

NOTE Confidence: 0.5430271112

00:06:12.240 --> 00:06:15.775
Four thing this is the ranges idea,

NOTE Confidence: 0.5430271112

00:06:15.780 --> 00:06:17.145
trying to avoid using the

NOTE Confidence: 0.5430271112

00:06:17.145 --> 00:06:18.237
word concept to avoid.

NOTE Confidence: 0.5430271112

00:06:18.240 --> 00:06:22.895
Confusion the ranges idea that you

NOTE Confidence: 0.5430271112

00:06:22.895 --> 00:06:27.288
can have a range UM, and in C + 20 ranges.

NOTE Confidence: 0.5430271112

00:06:27.290 --> 00:06:28.934
The Sentinel that denotes the end

NOTE Confidence: 0.5430271112

00:06:28.934 --> 00:06:31.056
of the range does not have to be

NOTE Confidence: 0.5430271112

00:06:31.056 --> 00:06:32.508
the same type as the iterator,

NOTE Confidence: 0.5430271112

00:06:32.510 --> 00:06:35.904
so it's generalizing the classic iterator

NOTE Confidence: 0.5430271112

00:06:35.904 --> 00:06:38.896
pattern from CS plus 98 STL and this

NOTE Confidence: 0.5430271112

00:06:38.896 --> 00:06:41.290
allows you to have ranges like oh,

NOTE Confidence: 0.5430271112

00:06:41.290 --> 00:06:43.891
I have a pointer to a null terminated string

NOTE Confidence: 0.5430271112

00:06:43.891 --> 00:06:46.464
and I know when I'm going to hit the end,

NOTE Confidence: 0.5430271112

00:06:46.470 --> 00:06:48.558
if you traverse it.

NOTE Confidence: 0.5430271112

00:06:48.560 --> 00:06:49.692
From front to back,

NOTE Confidence: 0.5430271112

00:06:49.692 --> 00:06:51.729
but I don't know exactly where that's

NOTE Confidence: 0.5430271112

00:06:51.729 --> 00:06:53.703
going to be until we actually look

NOTE Confidence: 0.5430271112

00:06:53.703 --> 00:06:55.465
at every element so the Sentinel

NOTE Confidence: 0.5430271112

00:06:55.465 --> 00:06:57.538
can be a special type that says,

NOTE Confidence: 0.5430271112

00:06:57.538 --> 00:06:59.841
hey, I've reached the end of the

NOTE Confidence: 0.5430271112

00:06:59.841 --> 00:07:02.012
range if the iterator on the left

NOTE Confidence: 0.5430271112

00:07:02.012 --> 00:07:04.094
hand side of the comparison is

NOTE Confidence: 0.5430271112

00:07:04.094 --> 00:07:06.159
pointing to a null character.

NOTE Confidence: 0.5430271112

00:07:06.160 --> 00:07:08.664
So that's an example of a Sentinel that

NOTE Confidence: 0.5430271112

00:07:08.664 --> 00:07:11.138
does not have the same type as the iterator.

NOTE Confidence: 0.5430271112

00:07:11.140 --> 00:07:14.686
Some Sentinels can actually tell you

NOTE Confidence: 0.5430271112

00:07:14.686 --> 00:07:18.780
the size of a range that happens.

NOTE Confidence: 0.5430271112

00:07:18.780 --> 00:07:20.527
For things like, uh,

NOTE Confidence: 0.5430271112

00:07:20.527 --> 00:07:21.829
forward or better iterators where they

NOTE Confidence: 0.5430271112

00:07:21.829 --> 00:07:23.260
are the same type where the Sentinel

NOTE Confidence: 0.5430271112

00:07:23.260 --> 00:07:24.770
is the same type as the iterator,

NOTE Confidence: 0.5430271112

00:07:24.770 --> 00:07:26.648
you just do a classic difference.

NOTE Confidence: 0.5430271112

00:07:26.650 --> 00:07:29.667
It can also happen in some cases

NOTE Confidence: 0.5430271112

00:07:29.670 --> 00:07:32.708
for something I believe like a list

NOTE Confidence: 0.5430271112

00:07:32.710 --> 00:07:35.664
where the list knows its own size,

NOTE Confidence: 0.5430271112

00:07:35.670 --> 00:07:39.490
but arbitrary iterators may not.

NOTE Confidence: 0.5430271112

00:07:39.490 --> 00:07:41.142
I may be incorrect,

NOTE Confidence: 0.5430271112

00:07:41.142 --> 00:07:42.794
there is that wrong.

NOTE Confidence: 0.5430271112

00:07:42.800 --> 00:07:44.746
This is central for means that the

NOTE Confidence: 0.5430271112

00:07:44.746 --> 00:07:46.184
iterator and Sentinel can tell

NOTE Confidence: 0.5430271112

00:07:46.184 --> 00:07:47.564
you the distance between them.

NOTE Confidence: 0.5430271112

00:07:47.570 --> 00:07:49.285
This is an example of a range

NOTE Confidence: 0.5430271112

00:07:49.285 --> 00:07:50.410
that's the size range.

NOTE Confidence: 0.5430271112

00:07:50.410 --> 00:07:51.767
It knows its own size, right,

NOTE Confidence: 0.5430271112

00:07:51.767 --> 00:07:53.452
but the iterators and Sentinels

NOTE Confidence: 0.5430271112

00:07:53.452 --> 00:07:55.570
don't know the distance between them.

NOTE Confidence: 0.5430271112

00:07:55.570 --> 00:07:56.310
Thank you.

NOTE Confidence: 0.5430271112

00:07:56.310 --> 00:07:56.680
OK,

NOTE Confidence: 0.5430271112

00:07:56.680 --> 00:07:58.900
I thought I was getting that

NOTE Confidence: 0.5430271112

00:07:58.900 --> 00:08:00.789
wrong and you were close.

NOTE Confidence: 0.5430271112

00:08:00.790 --> 00:08:02.197
You know this is the important example,

NOTE Confidence: 0.5430271112

00:08:02.200 --> 00:08:03.856
but it's the important example of the other

NOTE Confidence: 0.5430271112

00:08:03.856 --> 00:08:05.325
property than the one you were looking at.

NOTE Confidence: 0.5430271112

00:08:05.330 --> 00:08:05.788
Yeah,

NOTE Confidence: 0.5430271112

00:08:05.788 --> 00:08:07.620
the size range, OK?

NOTE Confidence: 0.5430271112

00:08:07.620 --> 00:08:08.175
Awesome so yeah.

NOTE Confidence: 0.5430271112

00:08:08.175 --> 00:08:08.915
And so is Sentinel.

NOTE Confidence: 0.5430271112

00:08:08.920 --> 00:08:10.096
Four is definitely the one we want

NOTE Confidence: 0.5430271112

00:08:10.096 --> 00:08:11.321
here because at this point we're just

NOTE Confidence: 0.5430271112

00:08:11.321 --> 00:08:12.690
being given an iterator and a Sentinel,

NOTE Confidence: 0.5430271112

00:08:12.690 --> 00:08:15.034
not an entire range.

NOTE Confidence: 0.5430271112

00:08:15.034 --> 00:08:17.220
Umm, OK, so this is good?

NOTE Confidence: 0.5430271112

00:08:17.220 --> 00:08:20.280
Uh, let's Scroll down some more.

NOTE Confidence: 0.5430271112

00:08:20.280 --> 00:08:22.912
OK, now we've got copy N the version

NOTE Confidence: 0.5430271112

00:08:22.912 --> 00:08:25.119
that takes N number of elements.

NOTE Confidence: 0.5430271112

00:08:25.120 --> 00:08:27.780
UM, this is the.

NOTE Confidence: 0.5430271112

00:08:27.780 --> 00:08:30.066
Classic stood version, uh,

NOTE Confidence: 0.5430271112

00:08:30.066 --> 00:08:31.782
there is no unchecked form because

NOTE Confidence: 0.5430271112

00:08:31.782 --> 00:08:33.699
we're doing the unchecking in here.

NOTE Confidence: 0.5430271112

00:08:33.700 --> 00:08:35.940
Umm, so put a copycat random item

NOTE Confidence: 0.5430271112

00:08:35.940 --> 00:08:37.510
copycat truly compatible to trivia.

NOTE Confidence: 0.5430271112

00:08:37.510 --> 00:08:38.294
Assignable Yep,

NOTE Confidence: 0.5430271112

00:08:38.294 --> 00:08:40.254
it's not the uninitialized form,

NOTE Confidence: 0.5430271112

00:08:40.260 --> 00:08:42.000
so all good.

NOTE Confidence: 0.5430271112

00:08:42.000 --> 00:08:46.062
We've got a copy backward unchecked.

NOTE Confidence: 0.5430271112

00:08:46.062 --> 00:08:49.158
Yeah, that looks good.

NOTE Confidence: 0.5430271112

00:08:49.160 --> 00:08:52.346
Uh, this is the internal version

NOTE Confidence: 0.5430271112

00:08:52.346 --> 00:08:53.939
taking bidirectional iterators.

NOTE Confidence: 0.5430271112

00:08:53.940 --> 00:08:56.100
Put her copycat renamed ITER Copycat

NOTE Confidence: 0.5430271112

00:08:56.100 --> 00:08:58.180
trivially copyable to trivially assignable.

NOTE Confidence: 0.5430271112

00:08:58.180 --> 00:08:59.293
Yep, that's good.

NOTE Confidence: 0.5430271112

00:08:59.293 --> 00:09:01.519
Nothing about this would be different.

NOTE Confidence: 0.5430271112

00:09:01.520 --> 00:09:03.266
OK, move, unchecked,

NOTE Confidence: 0.5430271112

00:09:03.266 --> 00:09:05.594
put or move cat,

NOTE Confidence: 0.842766835555555

00:09:05.600 --> 00:09:06.848
because we're going to move elements

NOTE Confidence: 0.842766835555555

00:09:06.848 --> 00:09:08.940
is now it, or move cat, that's good.

NOTE Confidence: 0.842766835555555

00:09:08.940 --> 00:09:10.840
Triply copyable to trivia, assignable.

NOTE Confidence: 0.842766835555555

00:09:10.840 --> 00:09:13.310
Yep, the elements already exist.

NOTE Confidence: 0.842766835555555

00:09:13.310 --> 00:09:14.785
Move backward unchecked and this

NOTE Confidence: 0.842766835555555

00:09:14.785 --> 00:09:16.630
one goes in the opposite order.

NOTE Confidence: 0.842766835555555

00:09:16.630 --> 00:09:19.808
UM, which helps in certain overlapping cases.

NOTE Confidence: 0.842766835555555

00:09:19.810 --> 00:09:21.586
Uh, put her move cat litter.

NOTE Confidence: 0.842766835555555

00:09:21.590 --> 00:09:23.178
Move cat, that's correct,

NOTE Confidence: 0.842766835555555

00:09:23.178 --> 00:09:25.163
trebly copyable trivia assignable again.

NOTE Confidence: 0.842766835555555

00:09:25.170 --> 00:09:28.416
The elements exist, so that's good.

NOTE Confidence: 0.842766835555555

00:09:28.420 --> 00:09:31.507
OK, so now for something slightly different.

NOTE Confidence: 0.742564872074074

00:09:34.130 --> 00:09:36.730
This is one of the things that Adam

NOTE Confidence: 0.742564872074074

00:09:36.730 --> 00:09:38.976
had called out in his extensive

NOTE Confidence: 0.742564872074074

00:09:38.976 --> 00:09:41.262
PR notes that I really appreciate

NOTE Confidence: 0.742564872074074

00:09:41.340 --> 00:09:43.384
the changes to is all bids 0,

NOTE Confidence: 0.742564872074074

00:09:43.390 --> 00:09:47.726
so this is used by the fill optimization

NOTE Confidence: 0.742564872074074

00:09:47.726 --> 00:09:50.382
that we'll call memset if we're

NOTE Confidence: 0.742564872074074

00:09:50.382 --> 00:09:52.790
going to fill it with an element.

NOTE Confidence: 0.742564872074074

00:09:52.790 --> 00:09:55.310
And if that element happens to be zero,

NOTE Confidence: 0.742564872074074

00:09:55.310 --> 00:09:57.150
we can just call memset memset and it

NOTE Confidence: 0.742564872074074

00:09:57.150 --> 00:09:58.589
doesn't matter how many bytes it is,

NOTE Confidence: 0.742564872074074

00:09:58.590 --> 00:10:00.390
as long as all of the bits of

NOTE Confidence: 0.742564872074074

00:10:00.390 --> 00:10:01.648
that element type are zero.

NOTE Confidence: 0.742564872074074

00:10:01.650 --> 00:10:03.502
I believe this is.

NOTE Confidence: 0.742564872074074

00:10:03.502 --> 00:10:05.817
This was from a previous

NOTE Confidence: 0.742564872074074

00:10:05.817 --> 00:10:07.959
generalization of our optimization.

NOTE Confidence: 0.742564872074074

00:10:07.960 --> 00:10:09.736
This is being further extended to

NOTE Confidence: 0.742564872074074

00:10:09.736 --> 00:10:11.557
handle null put her teeth because

NOTE Confidence: 0.742564872074074

00:10:11.557 --> 00:10:13.594
if we are being given an element,

NOTE Confidence: 0.742564872074074

00:10:13.600 --> 00:10:15.546
say say, we're being asked to fill

NOTE Confidence: 0.742564872074074

00:10:15.546 --> 00:10:17.999
a range of pointers like care stars,

NOTE Confidence: 0.742564872074074

00:10:18.000 --> 00:10:19.215
conscire stars, whatever,

NOTE Confidence: 0.742564872074074

00:10:19.215 --> 00:10:21.645
and the element that we're given

NOTE Confidence: 0.742564872074074

00:10:21.645 --> 00:10:23.719
to fill happens to be null,

NOTE Confidence: 0.742564872074074

00:10:23.720 --> 00:10:26.978
Potter the literal constant that's saying,

NOTE Confidence: 0.742564872074074

00:10:26.980 --> 00:10:29.554
hey, I want you to know out all these

NOTE Confidence: 0.742564872074074

00:10:29.554 --> 00:10:32.140
pointers so this will detect that.

NOTE Confidence: 0.742564872074074

00:10:32.140 --> 00:10:33.372
Hey if the element.

NOTE Confidence: 0.742564872074074

00:10:33.372 --> 00:10:34.912
Are being given an opportunity.

NOTE Confidence: 0.742564872074074

00:10:34.920 --> 00:10:39.230
We can just always return true, UM?

NOTE Confidence: 0.742564872074074

00:10:39.230 --> 00:10:42.918
And we can do so at compile time.

NOTE Confidence: 0.742564872074074

00:10:42.920 --> 00:10:43.414
What, uh,

NOTE Confidence: 0.742564872074074

00:10:43.414 --> 00:10:45.143
this code would have done is it

NOTE Confidence: 0.742564872074074

00:10:45.143 --> 00:10:47.015
would have made a constexpr for OHP.

NOTE Confidence: 0.742564872074074

00:10:47.020 --> 00:10:48.420
I'm zooming in a bit.

NOTE Confidence: 0.742564872074074

00:10:48.420 --> 00:10:50.046
It would have made a constexpr

NOTE Confidence: 0.742564872074074

00:10:50.046 --> 00:10:51.900
per object of type model putter

NOTE Confidence: 0.742564872074074

00:10:51.900 --> 00:10:53.680
and then MEM competitor runtime.

NOTE Confidence: 0.742564872074074

00:10:53.680 --> 00:10:56.214
Umm, so we would get the answer.

NOTE Confidence: 0.742564872074074

00:10:56.220 --> 00:10:57.320
Yes, it's all been zero,

NOTE Confidence: 0.742564872074074

00:10:57.320 --> 00:10:58.622
but we would have had to call

NOTE Confidence: 0.742564872074074

00:10:58.622 --> 00:10:59.978
mencom to do so for no putter.

NOTE Confidence: 0.742564872074074

00:10:59.980 --> 00:11:01.660
We can just statically detect it.

NOTE Confidence: 0.742564872074074

00:11:01.660 --> 00:11:03.340
So why not?

NOTE Confidence: 0.742564872074074

00:11:03.340 --> 00:11:07.260
This improves cogent a little bit more.

NOTE Confidence: 0.742564872074074

00:11:07.260 --> 00:11:08.632
And this does seem like a common

NOTE Confidence: 0.742564872074074

00:11:08.632 --> 00:11:10.099
enough case to be worth optimizing,

NOTE Confidence: 0.742564872074074

00:11:10.100 --> 00:11:10.610
like Phil,

NOTE Confidence: 0.742564872074074

00:11:10.610 --> 00:11:12.395
a range of pointers with all putter.

NOTE Confidence: 0.742564872074074

00:11:12.400 --> 00:11:14.920
Maybe maybe they were uninitialized before.

NOTE Confidence: 0.742564872074074

00:11:14.920 --> 00:11:16.439
Maybe we need to reset them all.

NOTE Confidence: 0.742564872074074

00:11:16.440 --> 00:11:17.725
Seems totally reasonable and we

NOTE Confidence: 0.742564872074074

00:11:17.725 --> 00:11:19.535
can do this things to note put

NOTE Confidence: 0.742564872074074

00:11:19.535 --> 00:11:21.194
out being in the type system when

NOTE Confidence: 0.742564872074074

00:11:21.194 --> 00:11:22.408
things in the type system.

NOTE Confidence: 0.742564872074074

00:11:22.410 --> 00:11:24.468
That's good when things like 0

NOTE Confidence: 0.742564872074074

00:11:24.468 --> 00:11:26.752
is a null pointer constant are

NOTE Confidence: 0.742564872074074

00:11:26.752 --> 00:11:29.272
rules that exist outside the type

NOTE Confidence: 0.742564872074074

00:11:29.272 --> 00:11:32.280
system that leads to misery.

NOTE Confidence: 0.742564872074074

00:11:32.280 --> 00:11:34.457
As we saw from years and years

NOTE Confidence: 0.742564872074074

00:11:34.457 --> 00:11:35.899
of experience with C + 98.

NOTE Confidence: 0.742564872074074

00:11:35.900 --> 00:11:36.779
So if constexpr.

NOTE Confidence: 0.742564872074074

00:11:36.779 --> 00:11:39.277
This same V the tie as no putter

NOTE Confidence: 0.742564872074074

00:11:39.277 --> 00:11:41.545
T then just always return true.

NOTE Confidence: 0.742564872074074

00:11:41.550 --> 00:11:43.582
Otherwise do existing code.

NOTE Confidence: 0.742564872074074

00:11:43.582 --> 00:11:44.090
Uh,

NOTE Confidence: 0.742564872074074

00:11:44.090 --> 00:11:47.870
this is correct because we are already

NOTE Confidence: 0.742564872074074

00:11:47.870 --> 00:11:49.688
taking this thing by consti ref.

NOTE Confidence: 0.742564872074074

00:11:49.690 --> 00:11:51.517
So we don't need to worry about

NOTE Confidence: 0.742564872074074

00:11:51.517 --> 00:11:52.640
C qualifiers is same.

NOTE Confidence: 0.742564872074074

00:11:52.640 --> 00:11:54.190
V is very very strict.

NOTE Confidence: 0.742564872074074

00:11:54.190 --> 00:11:56.640
It wants the type to be exactly

NOTE Confidence: 0.742564872074074

00:11:56.640 --> 00:11:58.661
identical and any differences in

NOTE Confidence: 0.742564872074074

00:11:58.661 --> 00:12:00.461
consonants or volatility will

NOTE Confidence: 0.742564872074074

00:12:00.461 --> 00:12:02.990
cause us to report false here.

NOTE Confidence: 0.742564872074074

00:12:02.990 --> 00:12:04.190
This will ignore constness,

NOTE Confidence: 0.742564872074074

00:12:04.190 --> 00:12:05.480
it ignores value category because

NOTE Confidence: 0.742564872074074

00:12:05.480 --> 00:12:06.770
we're already taking it by

NOTE Confidence: 0.742564872074074

00:12:06.819 --> 00:12:07.939
reference so this is good.

NOTE Confidence: 0.742564872074074

00:12:07.940 --> 00:12:09.128
And if somebody gives us a

NOTE Confidence: 0.742564872074074

00:12:09.128 --> 00:12:10.006
volatile null pointer, well,

NOTE Confidence: 0.742564872074074

00:12:10.006 --> 00:12:11.386
they deserve what they get.

NOTE Confidence: 0.742564872074074

00:12:11.390 --> 00:12:13.826
UM, we'll go through this code path,

NOTE Confidence: 0.742564872074074

00:12:13.830 --> 00:12:16.490
and I think I'm comp handles volatile.

NOTE Confidence: 0.742564872074074

00:12:16.490 --> 00:12:17.562
I think it does.

NOTE Confidence: 0.742564872074074

00:12:17.562 --> 00:12:18.366
Maybe it doesn't,

NOTE Confidence: 0.742564872074074

00:12:18.370 --> 00:12:19.286
but in any event,

NOTE Confidence: 0.742564872074074

00:12:19.286 --> 00:12:20.660
it's not going to be a

NOTE Confidence: 0.829740398181818

00:12:20.720 --> 00:12:22.313
regression, so that's good.

NOTE Confidence: 0.829740398181818

00:12:22.313 --> 00:12:24.560
And trying to think are there any

NOTE Confidence: 0.829740398181818

00:12:24.634 --> 00:12:27.130
other types that we could do this for?

NOTE Confidence: 0.829740398181818

00:12:27.130 --> 00:12:28.426
Brain says no, there's no other

NOTE Confidence: 0.829740398181818

00:12:28.426 --> 00:12:29.534
types that are like number

NOTE Confidence: 0.829740398181818

00:12:29.534 --> 00:12:30.698
that we can just say hey,

NOTE Confidence: 0.829740398181818

00:12:30.700 --> 00:12:32.495
you're always 0 every other

NOTE Confidence: 0.829740398181818

00:12:32.495 --> 00:12:34.290
type can store something useful.

NOTE Confidence: 0.618592171125

00:12:36.580 --> 00:12:40.740
Umm OK NEXT and I was just thinking,

NOTE Confidence: 0.618592171125

00:12:40.740 --> 00:12:42.234
UM, that you could have something

NOTE Confidence: 0.618592171125

00:12:42.234 --> 00:12:43.727
like a structures only data members

NOTE Confidence: 0.618592171125

00:12:43.727 --> 00:12:45.309
and all better but we can't sense

NOTE Confidence: 0.618592171125

00:12:45.309 --> 00:12:46.698
that without light reflection.

NOTE Confidence: 0.618592171125

00:12:46.700 --> 00:12:50.060
And plus that's would be very pathological.

NOTE Confidence: 0.618592171125

00:12:50.060 --> 00:12:55.628
Slash, unusual empty types.

NOTE Confidence: 0.618592171125

00:12:55.630 --> 00:12:57.695
I wonder if you would be interesting

NOTE Confidence: 0.618592171125

00:12:57.695 --> 00:12:59.670
to consider for that optimization.

NOTE Confidence: 0.618592171125

00:12:59.670 --> 00:13:00.494
That's interesting.

NOTE Confidence: 0.618592171125

00:13:00.494 --> 00:13:03.378
It's like how often would you be

NOTE Confidence: 0.618592171125

00:13:03.378 --> 00:13:05.447
filling a range of empty types?

NOTE Confidence: 0.618592171125

00:13:05.450 --> 00:13:08.650
How often do you full range of pointers?

NOTE Confidence: 0.618592171125

00:13:08.650 --> 00:13:09.856
This pointers all admitted a little

NOTE Confidence: 0.618592171125

00:13:09.856 --> 00:13:11.528
more common. Yes, yeah, empty types.

NOTE Confidence: 0.618592171125

00:13:11.528 --> 00:13:14.659
You do see them as things like base classes.

NOTE Confidence: 0.618592171125

00:13:14.660 --> 00:13:17.020
You see them as things like tag types.

NOTE Confidence: 0.618592171125

00:13:17.020 --> 00:13:19.106
You don't really see ranges of them

NOTE Confidence: 0.618592171125

00:13:19.106 --> 00:13:20.779
because they would be stateless.

NOTE Confidence: 0.618592171125

00:13:20.780 --> 00:13:22.920
So although I'll admit yes,

NOTE Confidence: 0.618592171125

00:13:22.920 --> 00:13:25.454
we we could potentially detect is empty.

NOTE Confidence: 0.618592171125

00:13:25.460 --> 00:13:27.500
I think it would occur.

NOTE Confidence: 0.618592171125

00:13:27.500 --> 00:13:29.516
Yeah, I think it would occur so

NOTE Confidence: 0.618592171125

00:13:29.516 --> 00:13:31.726
infrequently that it wouldn't be worth

NOTE Confidence: 0.618592171125

00:13:31.726 --> 00:13:33.438
spending extra metaprogramming here,

NOTE Confidence: 0.618592171125

00:13:33.440 --> 00:13:34.705
but that's that's an interesting

NOTE Confidence: 0.618592171125

00:13:34.705 --> 00:13:36.250
question about the compile time piece.

NOTE Confidence: 0.618592171125

00:13:36.250 --> 00:13:38.217
I mean, the sorry the runtime case.

NOTE Confidence: 0.618592171125

00:13:38.220 --> 00:13:40.054
Right, uh, yeah and this would say,

NOTE Confidence: 0.618592171125

00:13:40.060 --> 00:13:40.626
hey, UM,

NOTE Confidence: 0.618592171125

00:13:40.626 --> 00:13:42.890
if it's constexpr and value in it it

NOTE Confidence: 0.618592171125

00:13:42.959 --> 00:13:45.479
will get it will get the correct answer.

NOTE Confidence: 0.618592171125

00:13:45.480 --> 00:13:46.908
So once we get a little bit

NOTE Confidence: 0.618592171125

00:13:46.908 --> 00:13:47.750
extra runtime code Gen.

NOTE Confidence: 0.830689247692308

00:13:51.900 --> 00:13:54.810
OK, so now we've got more

NOTE Confidence: 0.830689247692308

00:13:54.810 --> 00:13:56.750
metaprogramming logic can compare

NOTE Confidence: 0.830689247692308

00:13:56.835 --> 00:14:00.010
with operator equal. This is asking.

NOTE Confidence: 0.873937055

00:14:02.230 --> 00:14:03.430
I'm I'm reading ahead of it.

NOTE Confidence: 0.873937055

00:14:03.430 --> 00:14:06.826
Can we form the equality expression?

NOTE Confidence: 0.873937055

00:14:06.830 --> 00:14:09.070
And then some of this pointer address

NOTE Confidence: 0.873937055

00:14:09.070 --> 00:14:10.830
convertible stuff that we had before.

NOTE Confidence: 0.873937055

00:14:10.830 --> 00:14:14.502
OK, so let's look at what's going on here.

NOTE Confidence: 0.873937055

00:14:14.510 --> 00:14:16.162
Template on under score.

NOTE Confidence: 0.873937055

00:14:16.162 --> 00:14:19.149
Taiwan under score Type 2 and then

NOTE Confidence: 0.873937055

00:14:19.149 --> 00:14:21.705
class default to void inline Vars.

NOTE Confidence: 0.873937055

00:14:21.710 --> 00:14:23.768
Our macro that expands to inline

NOTE Confidence: 0.873937055

00:14:23.768 --> 00:14:25.949
in Cpl 17 mode and above.

NOTE Confidence: 0.873937055

00:14:25.950 --> 00:14:28.589
We always want that for our constexpr,

NOTE Confidence: 0.873937055

00:14:28.590 --> 00:14:31.848
bools or constexpr constants in general.

NOTE Confidence: 0.873937055

00:14:31.850 --> 00:14:35.084
Umm, under score can compare with

NOTE Confidence: 0.873937055

00:14:35.084 --> 00:14:37.240
operator equal defaults defaults.

NOTE Confidence: 0.873937055

00:14:37.240 --> 00:14:40.780
Umm, but if we meet criteria it can be true.

NOTE Confidence: 0.873937055

00:14:40.780 --> 00:14:42.684
So this one here just looks wrapped

NOTE Confidence: 0.873937055

00:14:42.684 --> 00:14:44.213
because of the narrow window

NOTE Confidence: 0.873937055

00:14:44.213 --> 00:14:46.260
here for Taiwan and Tai two.

NOTE Confidence: 0.873937055

00:14:46.260 --> 00:14:48.416
This is our void T spine pattern.

NOTE Confidence: 0.873937055

00:14:48.420 --> 00:14:49.860
We basically say hey,

NOTE Confidence: 0.873937055

00:14:49.860 --> 00:14:51.924
we're gonna write an expression that

NOTE Confidence: 0.873937055

00:14:51.924 --> 00:14:53.998
we want to put it inside decal type

NOTE Confidence: 0.873937055

00:14:53.998 --> 00:14:55.968
to get its type and then smash that

NOTE Confidence: 0.873937055

00:14:55.968 --> 00:14:57.981
type to void T using void T we're

NOTE Confidence: 0.873937055

00:14:57.981 --> 00:14:59.933
always going to get void out of this,

NOTE Confidence: 0.873937055

00:14:59.940 --> 00:15:03.153
so if this thing is well formed

NOTE Confidence: 0.873937055

00:15:03.153 --> 00:15:06.246
it will be selected as the

NOTE Confidence: 0.873937055

00:15:06.246 --> 00:15:07.698
partial specialization for this.

NOTE Confidence: 0.873937055

00:15:07.700 --> 00:15:09.737
Uh, because any use of this will

NOTE Confidence: 0.873937055

00:15:09.737 --> 00:15:11.470
use this classical voice default,

NOTE Confidence: 0.873937055

00:15:11.470 --> 00:15:13.066
this will be well formed and void

NOTE Confidence: 0.873937055

00:15:13.066 --> 00:15:14.882
is more specific, so we'll take it.

NOTE Confidence: 0.873937055

00:15:14.882 --> 00:15:17.370
But if this expression is not well formed,

NOTE Confidence: 0.873937055

00:15:17.370 --> 00:15:19.393
then it's vnas away and you only

NOTE Confidence: 0.873937055

00:15:19.393 --> 00:15:21.449
have the primary template available.

NOTE Confidence: 0.873937055

00:15:21.450 --> 00:15:23.662
This is the void T pattern for

NOTE Confidence: 0.873937055

00:15:23.662 --> 00:15:25.617
Sheena that we conventionally use

NOTE Confidence: 0.873937055

00:15:25.617 --> 00:15:28.384
everywhere in the STL and it once

NOTE Confidence: 0.873937055

00:15:28.384 --> 00:15:30.470
you learn the arcane trick behind it.

NOTE Confidence: 0.873937055

00:15:30.470 --> 00:15:34.334
It is nice and terse and fairly

NOTE Confidence: 0.873937055

00:15:34.334 --> 00:15:37.238
simple to parse. OK, so we formed.

NOTE Confidence: 0.873937055

00:15:37.238 --> 00:15:39.110
Deco Val and imagine her value

NOTE Confidence: 0.873937055

00:15:39.182 --> 00:15:40.418
of type Taiwan ref.

NOTE Confidence: 0.873937055

00:15:40.420 --> 00:15:42.177
So we're going to compare L values,

NOTE Confidence: 0.873937055

00:15:42.180 --> 00:15:44.898
but we're not going to add any sort of

NOTE Confidence: 0.873937055

00:15:44.898 --> 00:15:46.664
consonants if we can say that's equal

NOTE Confidence: 0.873937055

00:15:46.664 --> 00:15:48.837
equal to a stood deco bell tie 2 ref.

NOTE Confidence: 0.873937055

00:15:48.840 --> 00:15:50.891
Then we can compare them with operator

NOTE Confidence: 0.873937055

00:15:50.891 --> 00:15:54.424
equal OK, because we usually compare.

NOTE Confidence: 0.873937055

00:15:54.424 --> 00:15:57.064
L values. Which makes sense.

NOTE Confidence: 0.873937055

00:15:57.064 --> 00:15:59.392
We would be calling this for

NOTE Confidence: 0.873937055

00:15:59.392 --> 00:16:00.618
elements in a range.

NOTE Confidence: 0.873937055

00:16:00.620 --> 00:16:02.125
Ah, do I like all values there?

NOTE Confidence: 0.873937055

00:16:02.130 --> 00:16:03.138
That's interesting, uh,

NOTE Confidence: 0.873937055

00:16:03.138 --> 00:16:04.818
I'm thinking about ohh proxies,

NOTE Confidence: 0.873937055

00:16:04.820 --> 00:16:06.710
UM, if iterators when dereferenced,

NOTE Confidence: 0.873937055

00:16:06.710 --> 00:16:07.722
return proxies.

NOTE Confidence: 0.873937055

00:16:07.722 --> 00:16:10.758
Am I comfortable with L value

NOTE Confidence: 0.873937055

00:16:10.758 --> 00:16:12.750
references being added here?

NOTE Confidence: 0.873937055

00:16:12.750 --> 00:16:13.120
UM?

NOTE Confidence: 0.844032235

00:16:17.280 --> 00:16:18.570
I'm not sure I'm going to

NOTE Confidence: 0.844032235

00:16:18.570 --> 00:16:19.759
think about that for a bit.

NOTE Confidence: 0.844032235

00:16:19.760 --> 00:16:23.443
UM, uh, only only, uh, very unusual types

NOTE Confidence: 0.844032235

00:16:23.443 --> 00:16:25.069
would be sensitive to the difference.

NOTE Confidence: 0.844032235

00:16:25.070 --> 00:16:27.590
Vast majority of types don't care.

NOTE Confidence: 0.844032235

00:16:27.590 --> 00:16:30.848
OK, so then we have a.

NOTE Confidence: 0.844032235

00:16:30.850 --> 00:16:32.332
Separate variable template.

NOTE Confidence: 0.844032235

00:16:32.332 --> 00:16:35.296
This is is pointer address comparable?

NOTE Confidence: 0.844032235

00:16:35.300 --> 00:16:38.140
This asks for a Taiwan and tail two.

NOTE Confidence: 0.844032235

00:16:38.140 --> 00:16:42.080
Can we compare the pointers?

NOTE Confidence: 0.844032235

00:16:42.080 --> 00:16:44.130
Taiwan Star and Taitu star

NOTE Confidence: 0.844032235

00:16:44.130 --> 00:16:45.360
with operator quality.

NOTE Confidence: 0.844032235

00:16:45.360 --> 00:16:47.722
Uh, for some of this will be true, like UM,

NOTE Confidence: 0.844032235

00:16:47.722 --> 00:16:50.277
carestar equals constant care star.

NOTE Confidence: 0.844032235

00:16:50.280 --> 00:16:51.411
That's totally valid,

NOTE Confidence: 0.844032235

00:16:51.411 --> 00:16:53.296
but carestar equals in Star.

NOTE Confidence: 0.844032235

00:16:53.300 --> 00:16:53.838
That's bogus.

NOTE Confidence: 0.844032235

00:16:53.838 --> 00:16:54.914
There's no such conversions

NOTE Confidence: 0.844032235

00:16:54.914 --> 00:16:56.300
that could make that works.

NOTE Confidence: 0.844032235

00:16:56.300 --> 00:16:59.000
That would be false.

NOTE Confidence: 0.844032235

00:16:59.000 --> 00:17:02.080
And then, regardless of what this reports,

NOTE Confidence: 0.844032235

00:17:02.080 --> 00:17:03.460
because there's no short

NOTE Confidence: 0.844032235

00:17:03.460 --> 00:17:04.840
circuiting at compile time,

NOTE Confidence: 0.844032235

00:17:04.840 --> 00:17:08.660
we also asked the questions.

NOTE Confidence: 0.844032235

00:17:08.660 --> 00:17:10.364
Is Taiwan Pointer address

NOTE Confidence: 0.844032235

00:17:10.364 --> 00:17:13.470
convertible to type 2 or vice versa?

NOTE Confidence: 0.814335652

00:17:16.210 --> 00:17:18.514
OK, this is interesting.

NOTE Confidence: 0.814335652

00:17:18.514 --> 00:17:20.710
UM, this is that thing that asks.

NOTE Confidence: 0.814335652

00:17:20.710 --> 00:17:23.010
I think this was above.

NOTE Confidence: 0.814335652

00:17:23.010 --> 00:17:25.647
Let me see if I can find a pointer.

NOTE Confidence: 0.814335652

00:17:25.650 --> 00:17:26.866
Address yeah this thing,

NOTE Confidence: 0.814335652

00:17:26.866 --> 00:17:28.364
Nope, that's the.

NOTE Confidence: 0.814335652

00:17:28.364 --> 00:17:31.946
Versus this ohh here it is.

NOTE Confidence: 0.814335652

00:17:31.950 --> 00:17:34.260
OK. Nope, that's more use.

NOTE Confidence: 0.814335652

00:17:34.260 --> 00:17:35.680
Was this in another header?

NOTE Confidence: 0.814335652

00:17:35.680 --> 00:17:36.488
Oh, here it is.

NOTE Confidence: 0.643990596875

00:17:38.770 --> 00:17:40.468
This says are they the same

NOTE Confidence: 0.643990596875

00:17:40.468 --> 00:17:42.102
after ignoring CV's and?

NOTE Confidence: 0.643990596875

00:17:42.102 --> 00:17:47.780
Is it a base of is destiny base of source?

NOTE Confidence: 0.643990596875

00:17:47.780 --> 00:17:49.172
Where the pointer interconvertible,

NOTE Confidence: 0.643990596875

00:17:49.172 --> 00:17:51.260
meaning there's no point or adjustments,

NOTE Confidence: 0.643990596875

00:17:51.260 --> 00:17:56.068
so basically are the bits literally the same.

NOTE Confidence: 0.643990596875

00:17:56.070 --> 00:17:57.940
If you convert from counter

NOTE Confidence: 0.643990596875

00:17:57.940 --> 00:18:00.250
to source to pointer to text,

NOTE Confidence: 0.643990596875

00:18:00.250 --> 00:18:02.119
which is true if you're just adjusting

NOTE Confidence: 0.643990596875

00:18:02.119 --> 00:18:04.184
CV qualifiers and it's true if you're

NOTE Confidence: 0.643990596875

00:18:04.184 --> 00:18:05.400
doing this base transformation.

NOTE Confidence: 0.826589256

00:18:09.380 --> 00:18:10.560
And we also special case.

NOTE Confidence: 0.826589256

00:18:10.560 --> 00:18:11.778
Oh, if any of them were void.

NOTE Confidence: 0.826589256

00:18:11.780 --> 00:18:13.880
Pointer Void star then you can

NOTE Confidence: 0.826589256

00:18:13.880 --> 00:18:16.030
certainly, UM, convert there.

NOTE Confidence: 0.76724104225

00:18:23.400 --> 00:18:25.255
I was briefly thinking about does this

NOTE Confidence: 0.76724104225

00:18:25.255 --> 00:18:27.180
report true for something like a void

NOTE Confidence: 0.76724104225

00:18:27.180 --> 00:18:28.800
star and a function pointer star?

NOTE Confidence: 0.76724104225

00:18:28.800 --> 00:18:34.224
Which or function star which is maybe not?

NOTE Confidence: 0.76724104225

00:18:34.230 --> 00:18:36.150
But at least below we guard it with.

NOTE Confidence: 0.76724104225

00:18:36.150 --> 00:18:39.129
Can we even form the equality which is fine?

NOTE Confidence: 0.76724104225

00:18:39.130 --> 00:18:41.386
Umm, OK, so let's jump to that usage.

NOTE Confidence: 0.83340906

00:18:45.130 --> 00:18:47.560
OK, so this is asking can we form the

NOTE Confidence: 0.83340906

00:18:47.560 --> 00:18:51.690
equality expression between the pointers and.

NOTE Confidence: 0.83340906

00:18:51.690 --> 00:18:53.600
If we try to convert one to two or two

NOTE Confidence: 0.83340906

00:18:53.651 --> 00:18:55.618
to one because we don't know exactly

NOTE Confidence: 0.83340906

00:18:55.618 --> 00:18:57.069
which order they've been given,

NOTE Confidence: 0.83340906

00:18:57.070 --> 00:18:59.156
for example, could be they star and

NOTE Confidence: 0.83340906

00:18:59.156 --> 00:19:01.548
derive star or drive star and basestar.

NOTE Confidence: 0.83340906

00:19:01.550 --> 00:19:03.198
We just need one of those to be

NOTE Confidence: 0.83340906

00:19:03.198 --> 00:19:04.180
pointer address convertible.

NOTE Confidence: 0.83340906

00:19:04.180 --> 00:19:07.270
They don't both need to be.

NOTE Confidence: 0.83340906

00:19:07.270 --> 00:19:08.370
Because the the compiler,

NOTE Confidence: 0.83340906

00:19:08.370 --> 00:19:09.745
when it performs the conversion,

NOTE Confidence: 0.83340906

00:19:09.750 --> 00:19:11.922
will select the more the more

NOTE Confidence: 0.83340906

00:19:11.922 --> 00:19:15.210
base one to convert them to UM.

NOTE Confidence: 0.83340906

00:19:15.210 --> 00:19:18.290
So if either of those are true,

NOTE Confidence: 0.83340906

00:19:18.290 --> 00:19:20.432
then that means we can just

NOTE Confidence: 0.83340906

00:19:20.432 --> 00:19:23.900
compare the pointers using mencom.

NOTE Confidence: 0.83340906

00:19:23.900 --> 00:19:26.708
OK, I think this all makes sense to me.

NOTE Confidence: 0.83340906

00:19:26.710 --> 00:19:29.020
Uhm, the fact that can compare with

NOTE Confidence: 0.83340906

00:19:29.020 --> 00:19:31.139
operator equal is always answering.

NOTE Confidence: 0.83340906

00:19:31.140 --> 00:19:32.750
The question means that we're not relying

NOTE Confidence: 0.83340906

00:19:32.750 --> 00:19:34.724
on this to return, whether they're.

NOTE Confidence: 0.83340906

00:19:34.724 --> 00:19:37.958
The quality comparable in all this is

NOTE Confidence: 0.83340906

00:19:37.958 --> 00:19:41.830
merely refining UM, when the supports true.

NOTE Confidence: 0.83340906

00:19:41.830 --> 00:19:43.645
I also see.

NOTE Confidence: 0.83340906

00:19:43.650 --> 00:19:45.694
There's no real reason to refactor this

NOTE Confidence: 0.83340906

00:19:45.694 --> 00:19:48.178
into terms of conjunction and disjunction.

NOTE Confidence: 0.83340906

00:19:48.180 --> 00:19:50.800
There might be a small

NOTE Confidence: 0.83340906

00:19:50.800 --> 00:19:51.848
throughput improvement.

NOTE Confidence: 0.83340906

00:19:51.850 --> 00:19:53.857
To not have to ask these questions if it's

NOTE Confidence: 0.83340906

00:19:53.857 --> 00:19:55.970
not comparable with operator equal at all.

NOTE Confidence: 0.83340906

00:19:55.970 --> 00:19:57.748
Umm, I'm not too worried about that.

NOTE Confidence: 0.83340906

00:19:57.750 --> 00:19:58.956
If we ever find through brushes,

NOTE Confidence: 0.83340906

00:19:58.960 --> 00:20:01.450
we can always refactor this later.

NOTE Confidence: 0.83340906

00:20:01.450 --> 00:20:02.764
Right now it's not really reactable

NOTE Confidence: 0.83340906

00:20:02.764 --> 00:20:04.260
because there's no strict version of this.

NOTE Confidence: 0.83340906

00:20:04.260 --> 00:20:06.870
These are all, uh, variable templates,

NOTE Confidence: 0.83340906

00:20:06.870 --> 00:20:08.730
so this is this is good.

NOTE Confidence: 0.83340906

00:20:08.730 --> 00:20:13.490
OK, so this is being used down here.

NOTE Confidence: 0.83340906

00:20:13.490 --> 00:20:16.028
But there's one change happening here.

NOTE Confidence: 0.83340906

00:20:16.030 --> 00:20:16.725
Uhm?

NOTE Confidence: 0.83340906

00:20:16.725 --> 00:20:20.895
This is the implementation of canned

NOTE Confidence: 0.83340906

00:20:20.895 --> 00:20:22.980
meme comp elements.

NOTE Confidence: 0.83340906

00:20:22.980 --> 00:20:27.570
Uh, previously we used to ask.

NOTE Confidence: 0.83340906

00:20:27.570 --> 00:20:30.510
Are they the same size?

NOTE Confidence: 0.83340906

00:20:30.510 --> 00:20:33.758
And are they integral and non volatile?

NOTE Confidence: 0.902351348333334

00:20:37.420 --> 00:20:40.468
And then we have a specialization.

NOTE Confidence: 0.902351348333334

00:20:40.470 --> 00:20:45.350
Umm? That handles if that's false, yes.

NOTE Confidence: 0.8018801025

00:20:51.170 --> 00:20:53.330
After all these, yeah.

NOTE Confidence: 0.750290586666667

00:20:55.590 --> 00:20:57.498
So that's what that was doing.

NOTE Confidence: 0.750290586666667

00:20:57.500 --> 00:20:59.348
This is being changed.

NOTE Confidence: 0.750290586666667

00:20:59.348 --> 00:21:04.218
We're now going to permit volatile here.

NOTE Confidence: 0.750290586666667

00:21:04.220 --> 00:21:06.260
We keep the size of all in one size M2.

NOTE Confidence: 0.750290586666667

00:21:06.260 --> 00:21:08.642
We keep LM one integral we

NOTE Confidence: 0.750290586666667

00:21:08.642 --> 00:21:10.840
keep is it integral V LM2?

NOTE Confidence: 0.750290586666667

00:21:10.840 --> 00:21:12.615
This is claim format being

NOTE Confidence: 0.750290586666667

00:21:12.615 --> 00:21:14.690
kind of bad but that's OK.

NOTE Confidence: 0.917672103333333

00:21:19.400 --> 00:21:22.358
OK, uh, was it intended to?

NOTE Confidence: 0.917672103333333

00:21:22.360 --> 00:21:23.968
Handle volatile here.

NOTE Confidence: 0.84181010875

00:21:29.500 --> 00:21:31.964
I need to look at the discussion notes.

NOTE Confidence: 0.84181010875

00:21:31.970 --> 00:21:34.730
Uh, let me just open up a new tab 2158.

NOTE Confidence: 0.563035455666667

00:21:44.350 --> 00:21:48.800
OK, this is. Camp elements.

NOTE Confidence: 0.716136423333333

00:21:58.050 --> 00:22:00.510
All these functions are named similarly.

NOTE Confidence: 0.716136423333333

00:22:00.510 --> 00:22:03.540
UM, OK. Pointers to pointer interconvertible.

NOTE Confidence: 0.7237053275

00:22:07.650 --> 00:22:09.295
OK, this doesn't say anything about Moon

NOTE Confidence: 0.7237053275

00:22:09.295 --> 00:22:12.260
comp. It says it disabled the memcpy

NOTE Confidence: 0.7237053275

00:22:12.260 --> 00:22:14.860
and memmove optimization for volatile.

NOTE Confidence: 0.7237053275

00:22:14.860 --> 00:22:17.020
But this meme comp was already

NOTE Confidence: 0.7237053275

00:22:17.020 --> 00:22:18.460
disabling it for volatile.

NOTE Confidence: 0.7237053275

00:22:18.460 --> 00:22:20.680
So and now that nonvolatile

NOTE Confidence: 0.7237053275

00:22:20.680 --> 00:22:23.066
logic is being removed. Uhm?

NOTE Confidence: 0.7237053275

00:22:23.066 --> 00:22:26.096
Why is this being removed?

NOTE Confidence: 0.7237053275

00:22:26.100 --> 00:22:26.866
Is integral?

NOTE Confidence: 0.7237053275

00:22:26.866 --> 00:22:29.547
Uh, because this is a standard primary,

NOTE Confidence: 0.7237053275

00:22:29.550 --> 00:22:31.654
uh, this is a standard type trait for

NOTE Confidence: 0.7237053275

00:22:31.654 --> 00:22:33.920
one of the primary type categories,

NOTE Confidence: 0.7237053275

00:22:33.920 --> 00:22:36.134
meaning the sort of the entire

NOTE Confidence: 0.7237053275

00:22:36.134 --> 00:22:38.844
universe of types is divided up into

NOTE Confidence: 0.7237053275

00:22:38.844 --> 00:22:41.148
14 or so primary type categories

NOTE Confidence: 0.7237053275

00:22:41.148 --> 00:22:43.349
like integral floating point.

NOTE Confidence: 0.799481788571428

00:22:45.590 --> 00:22:48.628
No putter, void and a few others.

NOTE Confidence: 0.799481788571428

00:22:48.630 --> 00:22:51.430
UM, all of those ignore

NOTE Confidence: 0.799481788571428

00:22:51.430 --> 00:22:53.670
top level CV qualifiers,

NOTE Confidence: 0.799481788571428

00:22:53.670 --> 00:22:56.646
so is integral int constant volatile,

NOTE Confidence: 0.799481788571428

00:22:56.650 --> 00:22:58.442
int and constant model.

NOTE Confidence: 0.799481788571428

00:22:58.442 --> 00:23:00.792
Inter all true here we were

NOTE Confidence: 0.799481788571428

00:23:00.792 --> 00:23:02.128
excluding volatile and now

NOTE Confidence: 0.799481788571428

00:23:02.128 --> 00:23:04.120
it's no longer being excluded.

NOTE Confidence: 0.839794808333333

00:23:06.520 --> 00:23:08.480
Does anything else handle

NOTE Confidence: 0.839794808333333

00:23:08.480 --> 00:23:10.650
that here? This ***.

NOTE Confidence: 0.8251414275

00:23:12.870 --> 00:23:14.754
Once we're satisfied that they're the

NOTE Confidence: 0.8251414275

00:23:14.754 --> 00:23:16.809
same type and they're both integral,

NOTE Confidence: 0.8251414275

00:23:16.810 --> 00:23:20.730
then you can medcomp if one or other is bool,

NOTE Confidence: 0.8251414275

00:23:20.730 --> 00:23:22.042
or if they're negative.

NOTE Confidence: 0.8251414275

00:23:22.042 --> 00:23:23.682
One values are the same,

NOTE Confidence: 0.8251414275

00:23:23.690 --> 00:23:26.426
then we handle bytes we handle.

NOTE Confidence: 0.8251414275

00:23:26.430 --> 00:23:30.090
Pointers. Otherwise, we report false,

NOTE Confidence: 0.8251414275

00:23:30.090 --> 00:23:33.714
so this would report true for volatile int.

NOTE Confidence: 0.8251414275

00:23:33.720 --> 00:23:35.248
I don't understand why

NOTE Confidence: 0.8251414275

00:23:35.248 --> 00:23:36.776
volatiles being removed there.

NOTE Confidence: 0.85179651875

00:23:42.100 --> 00:23:46.508
Ah, OK. It's being lifted up a level.

NOTE Confidence: 0.702181922

00:23:49.310 --> 00:23:52.790
This is asking can mem comp elements UM?

NOTE Confidence: 0.74135448

00:23:56.500 --> 00:23:58.350
And we use it, uh,

NOTE Confidence: 0.74135448

00:23:58.350 --> 00:24:00.926
I guess we have 10 elements with

NOTE Confidence: 0.74135448

00:24:00.926 --> 00:24:04.400
PRED in the middle here, yeah?

NOTE Confidence: 0.74135448

00:24:04.400 --> 00:24:06.140
And then Kemp elements with

NOTE Confidence: 0.74135448

00:24:06.140 --> 00:24:07.532
Pred is used here.

NOTE Confidence: 0.74135448

00:24:07.540 --> 00:24:09.540
And the equal meme comp is safe helper,

NOTE Confidence: 0.74135448

00:24:09.540 --> 00:24:11.577
this asks hey our iterator ITER one

NOTE Confidence: 0.74135448

00:24:11.577 --> 00:24:13.819
and enter 2 contiguous iterators,

NOTE Confidence: 0.74135448

00:24:13.820 --> 00:24:15.205
and that the iterators don't

NOTE Confidence: 0.74135448

00:24:15.205 --> 00:24:16.313
point the volatile stuff.

NOTE Confidence: 0.74135448

00:24:16.320 --> 00:24:18.010
So this is where volatility

NOTE Confidence: 0.74135448

00:24:18.010 --> 00:24:19.024
is being excluded.

NOTE Confidence: 0.9601853

00:24:21.950 --> 00:24:24.520
OK, so I believe that's correct,

NOTE Confidence: 0.9601853

00:24:24.520 --> 00:24:26.383
but I think a comment needs to be changed,

NOTE Confidence: 0.9601853

00:24:26.390 --> 00:24:28.514
so one of the things I look for when

NOTE Confidence: 0.9601853

00:24:28.514 --> 00:24:30.505
code is significantly changing is that

NOTE Confidence: 0.9601853

00:24:30.505 --> 00:24:32.670
if there are any comments around,

NOTE Confidence: 0.9601853

00:24:32.670 --> 00:24:35.238
it is quite possible to change the code

NOTE Confidence: 0.9601853

00:24:35.238 --> 00:24:37.990
such that the comments become inaccurate.

NOTE Confidence: 0.9601853

00:24:37.990 --> 00:24:40.290
So double checking the comments

NOTE Confidence: 0.9601853

00:24:40.290 --> 00:24:42.647
for validity is important here.

NOTE Confidence: 0.9601853

00:24:42.647 --> 00:24:45.749
The volatile check is being removed.

NOTE Confidence: 0.9601853

00:24:45.750 --> 00:24:48.088
We've got this big comment here and

NOTE Confidence: 0.9601853

00:24:48.088 --> 00:24:49.948
this was describing the old code.

NOTE Confidence: 0.9601853

00:24:49.950 --> 00:24:52.220
It said L1 and L.

NOTE Confidence: 0.9601853

00:24:52.220 --> 00:24:54.481
You aren't top level cons because we

NOTE Confidence: 0.9601853

00:24:54.481 --> 00:24:56.570
remove cons tea in an hour layer.

NOTE Confidence: 0.9601853

00:24:56.570 --> 00:24:59.098
UM, and then we talk about integral types

NOTE Confidence: 0.9601853

00:24:59.098 --> 00:25:01.376
being eligible when they can't be volatile,

NOTE Confidence: 0.9601853

00:25:01.380 --> 00:25:02.825
and this was intended to

NOTE Confidence: 0.9601853

00:25:02.825 --> 00:25:04.270
map to this check here.

NOTE Confidence: 0.9601853

00:25:04.270 --> 00:25:05.606
That's no longer here,

NOTE Confidence: 0.9601853

00:25:05.606 --> 00:25:07.610
so I think at a minimum,

NOTE Confidence: 0.9601853

00:25:07.610 --> 00:25:08.906
this comment needs to be updated.

NOTE Confidence: 0.9601853

00:25:08.910 --> 00:25:11.395
Either we we just need to strike

NOTE Confidence: 0.9601853

00:25:11.400 --> 00:25:12.872
this bit about volatility,

NOTE Confidence: 0.9601853

00:25:12.872 --> 00:25:15.943
or a probably better we should just add

NOTE Confidence: 0.9601853

00:25:15.943 --> 00:25:18.319
some parenthetical note like this being.

NOTE Confidence: 0.9601853

00:25:18.320 --> 00:25:21.250
This is being checked in.

NOTE Confidence: 0.9601853

00:25:21.250 --> 00:25:23.266
What was the layer equal meme

NOTE Confidence: 0.9601853

00:25:23.266 --> 00:25:24.967
comp is safe helper UM?

NOTE Confidence: 0.9601853

00:25:24.967 --> 00:25:26.752
Or we could just describe

NOTE Confidence: 0.9601853

00:25:26.752 --> 00:25:28.750
that it's Umm checked before.

NOTE Confidence: 0.9601853

00:25:28.750 --> 00:25:33.636
Using this so I will ask that.

NOTE Confidence: 0.9489374

00:25:37.740 --> 00:25:38.230
OK.

NOTE Confidence: 0.627089732857143

00:25:45.580 --> 00:25:50.750
Go back to go. Back to that. Back tech.

NOTE Confidence: 0.627089732857143

00:25:50.750 --> 00:25:55.970
OK? Umm it looks like the is.

NOTE Confidence: 0.752768652

00:25:58.880 --> 00:26:00.460
Just grab the whole thing.

NOTE Confidence: 0.756419005

00:26:05.300 --> 00:26:12.124
Etcetera checks are being lifted up to the.

NOTE Confidence: 0.756419005

00:26:12.130 --> 00:26:14.210
Get the other thing,

NOTE Confidence: 0.756419005

00:26:14.210 --> 00:26:16.810
uh, where it says here?

NOTE Confidence: 0.756419005

00:26:16.810 --> 00:26:18.370
Iterator is volatile,

NOTE Confidence: 0.756419005

00:26:18.370 --> 00:26:19.952
so it's the equal meme comp is

NOTE Confidence: 0.756419005

00:26:19.952 --> 00:26:21.607
what I wanna do is double click

NOTE Confidence: 0.756419005

00:26:21.607 --> 00:26:23.469
but it grabs the space at the end.

NOTE Confidence: 0.756419005

00:26:23.470 --> 00:26:24.675
I'll guess I'll take it

NOTE Confidence: 0.756419005

00:26:24.675 --> 00:26:25.639
and delete the space.

NOTE Confidence: 0.55972052

00:26:30.600 --> 00:26:31.620
What piece without the space,

NOTE Confidence: 0.55972052

00:26:31.620 --> 00:26:32.848
interesting uh,

NOTE Confidence: 0.55972052

00:26:32.848 --> 00:26:35.918
equal encompass save helper layer,

NOTE Confidence: 0.55972052

00:26:35.920 --> 00:26:39.736
which is fine. However, I uh,

NOTE Confidence: 0.55972052

00:26:39.740 --> 00:26:43.589
however, the comment.

NOTE Confidence: 0.55972052

00:26:43.590 --> 00:26:46.950
They can't be volatile.

NOTE Confidence: 0.55972052

00:26:46.950 --> 00:26:48.650
Don't worry about hope,

NOTE Confidence: 0.55972052

00:26:48.650 --> 00:26:50.775
I don't wanna stay there.

NOTE Confidence: 0.55972052

00:26:50.780 --> 00:26:51.722
To comment,

NOTE Confidence: 0.55972052

00:26:51.722 --> 00:26:54.077
they can't be volatile above.

NOTE Confidence: 0.81506660125

00:26:56.520 --> 00:27:01.910
Was referring to the checks that have

NOTE Confidence: 0.81506660125

00:27:01.910 --> 00:27:08.192
been moved. Should this comment?

NOTE Confidence: 0.81506660125

00:27:08.192 --> 00:27:14.780
Or should we add a parenthetical note to

NOTE Confidence: 0.81506660125

00:27:14.780 --> 00:27:21.319
this comment mentioning that volatility?

NOTE Confidence: 0.81506660125

00:27:21.320 --> 00:27:23.460
It's alright phrasing, Umm?

NOTE Confidence: 0.497847289708333

00:27:25.540 --> 00:27:27.838
Here we said we remove consent

NOTE Confidence: 0.497847289708333

00:27:27.838 --> 00:27:30.519
before using UM and copy elements.

NOTE Confidence: 0.497847289708333

00:27:30.520 --> 00:27:33.190
I can just copy that volatility.

NOTE Confidence: 0.706467

00:27:35.940 --> 00:27:42.114
Has already been handled similar to the.

NOTE Confidence: 0.84921396

00:27:44.200 --> 00:27:48.080
Comment above. OK, see if that makes sense.

NOTE Confidence: 0.84921396

00:27:48.080 --> 00:27:49.622
It looks like the not as

NOTE Confidence: 0.84921396

00:27:49.622 --> 00:27:50.621
volatile VLM one, etcetera.

NOTE Confidence: 0.84921396

00:27:50.621 --> 00:27:52.610
Checks are being lifted up to the equal M

NOTE Confidence: 0.84921396

00:27:52.653 --> 00:27:54.566
comp as safe helper layer, which is fine.

NOTE Confidence: 0.84921396

00:27:54.566 --> 00:27:56.138
However the comment they can't be

NOTE Confidence: 0.84921396

00:27:56.138 --> 00:27:57.461
volatile above was referring to

NOTE Confidence: 0.84921396

00:27:57.461 --> 00:27:58.979
the checks that have been moved.

NOTE Confidence: 0.84921396

00:27:58.980 --> 00:28:01.080
Should we add a parenthetical note to

NOTE Confidence: 0.84921396

00:28:01.080 --> 00:28:02.649
this comment mentioning the volatility

NOTE Confidence: 0.84921396

00:28:02.649 --> 00:28:04.174
has already been handled similar

NOTE Confidence: 0.84921396

00:28:04.174 --> 00:28:06.164
to the because we removed concept

NOTE Confidence: 0.84921396

00:28:06.164 --> 00:28:07.859
before using can member complements.

NOTE Confidence: 0.84921396

00:28:07.860 --> 00:28:10.620
Comment above. OK.

NOTE Confidence: 0.866795166666667

00:28:18.010 --> 00:28:21.920
Yeah, this is. Although this is all

NOTE Confidence: 0.866795166666667

00:28:21.920 --> 00:28:23.740
like variable template metaprogramming,

NOTE Confidence: 0.866795166666667

00:28:23.740 --> 00:28:25.372
UM, really it's it's a question

NOTE Confidence: 0.866795166666667

00:28:25.372 --> 00:28:26.460
of like preconditions and

NOTE Confidence: 0.866795166666667

00:28:26.515 --> 00:28:27.947
postconditions here are there.

NOTE Confidence: 0.866795166666667

00:28:27.950 --> 00:28:29.777
This thing is assuming certain things about

NOTE Confidence: 0.866795166666667

00:28:29.777 --> 00:28:31.578
its inputs that they're not convinced,

NOTE Confidence: 0.866795166666667

00:28:31.580 --> 00:28:32.804
because that's already been

NOTE Confidence: 0.866795166666667

00:28:32.804 --> 00:28:34.334
handled that they're not volatile,

NOTE Confidence: 0.866795166666667

00:28:34.340 --> 00:28:37.016
because volatility has already been handled.

NOTE Confidence: 0.866795166666667

00:28:37.020 --> 00:28:39.460
So we're just really documenting

NOTE Confidence: 0.866795166666667

00:28:39.460 --> 00:28:40.436
our preconditions,

NOTE Confidence: 0.866795166666667

00:28:40.440 --> 00:28:41.715
which is important because there's

NOTE Confidence: 0.866795166666667

00:28:41.715 --> 00:28:43.601
no real way to debug through this

NOTE Confidence: 0.866795166666667

00:28:43.601 --> 00:28:46.240
stuff when it's variable templates.

NOTE Confidence: 0.866795166666667

00:28:46.240 --> 00:28:47.940
OK, Next up, uh,

NOTE Confidence: 0.866795166666667

00:28:47.940 --> 00:28:50.065
we had included a performance

NOTE Confidence: 0.866795166666667

00:28:50.065 --> 00:28:52.488
note in the old code saying,

NOTE Confidence: 0.866795166666667

00:28:52.490 --> 00:28:53.528
hey, if you're trying to compare

NOTE Confidence: 0.866795166666667

00:28:53.528 --> 00:28:54.420
like in Star devoid star,

NOTE Confidence: 0.866795166666667

00:28:54.420 --> 00:28:55.250
we're just not going to

NOTE Confidence: 0.866795166666667

00:28:55.250 --> 00:28:55.914
bother to handle that.

NOTE Confidence: 0.866795166666667

00:28:55.920 --> 00:28:56.900
That is now being handled

NOTE Confidence: 0.866795166666667

00:28:56.900 --> 00:28:57.880
by the new pointer address.

NOTE Confidence: 0.866795166666667

00:28:57.880 --> 00:28:59.945
Comparable stuff so that comments going away,

NOTE Confidence: 0.866795166666667

00:28:59.950 --> 00:29:02.758
so that's great.

NOTE Confidence: 0.866795166666667

00:29:02.760 --> 00:29:04.400
So here this is.

NOTE Confidence: 0.866795166666667

00:29:04.400 --> 00:29:06.860
After the case of we can

NOTE Confidence: 0.866795166666667

00:29:06.966 --> 00:29:09.670
handle same size integrals,

NOTE Confidence: 0.866795166666667

00:29:09.670 --> 00:29:11.125
uhm, which handles the usual

NOTE Confidence: 0.866795166666667

00:29:11.125 --> 00:29:11.707
arithmetic conversions.

NOTE Confidence: 0.866795166666667

00:29:11.710 --> 00:29:13.460
We have various other special cases like

NOTE Confidence: 0.866795166666667

00:29:13.460 --> 00:29:15.168
this one which is previously added.

NOTE Confidence: 0.866795166666667

00:29:15.170 --> 00:29:17.234
We can compare stood bytes even

NOTE Confidence: 0.866795166666667

00:29:17.234 --> 00:29:19.030
though they're not integral here.

NOTE Confidence: 0.866795166666667

00:29:19.030 --> 00:29:21.970
If we have pointers to some underlying

NOTE Confidence: 0.866795166666667

00:29:21.970 --> 00:29:24.478
type one and type 2 elements.

NOTE Confidence: 0.866795166666667

00:29:24.480 --> 00:29:26.574
Used to say we can compare

NOTE Confidence: 0.866795166666667

00:29:26.574 --> 00:29:28.719
them only if they're the same,

NOTE Confidence: 0.866795166666667

00:29:28.720 --> 00:29:30.598
pointing to the same element type.

NOTE Confidence: 0.866795166666667

00:29:30.600 --> 00:29:33.292
UM, ignoring CV qualifiers.

NOTE Confidence: 0.866795166666667

00:29:33.292 --> 00:29:36.905
This says if you're comparing 2 ranges

NOTE Confidence: 0.866795166666667

00:29:36.905 --> 00:29:39.170
and the range elements themselves

NOTE Confidence: 0.866795166666667

00:29:39.246 --> 00:29:41.436
are in Star and constant star,

NOTE Confidence: 0.866795166666667

00:29:41.440 --> 00:29:43.020
then those are different types.

NOTE Confidence: 0.866795166666667

00:29:43.020 --> 00:29:43.932
But comparing them,

NOTE Confidence: 0.866795166666667

00:29:43.932 --> 00:29:46.060
we know that that comparing each pair

NOTE Confidence: 0.866795166666667

00:29:46.113 --> 00:29:48.073
of pointers is not going to adjust any

NOTE Confidence: 0.866795166666667

00:29:48.073 --> 00:29:50.220
bits in the pointers in the addresses,

NOTE Confidence: 0.866795166666667

00:29:50.220 --> 00:29:51.546
so we can just call them

NOTE Confidence: 0.866795166666667

00:29:51.546 --> 00:29:52.800
come on the whole thing.

NOTE Confidence: 0.866795166666667

00:29:52.800 --> 00:29:54.080
This optimization I think,

NOTE Confidence: 0.866795166666667

00:29:54.080 --> 00:29:56.000
actually goes back to the original.

NOTE Confidence: 0.866795166666667

00:29:56.000 --> 00:30:00.816
Implementation we had circa 2007 or so uh,

NOTE Confidence: 0.866795166666667

00:30:00.820 --> 00:30:03.417
when I I started working here and

NOTE Confidence: 0.866795166666667

00:30:03.417 --> 00:30:05.389
it's been extended since then,

NOTE Confidence: 0.866795166666667

00:30:05.390 --> 00:30:07.622
so that routines that behavior and

NOTE Confidence: 0.866795166666667

00:30:07.622 --> 00:30:10.084
then additionally extends it to oh if

NOTE Confidence: 0.866795166666667

00:30:10.084 --> 00:30:11.896
you're comparing in Star to voidstar,

NOTE Confidence: 0.866795166666667

00:30:11.900 --> 00:30:13.754
we know that is not going to do any

NOTE Confidence: 0.866795166666667

00:30:13.754 --> 00:30:15.510
sort of weird address conversions.

NOTE Confidence: 0.866795166666667

00:30:15.510 --> 00:30:18.078
And that's now all centralized in

NOTE Confidence: 0.866795166666667

00:30:18.078 --> 00:30:19.790
is pointer address comparable,

NOTE Confidence: 0.866795166666667

00:30:19.790 --> 00:30:24.360
so that's good like that. Umm?

NOTE Confidence: 0.866795166666667

00:30:24.360 --> 00:30:28.836
OK. Now this is being refactored.

NOTE Confidence: 0.866795166666667

00:30:28.840 --> 00:30:31.132
There used to be pretty is

NOTE Confidence: 0.866795166666667

00:30:31.132 --> 00:30:32.584
consistent with Mencom PUM.

NOTE Confidence: 0.866795166666667

00:30:32.584 --> 00:30:34.408
This is now called can meme

NOTE Confidence: 0.866795166666667

00:30:34.408 --> 00:30:35.680
comp elements with PRED.

NOTE Confidence: 0.866795166666667

00:30:35.680 --> 00:30:38.206
So let's read the new explanation.

NOTE Confidence: 0.866795166666667

00:30:38.210 --> 00:30:43.370
San memo comp elements with Pred LM1LM2 PR.

NOTE Confidence: 0.866795166666667

00:30:43.370 --> 00:30:46.170
Making sure that it matches the names.

NOTE Confidence: 0.866795166666667

00:30:46.170 --> 00:30:48.510
Reports whether the MEM comp

NOTE Confidence: 0.866795166666667

00:30:48.510 --> 00:30:50.382
optimization is applicable given

NOTE Confidence: 0.866795166666667

00:30:50.382 --> 00:30:51.929
contiguously stored elements.

NOTE Confidence: 0.866795166666667

00:30:51.930 --> 00:30:54.130
This avoids having to repeat

NOTE Confidence: 0.866795166666667

00:30:54.130 --> 00:30:55.890
the metaprogramming that finds

NOTE Confidence: 0.866795166666667

00:30:55.890 --> 00:30:57.652
the element types OK.

NOTE Confidence: 0.866795166666667

00:30:57.652 --> 00:31:00.388
L1 and L2 aren't top level concept here.

NOTE Confidence: 0.866795166666667

00:31:00.390 --> 00:31:00.659
OK,

NOTE Confidence: 0.866795166666667

00:31:00.659 --> 00:31:02.811
so this is talk about how we've already

NOTE Confidence: 0.866795166666667

00:31:02.811 --> 00:31:04.529
handled the top of consonants and

NOTE Confidence: 0.866795166666667

00:31:04.529 --> 00:31:06.300
this replaces the old stuff about.

NOTE Confidence: 0.866795166666667

00:31:06.300 --> 00:31:09.588
Think about just whether the predicate

NOTE Confidence: 0.866795166666667

00:31:09.588 --> 00:31:11.055
invocation. Is transparent, uh?

NOTE Confidence: 0.866795166666667

00:31:11.055 --> 00:31:13.190
And this was always kind of weird,

NOTE Confidence: 0.866795166666667

00:31:13.190 --> 00:31:17.390
so I'm glad to see that going away, UM.

NOTE Confidence: 0.866795166666667

00:31:17.390 --> 00:31:20.490
OK, so this is handling.

NOTE Confidence: 0.866795166666667

00:31:20.490 --> 00:31:22.278
Equal to OK so.

NOTE Confidence: 0.653631134

00:31:24.900 --> 00:31:28.100
With equal to Elm 3.

NOTE Confidence: 0.653631134

00:31:28.100 --> 00:31:30.592
Yeah, that's the name we need to

NOTE Confidence: 0.653631134

00:31:30.592 --> 00:31:33.432
make sure that both LM1 and LM2

NOTE Confidence: 0.653631134

00:31:33.432 --> 00:31:35.552
are convertible to LM3 without

NOTE Confidence: 0.653631134

00:31:35.552 --> 00:31:37.720
changing object representation.

NOTE Confidence: 0.653631134

00:31:37.720 --> 00:31:41.458
We use ITER copycat for this task.

NOTE Confidence: 0.653631134

00:31:41.460 --> 00:31:44.250
And Ellen, three can be safely

NOTE Confidence: 0.653631134

00:31:44.250 --> 00:31:46.110
memco comped with itself.

NOTE Confidence: 0.759916125555556

00:31:49.040 --> 00:31:50.352
OK, that makes sense

NOTE Confidence: 0.759916125555556

00:31:50.352 --> 00:31:51.992
because we we're on input.

NOTE Confidence: 0.759916125555556

00:31:52.000 --> 00:31:55.480
We're converting L1 and L2 each to LM3.

NOTE Confidence: 0.759916125555556

00:31:55.480 --> 00:31:57.790
So that needs to not change object

NOTE Confidence: 0.759916125555556

00:31:57.790 --> 00:31:59.403
representation and then within equal

NOTE Confidence: 0.759916125555556

00:31:59.403 --> 00:32:01.635
2 UM that comparison we need to see.

NOTE Confidence: 0.759916125555556

00:32:01.640 --> 00:32:05.454
Hey, can we use them for that so template

NOTE Confidence: 0.759916125555556

00:32:05.454 --> 00:32:09.960
on class under score L1L2L3 in line?

NOTE Confidence: 0.759916125555556

00:32:09.960 --> 00:32:15.648
Complements, with PRED for 1/2 and.

NOTE Confidence: 0.759916125555556

00:32:15.650 --> 00:32:17.768
If the predicate type happens to

NOTE Confidence: 0.759916125555556

00:32:17.768 --> 00:32:19.929
be exactly equal to element 3.

NOTE Confidence: 0.789690736

00:32:23.260 --> 00:32:24.839
And I was just thinking, oh,

NOTE Confidence: 0.789690736

00:32:24.839 --> 00:32:26.033
but what if Ellen three is

NOTE Confidence: 0.789690736

00:32:26.033 --> 00:32:27.600
void and we've got, UM, uh,

NOTE Confidence: 0.789690736

00:32:27.600 --> 00:32:29.260
specialization down here, handling that.

NOTE Confidence: 0.789690736

00:32:29.260 --> 00:32:30.910
So here we know LM3 typhoid.

NOTE Confidence: 0.920473774

00:32:32.950 --> 00:32:35.520
So we're going to answer.

NOTE Confidence: 0.920473774

00:32:35.520 --> 00:32:36.716
Or ask three questions.

NOTE Confidence: 0.920473774

00:32:36.716 --> 00:32:39.741
It looks ugly because it cling format, Umm?

NOTE Confidence: 0.920473774

00:32:39.741 --> 00:32:44.427
First we ask the bitter copycat.

NOTE Confidence: 0.920473774

00:32:44.430 --> 00:32:47.294
Umm, if we were going to copy from

NOTE Confidence: 0.920473774

00:32:47.294 --> 00:32:49.622
Ellen one star to Elm, three star,

NOTE Confidence: 0.920473774

00:32:49.622 --> 00:32:50.726
we're just forming pointers.

NOTE Confidence: 0.920473774

00:32:50.730 --> 00:32:53.346
Even though we're forming imaginary pointers,

NOTE Confidence: 0.920473774

00:32:53.350 --> 00:32:55.688
these aren't actually being passed to us.

NOTE Confidence: 0.920473774

00:32:55.690 --> 00:32:58.790
If that is trivially constructible. Umm?

NOTE Confidence: 0.766362056666667

00:33:00.820 --> 00:33:03.450
That says without changing object

NOTE Confidence: 0.766362056666667

00:33:03.450 --> 00:33:05.104
representation, I don't know if

NOTE Confidence: 0.766362056666667

00:33:05.104 --> 00:33:06.790
I believe this because we also

NOTE Confidence: 0.766362056666667

00:33:06.855 --> 00:33:08.689
want them to be the same size.

NOTE Confidence: 0.782667567272727

00:33:11.080 --> 00:33:13.384
I need to go look this up because

NOTE Confidence: 0.782667567272727

00:33:13.384 --> 00:33:15.472
something like UM, say unsigned,

NOTE Confidence: 0.782667567272727

00:33:15.472 --> 00:33:18.016
care to unsigned short.

NOTE Confidence: 0.782667567272727

00:33:18.020 --> 00:33:19.904
That's not that's trivial as far

NOTE Confidence: 0.782667567272727

00:33:19.904 --> 00:33:21.840
as the standard is concerned,

NOTE Confidence: 0.782667567272727

00:33:21.840 --> 00:33:24.324
but it's going to widen the

NOTE Confidence: 0.782667567272727

00:33:24.324 --> 00:33:26.861
elements by by inserting you know

NOTE Confidence: 0.782667567272727

00:33:26.861 --> 00:33:28.620
extra zeros so we can't like them.

NOTE Confidence: 0.782667567272727

00:33:28.620 --> 00:33:30.412
Comp them in place.

NOTE Confidence: 0.782667567272727

00:33:30.412 --> 00:33:32.654
OK, so we're gonna check that then

NOTE Confidence: 0.782667567272727

00:33:32.654 --> 00:33:34.460
asked the same question for Ellen.

NOTE Confidence: 0.782667567272727

00:33:34.460 --> 00:33:35.740
Two star to Ellen,

NOTE Confidence: 0.782667567272727

00:33:35.740 --> 00:33:37.020
three star trivially constructable.

NOTE Confidence: 0.782667567272727

00:33:37.020 --> 00:33:40.736
And can we come elements?

NOTE Confidence: 0.782667567272727

00:33:40.736 --> 00:33:42.856
Elm three to Elm three.

NOTE Confidence: 0.782667567272727

00:33:42.860 --> 00:33:46.400
This ignores top level CV.

NOTE Confidence: 0.782667567272727

00:33:46.400 --> 00:33:48.590
OK.

NOTE Confidence: 0.782667567272727

00:33:48.590 --> 00:33:49.854
It's interesting that it's

NOTE Confidence: 0.782667567272727

00:33:49.854 --> 00:33:51.118
on top level volatility.

NOTE Confidence: 0.66958976

00:33:53.170 --> 00:33:53.550
OK.

NOTE Confidence: 0.797839252875

00:33:57.450 --> 00:33:58.782
OK, I was going to check

NOTE Confidence: 0.797839252875

00:33:58.782 --> 00:33:59.226
trivially constructable.

NOTE Confidence: 0.797839252875

00:33:59.230 --> 00:34:00.730
So that's in the inter copycat.

NOTE Confidence: 0.797839252875

00:34:00.730 --> 00:34:02.065
We're online 4564.

NOTE Confidence: 0.797839252875

00:34:02.065 --> 00:34:04.735
See if we can find that

NOTE Confidence: 0.797839252875

00:34:04.735 --> 00:34:06.470
trivially constructible.

NOTE Confidence: 0.671217881538461

00:34:08.760 --> 00:34:11.287
OK, this asks are your pointer address

NOTE Confidence: 0.671217881538461

00:34:11.287 --> 00:34:13.929
convertible and are you truly constructible?

NOTE Confidence: 0.671217881538461

00:34:13.930 --> 00:34:16.414
V This is the bit from the core language.

NOTE Confidence: 0.671217881538461

00:34:16.420 --> 00:34:18.289
Is this the thing that's going to

NOTE Confidence: 0.671217881538461

00:34:18.289 --> 00:34:20.079
require them to be the same size?

NOTE Confidence: 0.671217881538461

00:34:20.080 --> 00:34:22.754
I'm a little nervous that we are

NOTE Confidence: 0.671217881538461

00:34:22.754 --> 00:34:24.939
sort of introducing new concepts,

NOTE Confidence: 0.671217881538461

00:34:24.940 --> 00:34:28.180
cargo, same concepts, new ideas.

NOTE Confidence: 0.671217881538461

00:34:28.180 --> 00:34:31.609
That do not map to the standard type traits.

NOTE Confidence: 0.671217881538461

00:34:31.610 --> 00:34:33.250
When I see trivially constructable,

NOTE Confidence: 0.671217881538461

00:34:33.250 --> 00:34:35.464
I'm generally assuming that we're referring

NOTE Confidence: 0.671217881538461

00:34:35.464 --> 00:34:38.600
to like stood is trivially constructible V.

NOTE Confidence: 0.854587475833334

00:34:40.620 --> 00:34:44.252
It's it begins to be worrisome when we

NOTE Confidence: 0.854587475833334

00:34:44.252 --> 00:34:46.699
start introducing extra conventions,

NOTE Confidence: 0.854587475833334

00:34:46.700 --> 00:34:48.860
especially attached to existing terminology.

NOTE Confidence: 0.854587475833334

00:34:48.860 --> 00:34:50.164
We've that we've already

NOTE Confidence: 0.854587475833334

00:34:50.164 --> 00:34:51.794
had issues in the STL.

NOTE Confidence: 0.854587475833334

00:34:51.800 --> 00:34:53.336
They haven't really caused bugs yet,

NOTE Confidence: 0.854587475833334

00:34:53.340 --> 00:34:54.534
but we we just have to

NOTE Confidence: 0.854587475833334

00:34:54.534 --> 00:34:55.520
be real careful about it.

NOTE Confidence: 0.854587475833334

00:34:55.520 --> 00:34:58.516
Where we have type traits that are

NOTE Confidence: 0.854587475833334

00:34:58.520 --> 00:35:00.740
sensitive to things like top level

NOTE Confidence: 0.854587475833334

00:35:00.740 --> 00:35:02.720
CV qualifiers where the standard

NOTE Confidence: 0.854587475833334

00:35:02.720 --> 00:35:04.900
primary type categories are not,

NOTE Confidence: 0.854587475833334

00:35:04.900 --> 00:35:06.208
and we haven't really done a

NOTE Confidence: 0.854587475833334

00:35:06.208 --> 00:35:07.461
good rigorous job of documenting

NOTE Confidence: 0.854587475833334

00:35:07.461 --> 00:35:09.096
exactly which things care about.

NOTE Confidence: 0.854587475833334

00:35:09.100 --> 00:35:11.144
Top level CV and which you don't.

NOTE Confidence: 0.854587475833334

00:35:11.150 --> 00:35:13.235
Uhm, that that that's like

NOTE Confidence: 0.854587475833334

00:35:13.235 --> 00:35:14.903
one layer of issues.

NOTE Confidence: 0.854587475833334

00:35:14.910 --> 00:35:18.830
UM, that we've successfully handled so far.

NOTE Confidence: 0.854587475833334

00:35:18.830 --> 00:35:20.276
Maybe we'll need to do something

NOTE Confidence: 0.854587475833334

00:35:20.276 --> 00:35:21.630
about that in the future,

NOTE Confidence: 0.854587475833334

00:35:21.630 --> 00:35:23.694
but this is like one step

NOTE Confidence: 0.854587475833334

00:35:23.694 --> 00:35:24.726
beyond CV qualifiers.

NOTE Confidence: 0.854587475833334

00:35:24.730 --> 00:35:26.114
So let me let me check this pointer.

NOTE Confidence: 0.854587475833334

00:35:26.120 --> 00:35:27.041
I just convertible.

NOTE Confidence: 0.854587475833334

00:35:27.041 --> 00:35:29.190
I'm pretty sure this is the one

NOTE Confidence: 0.854587475833334

00:35:29.260 --> 00:35:30.950
that requires the same size.

NOTE Confidence: 0.854587475833334

00:35:30.950 --> 00:35:31.350
UM ohh.

NOTE Confidence: 0.854587475833334

00:35:31.350 --> 00:35:31.950
Here we go.

NOTE Confidence: 0.854587475833334

00:35:31.950 --> 00:35:33.295
Here's the Tripoli constructable that's

NOTE Confidence: 0.854587475833334

00:35:33.295 --> 00:35:35.150
saying same size and and compatible.

NOTE Confidence: 0.642081862727273

00:35:42.910 --> 00:35:45.208
This is trivial. Cat trivially constructible

NOTE Confidence: 0.642081862727273

00:35:45.208 --> 00:35:47.500
this pointer and just convertible.

NOTE Confidence: 0.692618828

00:35:58.920 --> 00:36:00.750
This is when you're just

NOTE Confidence: 0.692618828

00:36:00.750 --> 00:36:02.580
pointers to source and ask.

NOTE Confidence: 0.692618828

00:36:02.580 --> 00:36:05.499
If the if the things themselves are.

NOTE Confidence: 0.692618828

00:36:05.500 --> 00:36:06.372
Pointers, then we know.

NOTE Confidence: 0.692618828

00:36:06.372 --> 00:36:07.680
Of course they're the same size,

NOTE Confidence: 0.692618828

00:36:07.680 --> 00:36:09.865
but if they're not necessarily

NOTE Confidence: 0.692618828

00:36:09.865 --> 00:36:11.176
both pointers here,

NOTE Confidence: 0.692618828

00:36:11.180 --> 00:36:12.910
then that's will require them

NOTE Confidence: 0.692618828

00:36:12.910 --> 00:36:14.640
to be the same size.

NOTE Confidence: 0.692618828

00:36:14.640 --> 00:36:15.666
Yeah, this, uh,

NOTE Confidence: 0.692618828

00:36:15.666 --> 00:36:18.340
I'm I'm more nervous about this, UM.

NOTE Confidence: 0.819591736666667

00:36:21.500 --> 00:36:22.784
It doesn't mean that the usage

NOTE Confidence: 0.819591736666667

00:36:22.784 --> 00:36:24.202
below is fine, uh, which is why

NOTE Confidence: 0.819591736666667

00:36:24.202 --> 00:36:25.360
I was originally looking at this.

NOTE Confidence: 0.819591736666667

00:36:25.360 --> 00:36:26.998
We were on 4564 I think.

NOTE Confidence: 0.819591736666667

00:36:27.000 --> 00:36:28.170
Yeah, we were around here.

NOTE Confidence: 0.859303959166667

00:36:30.410 --> 00:36:31.994
It is nested. That's the thing

NOTE Confidence: 0.859303959166667

00:36:31.994 --> 00:36:33.430
that makes it kind of OK.

NOTE Confidence: 0.859303959166667

00:36:33.430 --> 00:36:36.058
It's nested within it or copycat.

NOTE Confidence: 0.923051027142857

00:36:40.240 --> 00:36:43.124
But now that I'm looking at this.

NOTE Confidence: 0.923051027142857

00:36:43.130 --> 00:36:44.255
The second time.

NOTE Confidence: 0.923051027142857

00:36:44.255 --> 00:36:45.380
I'm increasingly uncomfortable

NOTE Confidence: 0.923051027142857

00:36:45.380 --> 00:36:48.103
with the fact that we just see

NOTE Confidence: 0.923051027142857

00:36:48.103 --> 00:36:49.267
trivially constructible here,

NOTE Confidence: 0.923051027142857

00:36:49.270 --> 00:36:52.108
and it expands to something more

NOTE Confidence: 0.923051027142857

00:36:52.108 --> 00:36:54.762
precise and more restrictive than

NOTE Confidence: 0.923051027142857

00:36:54.762 --> 00:36:56.799
just trivial constructability.

NOTE Confidence: 0.799127366428571

00:36:59.810 --> 00:37:01.210
I'm going to add a comment about this

NOTE Confidence: 0.799127366428571

00:37:01.210 --> 00:37:02.550
because it's really common about naming.

NOTE Confidence: 0.799127366428571

00:37:02.550 --> 00:37:05.226
It could be addressed by introducing.

NOTE Confidence: 0.799127366428571

00:37:05.230 --> 00:37:08.086
Either different names or more clear names.

NOTE Confidence: 0.799127366428571

00:37:08.090 --> 00:37:12.050
UM, like one of the the sort of the

NOTE Confidence: 0.799127366428571

00:37:12.050 --> 00:37:14.462
only thing that makes this whole

NOTE Confidence: 0.799127366428571

00:37:14.462 --> 00:37:16.052
metaprogramming thing bearable, is that

NOTE Confidence: 0.799127366428571

00:37:16.052 --> 00:37:17.858
our names are generally pretty precise.

NOTE Confidence: 0.799127366428571

00:37:17.860 --> 00:37:22.470
When I see something like. Uh.

NOTE Confidence: 0.799127366428571

00:37:22.470 --> 00:37:24.528
Like you know, iterators are contiguous.

NOTE Confidence: 0.799127366428571

00:37:24.530 --> 00:37:26.241
As long as we've you know, carefully

NOTE Confidence: 0.799127366428571

00:37:26.241 --> 00:37:28.107
verified the definition of this thing,

NOTE Confidence: 0.799127366428571

00:37:28.110 --> 00:37:29.846
I don't need to worry too much about,

NOTE Confidence: 0.799127366428571

00:37:29.850 --> 00:37:32.545
UM, the actual usage because the titrate,

NOTE Confidence: 0.799127366428571

00:37:32.550 --> 00:37:34.146
you know, says what it does.

NOTE Confidence: 0.799127366428571

00:37:34.150 --> 00:37:36.220
But when something says trivially

NOTE Confidence: 0.799127366428571

00:37:36.220 --> 00:37:38.290
constructible and it's doing something

NOTE Confidence: 0.799127366428571

00:37:38.356 --> 00:37:40.426
different than it's an opportunity to

NOTE Confidence: 0.799127366428571

00:37:40.426 --> 00:37:42.457
get confused either in cases where

NOTE Confidence: 0.799127366428571

00:37:42.457 --> 00:37:44.508
we really do want the more general

NOTE Confidence: 0.799127366428571

00:37:44.508 --> 00:37:46.686
form given to us by the standard and

NOTE Confidence: 0.799127366428571

00:37:46.686 --> 00:37:48.197
we're using something for convenience

NOTE Confidence: 0.799127366428571

00:37:48.197 --> 00:37:50.165
that happens to be more restrictive,

NOTE Confidence: 0.799127366428571

00:37:50.170 --> 00:37:52.780
or vice versa, which I think is more likely.

NOTE Confidence: 0.799127366428571

00:37:52.780 --> 00:37:56.497
We want this more restrictive form that.

NOTE Confidence: 0.799127366428571

00:37:56.500 --> 00:37:58.775
Has tests like same size and compatible,

NOTE Confidence: 0.799127366428571

00:37:58.780 --> 00:38:00.898
but if we accidentally never go

NOTE Confidence: 0.799127366428571

00:38:00.898 --> 00:38:02.310
through this centralized machinery,

NOTE Confidence: 0.799127366428571

00:38:02.310 --> 00:38:04.025
uh, we start getting the wrong answer.

NOTE Confidence: 0.727603606666667

00:38:06.410 --> 00:38:08.666
And the usage would look like,

NOTE Confidence: 0.727603606666667

00:38:08.670 --> 00:38:10.722
uh, what if on, like 4564 if

NOTE Confidence: 0.727603606666667

00:38:10.722 --> 00:38:12.106
we accidentally didn't say,

NOTE Confidence: 0.727603606666667

00:38:12.110 --> 00:38:12.839
like inter copycat,

NOTE Confidence: 0.727603606666667

00:38:12.839 --> 00:38:14.297
trivially constructible if we just said

NOTE Confidence: 0.727603606666667

00:38:14.297 --> 00:38:15.690
like is trivially constructible V.

NOTE Confidence: 0.727603606666667

00:38:15.690 --> 00:38:16.660
That would be super bad.

NOTE Confidence: 0.801341361666667

00:38:19.710 --> 00:38:22.050
And it's the name, anything different?

NOTE Confidence: 0.801341361666667

00:38:22.050 --> 00:38:23.620
UM, that didn't mirror the

NOTE Confidence: 0.801341361666667

00:38:23.620 --> 00:38:24.876
standard wording so much.

NOTE Confidence: 0.801341361666667

00:38:24.880 --> 00:38:26.224
I wouldn't be nervous,

NOTE Confidence: 0.801341361666667

00:38:26.224 --> 00:38:28.650
because when I see some new name,

NOTE Confidence: 0.801341361666667

00:38:28.650 --> 00:38:30.594
either a new arrangement of words

NOTE Confidence: 0.801341361666667

00:38:30.594 --> 00:38:32.430
or ideally different words entirely,

NOTE Confidence: 0.801341361666667

00:38:32.430 --> 00:38:35.854
then I don't come to it with those

NOTE Confidence: 0.801341361666667

00:38:35.854 --> 00:38:37.250
assumptions from reading the standard,

NOTE Confidence: 0.801341361666667

00:38:37.250 --> 00:38:38.880
like when I see what was it,

NOTE Confidence: 0.801341361666667

00:38:38.880 --> 00:38:40.350
the same size and compatible?

NOTE Confidence: 0.801341361666667

00:38:40.350 --> 00:38:42.432
Yeah, this does not map to

NOTE Confidence: 0.801341361666667

00:38:42.432 --> 00:38:44.170
anything existing in the STL,

NOTE Confidence: 0.801341361666667

00:38:44.170 --> 00:38:46.529
so if I see this a it tells me what it does,

NOTE Confidence: 0.801341361666667

00:38:46.530 --> 00:38:47.979
but BI know I need to look

NOTE Confidence: 0.801341361666667

00:38:47.979 --> 00:38:49.069
up the definition to check.

NOTE Confidence: 0.801341361666667

00:38:49.070 --> 00:38:49.960
OK, what does it mean?

NOTE Confidence: 0.801341361666667

00:38:49.960 --> 00:38:52.662
Compatible UM is that fact that trivially

NOTE Confidence: 0.801341361666667

00:38:52.662 --> 00:38:54.790
constructable is using the same words,

NOTE Confidence: 0.801341361666667

00:38:54.790 --> 00:38:56.746
but then is adding extra things.

NOTE Confidence: 0.801341361666667

00:38:56.750 --> 00:38:58.374
I don't know if I necessarily want you

NOTE Confidence: 0.801341361666667

00:38:58.374 --> 00:38:59.889
know like same size and compatible,

NOTE Confidence: 0.801341361666667

00:38:59.890 --> 00:39:03.630
trivially constructible or something, but.

NOTE Confidence: 0.801341361666667

00:39:03.630 --> 00:39:05.430
This I think I'm I'm concerned

NOTE Confidence: 0.801341361666667

00:39:05.430 --> 00:39:07.609
about it so I'm gonna comment.

NOTE Confidence: 0.801341361666667

00:39:07.610 --> 00:39:08.900
I think it's these three that

NOTE Confidence: 0.801341361666667

00:39:08.900 --> 00:39:09.760
I care about now.

NOTE Confidence: 0.786427577944445

00:39:11.900 --> 00:39:13.889
Yeah, I don't wanna. I don't wanna get that.

NOTE Confidence: 0.859967515

00:39:16.730 --> 00:39:18.026
I, I guess it gives me no choice.

NOTE Confidence: 0.859967515

00:39:18.030 --> 00:39:20.470
Uh, because this is what I would get in line.

NOTE Confidence: 0.859967515

00:39:20.470 --> 00:39:23.323
UM, I'll just comment on this one line and

NOTE Confidence: 0.859967515

00:39:23.323 --> 00:39:26.440
I'll say that all of them are affected, OK?

NOTE Confidence: 0.247088733

00:39:30.430 --> 00:39:32.100
After UM.

NOTE Confidence: 0.6980394

00:39:34.200 --> 00:39:34.980
Reading.

NOTE Confidence: 0.72823435

00:39:38.660 --> 00:39:44.830
Usage of these. I wish I call him Constance.

NOTE Confidence: 0.814224006363636

00:39:48.440 --> 00:39:51.602
Let's just say after reading I'm

NOTE Confidence: 0.814224006363636

00:39:51.602 --> 00:39:54.990
usage far below these definitions.

NOTE Confidence: 0.814224006363636

00:39:54.990 --> 00:40:00.330
I'm increasingly uncomfortable, UM with,

NOTE Confidence: 0.814224006363636

00:40:00.330 --> 00:40:03.030
and let's be explicit about exactly

NOTE Confidence: 0.814224006363636

00:40:03.030 --> 00:40:05.880
which ones trivially constructable.

NOTE Confidence: 0.003667295

00:40:08.970 --> 00:40:10.190
Enable.

NOTE Confidence: 0.01252234

00:40:16.470 --> 00:40:17.350
And.

NOTE Confidence: 0.584530511666667

00:40:19.560 --> 00:40:21.975
The Constructable and

NOTE Confidence: 0.584530511666667

00:40:21.975 --> 00:40:25.250
Signable I'm using. Umm?

NOTE Confidence: 0.727802925666667

00:40:27.650 --> 00:40:33.170
Landerd terminology words as seen in.

NOTE Confidence: 0.354055116666667

00:40:35.710 --> 00:40:37.900
Historically constructible, etcetera.

NOTE Confidence: 0.80809318

00:40:40.090 --> 00:40:44.078
But adding additional conditions.

NOTE Confidence: 0.5490355

00:40:47.360 --> 00:40:51.328
Specifically. Same size and compatible.

NOTE Confidence: 0.15540436

00:40:56.920 --> 00:41:02.970
In all of these layers of

NOTE Confidence: 0.15540436

00:41:02.970 --> 00:41:04.678
complicated metaprogramming.

NOTE Confidence: 0.15540436

00:41:04.680 --> 00:41:06.681
I'm clear naming.

NOTE Confidence: 0.15540436

00:41:06.681 --> 00:41:10.526
Is the only thing. Uhm?

NOTE Confidence: 0.15540436

00:41:10.526 --> 00:41:16.080
Preventing massive UM confusion UM.

NOTE Confidence: 0.761222732

00:41:19.930 --> 00:41:24.220
I believe we should choose.

NOTE Confidence: 0.761222732

00:41:24.220 --> 00:41:28.960
Different names UM for these?

NOTE Confidence: 0.761222732

00:41:28.960 --> 00:41:35.668
Properties. So we. To avoid.

NOTE Confidence: 0.761222732

00:41:35.670 --> 00:41:40.002
Any confusion, conversion

NOTE Confidence: 0.761222732

00:41:40.002 --> 00:41:44.430
confusion, confusion between?

NOTE Confidence: 0.5798783985

00:41:48.650 --> 00:41:50.850
Is trivially constructible V.

NOTE Confidence: 0.433840612333333

00:41:54.490 --> 00:41:56.398
And trivially constructible.

NOTE Confidence: 0.709958384

00:42:00.430 --> 00:42:06.198
Eccetera and they don't need to be

NOTE Confidence: 0.709958384

00:42:06.198 --> 00:42:10.578
super duper verbose, for example, UM.

NOTE Confidence: 0.7506660425

00:42:14.930 --> 00:42:17.230
Make a. Sample here,

NOTE Confidence: 0.7506660425

00:42:17.230 --> 00:42:19.530
same size and compatible.

NOTE Confidence: 0.194221289

00:42:21.870 --> 00:42:24.678
And you and.

NOTE Confidence: 0.069335551

00:42:27.170 --> 00:42:30.490
Currently constructable.

NOTE Confidence: 0.069335551

00:42:30.490 --> 00:42:37.100
It's probably too verbose, uh, but.

NOTE Confidence: 0.069335551

00:42:37.100 --> 00:42:41.060
Introducing a different word.

NOTE Confidence: 0.069335551

00:42:41.060 --> 00:42:45.220
Somewhere, somehow could really help.

NOTE Confidence: 0.069335551

00:42:45.220 --> 00:42:46.628
No specific ideas yet.

NOTE Confidence: 0.839828164

00:42:50.290 --> 00:42:51.830
Uh, hopefully this makes sense.

NOTE Confidence: 0.839828164

00:42:51.830 --> 00:42:53.615
UM, after reading usage far

NOTE Confidence: 0.839828164

00:42:53.615 --> 00:42:54.686
below these definitions,

NOTE Confidence: 0.839828164

00:42:54.690 --> 00:42:55.824
I'm increasingly uncomfortable

NOTE Confidence: 0.839828164

00:42:55.824 --> 00:42:56.958
with triple instructable.

NOTE Confidence: 0.821563242307692

00:42:59.160 --> 00:43:01.320
Let me see, let me say the naming

NOTE Confidence: 0.821563242307692

00:43:01.320 --> 00:43:02.760
because the logic is fine.

NOTE Confidence: 0.821563242307692

00:43:02.760 --> 00:43:07.270
UM, the naming of using

NOTE Confidence: 0.821563242307692

00:43:07.270 --> 00:43:09.976
standard terminology words.

NOTE Confidence: 0.821563242307692

00:43:09.980 --> 00:43:11.989
I'm at the. I'll just note it,

NOTE Confidence: 0.821563242307692

00:43:11.990 --> 00:43:15.020
uh, let's note at the end, UM.

NOTE Confidence: 0.78083243

00:43:17.700 --> 00:43:19.932
The logic is fine.

NOTE Confidence: 0.78083243

00:43:19.932 --> 00:43:22.430
This is purely a naming concern.

NOTE Confidence: 0.646685837142857

00:43:27.460 --> 00:43:28.636
After eating usage far

NOTE Confidence: 0.646685837142857

00:43:28.636 --> 00:43:29.518
below these definitions,

NOTE Confidence: 0.646685837142857

00:43:29.520 --> 00:43:30.608
I'm increasingly uncomfortable with

NOTE Confidence: 0.646685837142857

00:43:30.608 --> 00:43:31.968
the naming of trivially constructable,

NOTE Confidence: 0.646685837142857

00:43:31.970 --> 00:43:33.594
trivially assignable and trivially

NOTE Confidence: 0.646685837142857

00:43:33.594 --> 00:43:35.218
constructible and assignable using

NOTE Confidence: 0.646685837142857

00:43:35.218 --> 00:43:36.793
standard terminology words as seen

NOTE Confidence: 0.646685837142857

00:43:36.793 --> 00:43:37.988
in is truly constructible BCC

NOTE Confidence: 0.646685837142857

00:43:37.988 --> 00:43:39.285
by adding additional conditions

NOTE Confidence: 0.646685837142857

00:43:39.285 --> 00:43:41.215
specifically same size and compatible,

NOTE Confidence: 0.646685837142857

00:43:41.220 --> 00:43:42.530
and all these layers are

NOTE Confidence: 0.646685837142857

00:43:42.530 --> 00:43:43.054
complicated metaprogramming.

NOTE Confidence: 0.646685837142857

00:43:43.060 --> 00:43:44.740
Clear naming is the only thing

NOTE Confidence: 0.646685837142857

00:43:44.740 --> 00:43:45.580
preventing massive confusion.

NOTE Confidence: 0.646685837142857

00:43:45.580 --> 00:43:47.098
I believe we should choose different

NOTE Confidence: 0.646685837142857

00:43:47.098 --> 00:43:48.616
names for these properties to avoid

NOTE Confidence: 0.646685837142857

00:43:48.616 --> 00:43:49.761
any confusion between instruct will

NOTE Confidence: 0.646685837142857

00:43:49.761 --> 00:43:51.380
be and truly constructive etcetera.

NOTE Confidence: 0.646685837142857

00:43:51.380 --> 00:43:52.964
They don't need to be super duper verbose,

NOTE Confidence: 0.646685837142857

00:43:52.970 --> 00:43:54.326
for example, same size.

NOTE Confidence: 0.646685837142857

00:43:54.326 --> 00:43:55.343
Compatible internally Constructable

NOTE Confidence: 0.646685837142857

00:43:55.343 --> 00:43:56.770
is probably too verbose,

NOTE Confidence: 0.646685837142857

00:43:56.770 --> 00:43:58.060
but introducing a different word

NOTE Confidence: 0.646685837142857

00:43:58.060 --> 00:43:59.350
somewhere somehow could really help.

NOTE Confidence: 0.646685837142857

00:43:59.350 --> 00:44:00.222
No specific ideas yet.

NOTE Confidence: 0.646685837142857

00:44:00.222 --> 00:44:01.094
The logic is fine,

NOTE Confidence: 0.646685837142857

00:44:01.100 --> 00:44:03.050
this is purely a naming concern.

NOTE Confidence: 0.646685837142857

00:44:03.050 --> 00:44:06.578
OK, but we've got the same size

NOTE Confidence: 0.646685837142857

00:44:06.578 --> 00:44:08.900
and compatible condition which

NOTE Confidence: 0.646685837142857

00:44:08.900 --> 00:44:11.060
excludes bull shenanigans.

NOTE Confidence: 0.646685837142857

00:44:11.060 --> 00:44:13.027
So we don't need to worry about

NOTE Confidence: 0.646685837142857

00:44:13.027 --> 00:44:14.799
unsigned care and unsigned short,

NOTE Confidence: 0.646685837142857

00:44:14.800 --> 00:44:17.240
UM, somehow activating them comp,

NOTE Confidence: 0.646685837142857

00:44:17.240 --> 00:44:19.540
which would be bad. Uh, OK.

NOTE Confidence: 0.646685837142857

00:44:19.540 --> 00:44:22.700
So let's resume 4564. OK, so this is good.

NOTE Confidence: 0.646685837142857

00:44:22.700 --> 00:44:27.720
This is generalized. Ah, OK.

NOTE Confidence: 0.646685837142857

00:44:27.720 --> 00:44:28.975
Now,

NOTE Confidence: 0.646685837142857

00:44:28.975 --> 00:44:30.230
UM.

NOTE Confidence: 0.646685837142857

00:44:30.230 --> 00:44:32.170
If our predicate happens to

NOTE Confidence: 0.646685837142857

00:44:32.170 --> 00:44:33.722
be equal to diamond,

NOTE Confidence: 0.646685837142857

00:44:33.730 --> 00:44:35.662
then we know we're just going

NOTE Confidence: 0.646685837142857

00:44:35.662 --> 00:44:36.996
to directly compare L1L2,

NOTE Confidence: 0.646685837142857

00:44:36.996 --> 00:44:39.924
so we can immediately ask in memp elements.

NOTE Confidence: 0.79934956

00:44:43.100 --> 00:44:45.210
This does not remove any CV's.

NOTE Confidence: 0.833918144

00:44:49.240 --> 00:44:50.380
Did we do that above?

NOTE Confidence: 0.50845575625

00:44:53.050 --> 00:44:55.978
Equal number compensate helper.

NOTE Confidence: 0.50845575625

00:44:55.980 --> 00:44:59.438
OK, this calls it with inner value

NOTE Confidence: 0.50845575625

00:44:59.440 --> 00:45:01.890
TUM and the iterator value type is

NOTE Confidence: 0.50845575625

00:45:01.890 --> 00:45:04.739
not going to have any CV qualifiers.

NOTE Confidence: 0.50845575625

00:45:04.740 --> 00:45:06.912
OK, so, uh, we don't need

NOTE Confidence: 0.50845575625

00:45:06.912 --> 00:45:08.850
to worry about that here.

NOTE Confidence: 0.792710016666667

00:45:11.620 --> 00:45:15.088
In fact, this is sort of. No, no the.

NOTE Confidence: 0.8036026625

00:45:17.830 --> 00:45:20.176
Somebody very strange could say equal

NOTE Confidence: 0.8036026625

00:45:20.176 --> 00:45:22.364
to constant, UM, so we're moving

NOTE Confidence: 0.8036026625

00:45:22.364 --> 00:45:25.940
CV on the LM 3 is good here. OK.

NOTE Confidence: 0.738604455

00:45:29.450 --> 00:45:32.460
OK, so no reason to worry about

NOTE Confidence: 0.738604455

00:45:32.460 --> 00:45:34.330
CV qualifiers there next range

NOTE Confidence: 0.738604455

00:45:34.330 --> 00:45:36.070
is equal to is also transparent,

NOTE Confidence: 0.738604455

00:45:36.070 --> 00:45:38.422
so if we're in concepts mode and

NOTE Confidence: 0.738604455

00:45:38.422 --> 00:45:40.240
our comparators range is equal to,

NOTE Confidence: 0.738604455

00:45:40.240 --> 00:45:43.990
then just can elements that's good.

NOTE Confidence: 0.738604455

00:45:43.990 --> 00:45:47.945
OK, finally equal mem comp is safe.

NOTE Confidence: 0.738604455

00:45:47.950 --> 00:45:49.408
Got a helper.

NOTE Confidence: 0.738604455

00:45:49.408 --> 00:45:51.838
That's being refactored a little,

NOTE Confidence: 0.738604455

00:45:51.840 --> 00:45:53.856
uh, it reports whether we can

NOTE Confidence: 0.738604455

00:45:53.856 --> 00:45:55.678
activate the memcor optimization for

NOTE Confidence: 0.738604455

00:45:55.678 --> 00:45:57.366
arbitrary iterators and predicates.

NOTE Confidence: 0.738604455

00:45:57.370 --> 00:45:59.098
It ignores couple of constants on

NOTE Confidence: 0.738604455

00:45:59.098 --> 00:46:01.000
the iterators and on the elements.

NOTE Confidence: 0.738604455

00:46:01.000 --> 00:46:03.424
So inline Varkens Expo bowl equal

NOTE Confidence: 0.738604455

00:46:03.424 --> 00:46:05.800
encompass save helper refers to

NOTE Confidence: 0.738604455

00:46:05.800 --> 00:46:08.700
answer are the iterators contiguous.

NOTE Confidence: 0.738604455

00:46:08.700 --> 00:46:10.488
They better be if we're going

NOTE Confidence: 0.738604455

00:46:10.488 --> 00:46:11.680
to call medcomp UM,

NOTE Confidence: 0.738604455

00:46:11.680 --> 00:46:13.733
they're one had better not be, uh,

NOTE Confidence: 0.738604455

00:46:13.733 --> 00:46:15.917
iterator to volatile, same for it or two.

NOTE Confidence: 0.738604455

00:46:15.920 --> 00:46:17.999
It should not be iterator to volatile,

NOTE Confidence: 0.738604455

00:46:18.000 --> 00:46:19.984
and we need to be able to member

NOTE Confidence: 0.738604455

00:46:19.984 --> 00:46:22.166
comp elements with PRED it or value

NOTE Confidence: 0.738604455

00:46:22.166 --> 00:46:24.840
item one item value T or two.

NOTE Confidence: 0.738604455

00:46:24.840 --> 00:46:27.540
And the predicates.

NOTE Confidence: 0.738604455

00:46:27.540 --> 00:46:27.810
OK.

NOTE Confidence: 0.749087518

00:46:32.320 --> 00:46:37.740
OK, onward to lexicographical compare UM.

NOTE Confidence: 0.749087518

00:46:37.740 --> 00:46:40.874
Here we're placing this logic UM,

NOTE Confidence: 0.749087518

00:46:40.874 --> 00:46:43.226
and I'm sort of skipping over the old

NOTE Confidence: 0.749087518

00:46:43.226 --> 00:46:45.836
logic because I'm pretty familiar with it.

NOTE Confidence: 0.749087518

00:46:45.840 --> 00:46:47.202
I I should be referring to

NOTE Confidence: 0.749087518

00:46:47.202 --> 00:46:48.773
it a little bit more, UM,

NOTE Confidence: 0.749087518

00:46:48.773 --> 00:46:51.437
but I'm I've reviewed this in the past.

NOTE Confidence: 0.749087518

00:46:51.440 --> 00:46:54.100
Umm, so when I I've seen the sync things here

NOTE Confidence: 0.749087518

00:46:54.168 --> 00:46:56.536
just sort of inherently jumps out to me.

NOTE Confidence: 0.749087518

00:46:56.540 --> 00:47:00.075
Template L1L2, inline varkas exportable

NOTE Confidence: 0.749087518

00:47:00.075 --> 00:47:03.610
lux compare mencom classify elements.

NOTE Confidence: 0.749087518

00:47:03.610 --> 00:47:08.706
OK, there was no preamble comment to this.

NOTE Confidence: 0.749087518

00:47:08.710 --> 00:47:10.021
It's probably fine.

NOTE Confidence: 0.749087518

00:47:10.021 --> 00:47:13.560
I think we come into it below. Do we?

NOTE Confidence: 0.819074581

00:47:16.230 --> 00:47:17.580
Yeah, we don't. We just go

NOTE Confidence: 0.819074581

00:47:17.580 --> 00:47:18.480
straight into Lux compare.

NOTE Confidence: 0.8351217075

00:47:24.720 --> 00:47:26.012
On the other hand,

NOTE Confidence: 0.8351217075

00:47:26.012 --> 00:47:27.304
that's sort of pre-existing.

NOTE Confidence: 0.8351217075

00:47:27.310 --> 00:47:30.406
Read comments on some of these.

NOTE Confidence: 0.8351217075

00:47:30.410 --> 00:47:31.322
Definitions OK, I'm not.

NOTE Confidence: 0.8351217075

00:47:31.322 --> 00:47:33.390
I'm not going to ask for comment there.

NOTE Confidence: 0.8351217075

00:47:33.390 --> 00:47:36.504
Maybe in the future we should add one UM

NOTE Confidence: 0.8351217075

00:47:36.504 --> 00:47:38.110
template L1L2 in one of our connection pool.

NOTE Confidence: 0.8351217075

00:47:38.110 --> 00:47:39.690
Let's compare mencom classify elements.

NOTE Confidence: 0.8351217075

00:47:39.690 --> 00:47:41.490
It's conjunction V all these

NOTE Confidence: 0.8351217075

00:47:41.490 --> 00:47:43.290
things need to be true.

NOTE Confidence: 0.8351217075

00:47:43.290 --> 00:47:44.121
Ellen Whitman because

NOTE Confidence: 0.8351217075

00:47:44.121 --> 00:47:45.229
we're gonna let's compare.

NOTE Confidence: 0.8351217075

00:47:45.230 --> 00:47:47.750
They need to be bite size.

NOTE Confidence: 0.8351217075

00:47:47.750 --> 00:47:50.158
UM, L1 needs to be a character Werble

NOTE Confidence: 0.8351217075

00:47:50.158 --> 00:47:52.169
LM2 needs to be character able.

NOTE Confidence: 0.8351217075

00:47:52.170 --> 00:47:53.910
LM one needs to be unsigned.

NOTE Confidence: 0.8351217075

00:47:53.910 --> 00:47:56.400
LM2 needs to be unsigned.

NOTE Confidence: 0.8351217075

00:47:56.400 --> 00:47:57.360
OK, and this actually does

NOTE Confidence: 0.8351217075

00:47:57.360 --> 00:47:58.670
map to what we had before,

NOTE Confidence: 0.8351217075

00:47:58.670 --> 00:47:59.960
except now it permits bool.

NOTE Confidence: 0.813418611818182

00:48:04.940 --> 00:48:05.960
Is that reasonable?

NOTE Confidence: 0.813418611818182

00:48:05.960 --> 00:48:08.720
Can you do bool less than unsigned care?

NOTE Confidence: 0.813418611818182

00:48:08.720 --> 00:48:11.120
Yes you can, because the bull will widen.

NOTE Confidence: 0.813418611818182

00:48:11.120 --> 00:48:12.760
I'm actually promoted all the way to end,

NOTE Confidence: 0.813418611818182

00:48:12.760 --> 00:48:15.098
but you can definitely less than that.

NOTE Confidence: 0.813418611818182

00:48:15.100 --> 00:48:17.236
Bool less than Bool that works.

NOTE Confidence: 0.813418611818182

00:48:17.240 --> 00:48:18.365
In fact. We recently saw

NOTE Confidence: 0.813418611818182

00:48:18.365 --> 00:48:19.780
usage of that with less than,

NOTE Confidence: 0.813418611818182

00:48:19.780 --> 00:48:22.488
equal or greater than equal.

NOTE Confidence: 0.56605295

00:48:25.590 --> 00:48:29.852
And enums. Those I think would

NOTE Confidence: 0.56605295

00:48:29.852 --> 00:48:32.150
not be reported by his character.

NOTE Confidence: 0.56605295

00:48:32.150 --> 00:48:34.940
Umm? Good question.

NOTE Confidence: 0.679309146

00:48:37.080 --> 00:48:38.590
What is his character able?

NOTE Confidence: 0.679309146

00:48:38.590 --> 00:48:41.610
That's, let's check that.

NOTE Confidence: 0.679309146

00:48:41.610 --> 00:48:42.898
I should have been

NOTE Confidence: 0.679309146

00:48:42.898 --> 00:48:45.870
reviewing this in PS code.

NOTE Confidence: 0.679309146

00:48:45.870 --> 00:48:48.906
Let's see, we get this search.

NOTE Confidence: 0.79787786

00:48:53.230 --> 00:48:54.390
OK, so this is elsewhere.

NOTE Confidence: 0.79787786

00:48:54.390 --> 00:48:59.464
Next utility 4329. Here we go.

NOTE Confidence: 0.79787786

00:48:59.464 --> 00:49:01.760
This reports true for bull of course.

NOTE Confidence: 0.79787786

00:49:01.760 --> 00:49:04.058
Umm, it reports true for care.

NOTE Confidence: 0.79787786

00:49:04.060 --> 00:49:06.720
Sign care, unsigned care and carry tease.

NOTE Confidence: 0.79787786

00:49:06.720 --> 00:49:09.240
It does not report true for anything else.

NOTE Confidence: 0.79787786

00:49:09.240 --> 00:49:10.332
And oh, here's an example of

NOTE Confidence: 0.79787786

00:49:10.332 --> 00:49:13.930
what I was talking about. It it.

NOTE Confidence: 0.79787786

00:49:13.930 --> 00:49:15.490
Does not strip top level.

NOTE Confidence: 0.79787786

00:49:15.490 --> 00:49:18.045
UM conquers it will report true only

NOTE Confidence: 0.79787786

00:49:18.045 --> 00:49:20.250
for exactly bull care sign care,

NOTE Confidence: 0.79787786

00:49:20.250 --> 00:49:22.740
unsync care or carry T.

NOTE Confidence: 0.79787786

00:49:22.740 --> 00:49:25.456
Because that's the interesting we do not.

NOTE Confidence: 0.79787786

00:49:25.460 --> 00:49:27.420
Check enums, ohh, but UM,

NOTE Confidence: 0.79787786

00:49:27.420 --> 00:49:29.245
enums are not less than

NOTE Confidence: 0.79787786

00:49:29.245 --> 00:49:31.070
comparable by default I think.

NOTE Confidence: 0.79787786

00:49:31.070 --> 00:49:33.016
Yeah, well, you know classes are not,

NOTE Confidence: 0.79787786

00:49:33.020 --> 00:49:36.204
uh, I think you know just get promoted.

NOTE Confidence: 0.79787786

00:49:36.210 --> 00:49:36.554
I don't.

NOTE Confidence: 0.79787786

00:49:36.554 --> 00:49:37.758
I don't know that you know rules

NOTE Confidence: 0.79787786

00:49:37.758 --> 00:49:39.129
well enough without looking them up.

NOTE Confidence: 0.79787786

00:49:39.130 --> 00:49:40.930
I don't use them that often.

NOTE Confidence: 0.79787786

00:49:40.930 --> 00:49:43.348
UM, it's certainly not a regression.

NOTE Confidence: 0.79787786

00:49:43.350 --> 00:49:45.555
We didn't try to handle enums before.

NOTE Confidence: 0.713023233333333

00:49:49.800 --> 00:49:51.792
Is unsigned, we'll report.

NOTE Confidence: 0.713023233333333

00:49:51.792 --> 00:49:53.214
Things correctly, at least.

NOTE Confidence: 0.713023233333333

00:49:53.214 --> 00:49:53.850
We're planning EMS.

NOTE Confidence: 0.713023233333333

00:49:53.850 --> 00:49:55.860
I believe it asks what if

NOTE Confidence: 0.713023233333333

00:49:55.860 --> 00:49:58.810
you had negative one? Umm?

NOTE Confidence: 0.713023233333333

00:49:58.810 --> 00:50:00.665
I know for enums you do need

NOTE Confidence: 0.713023233333333

00:50:00.665 --> 00:50:02.090
to provide bitmask operators.

NOTE Confidence: 0.713023233333333

00:50:02.090 --> 00:50:04.466
I think for enum classes you don't get.

NOTE Confidence: 0.713023233333333

00:50:04.470 --> 00:50:05.814
You don't get less than you

NOTE Confidence: 0.713023233333333

00:50:05.814 --> 00:50:06.890
actually need to provide it.

NOTE Confidence: 0.865269286

00:50:09.110 --> 00:50:10.787
I think this is fine. I'm not gonna

NOTE Confidence: 0.865269286

00:50:10.787 --> 00:50:12.740
worry too much about you know here.

NOTE Confidence: 0.865269286

00:50:12.740 --> 00:50:14.777
In theory we could extend the optimization,

NOTE Confidence: 0.865269286

00:50:14.780 --> 00:50:16.860
but we we need to know that the

NOTE Confidence: 0.865269286

00:50:16.860 --> 00:50:18.360
comparison operator is not overloaded.

NOTE Confidence: 0.865269286

00:50:18.360 --> 00:50:19.670
The nice thing about characters

NOTE Confidence: 0.865269286

00:50:19.670 --> 00:50:21.400
bools is they're not user defined,

NOTE Confidence: 0.865269286

00:50:21.400 --> 00:50:22.926
so there's no way there can be

NOTE Confidence: 0.865269286

00:50:22.926 --> 00:50:23.580
weird overloaded operators.

NOTE Confidence: 0.865269286

00:50:23.580 --> 00:50:25.235
I think that's probably what's

NOTE Confidence: 0.865269286

00:50:25.235 --> 00:50:27.200
preventing us from doing anything here.

NOTE Confidence: 0.865269286

00:50:27.200 --> 00:50:29.180
When we're copying, we know,

NOTE Confidence: 0.865269286

00:50:29.180 --> 00:50:30.550
hey, you've got an enum,

NOTE Confidence: 0.865269286

00:50:30.550 --> 00:50:32.092
there's no way you could overload

NOTE Confidence: 0.865269286

00:50:32.092 --> 00:50:33.120
a copy assignment operator,

NOTE Confidence: 0.865269286

00:50:33.120 --> 00:50:35.570
but for comparisons I think you could

NOTE Confidence: 0.865269286

00:50:35.570 --> 00:50:38.630
have a user defined operator less than.

NOTE Confidence: 0.865269286

00:50:38.630 --> 00:50:41.710
Uh, OK. So then if we're bites.

NOTE Confidence: 0.865269286

00:50:41.710 --> 00:50:44.284
OK, this is, uh, this is a conformance bug.

NOTE Confidence: 0.865269286

00:50:44.290 --> 00:50:48.860
Uh, no, sorry, it's not a it's CP lip bite.

NOTE Confidence: 0.865269286

00:50:48.860 --> 00:50:51.268
The classic gotcha that we have is saying

NOTE Confidence: 0.865269286

00:50:51.268 --> 00:50:53.168
template diamond inline bar is incorrect.

NOTE Confidence: 0.865269286

00:50:53.170 --> 00:50:54.934
If you're in C + 14 mode.

NOTE Confidence: 0.723719169230769

00:50:57.240 --> 00:50:59.646
Because you, uh, it's technically non

NOTE Confidence: 0.723719169230769

00:50:59.646 --> 00:51:01.713
conformant to explicitly specialize the

NOTE Confidence: 0.723719169230769

00:51:01.713 --> 00:51:03.966
variable template, UM, without inline.

NOTE Confidence: 0.723719169230769

00:51:03.966 --> 00:51:06.858
However, if you are in line,

NOTE Confidence: 0.723719169230769

00:51:06.860 --> 00:51:09.872
it's totally cool. This is OK,

NOTE Confidence: 0.723719169230769

00:51:09.872 --> 00:51:12.740
because CPP live bytes implies C + 17.

NOTE Confidence: 0.723719169230769

00:51:12.740 --> 00:51:14.350
Would that actually means is

NOTE Confidence: 0.723719169230769

00:51:14.350 --> 00:51:16.320
this should be playing in line?

NOTE Confidence: 0.723719169230769

00:51:16.320 --> 00:51:17.376
I should actually check.

NOTE Confidence: 0.723719169230769

00:51:17.376 --> 00:51:19.937
I think we do have cases where I think it.

NOTE Confidence: 0.723719169230769

00:51:19.940 --> 00:51:21.816
In fact it might be above where

NOTE Confidence: 0.723719169230769

00:51:21.816 --> 00:51:23.968
when we know we're simply live by.

NOTE Confidence: 0.723719169230769

00:51:23.970 --> 00:51:26.436
We just say in line directly.

NOTE Confidence: 0.723719169230769

00:51:26.440 --> 00:51:27.340
Yeah, here it is.

NOTE Confidence: 0.604112566917647

00:51:30.650 --> 00:51:31.914
But can bump yeah,

NOTE Confidence: 0.604112566917647

00:51:31.914 --> 00:51:33.810
here's the Preston can bump elements

NOTE Confidence: 0.604112566917647

00:51:33.870 --> 00:51:35.935
because it's a CS plus 14 available.

NOTE Confidence: 0.604112566917647

00:51:35.940 --> 00:51:38.980
Thing is inline var.

NOTE Confidence: 0.604112566917647

00:51:38.980 --> 00:51:41.260
When CPP Lib bite is defined,

NOTE Confidence: 0.604112566917647

00:51:41.260 --> 00:51:44.260
we are definitely in 17 or above mode.

NOTE Confidence: 0.604112566917647

00:51:44.260 --> 00:51:47.140
So we can say plain inline constexpr bool.

NOTE Confidence: 0.604112566917647

00:51:47.140 --> 00:51:49.308
We should follow the exact same pattern here.

NOTE Confidence: 0.889700688571429

00:51:56.550 --> 00:51:57.796
Let me just copy this whole thing.

NOTE Confidence: 0.851424032857143

00:51:59.900 --> 00:52:01.454
Actually I can. I can cite it.

NOTE Confidence: 0.851424032857143

00:52:01.460 --> 00:52:03.836
UM, four, no, that's right line.

NOTE Confidence: 0.851424032857143

00:52:03.840 --> 00:52:07.879
I left mine 4513 and actually utility.

NOTE Confidence: 0.851424032857143

00:52:07.880 --> 00:52:11.570
Let's get this. OK so STL.

NOTE Confidence: 0.851424032857143

00:52:11.570 --> 00:52:13.334
Think I should add a little search

NOTE Confidence: 0.851424032857143

00:52:13.334 --> 00:52:14.808
engine that lets me type something

NOTE Confidence: 0.851424032857143

00:52:14.808 --> 00:52:16.628
like UM ink and then I file name

NOTE Confidence: 0.851424032857143

00:52:16.628 --> 00:52:18.098
and it it will take me there.

NOTE Confidence: 0.851424032857143

00:52:18.100 --> 00:52:19.580
I should really do that.

NOTE Confidence: 0.851424032857143

00:52:19.580 --> 00:52:22.470
Uhm? Actually tility.

NOTE Confidence: 0.876364905

00:52:25.960 --> 00:52:27.250
Yeah, we just need to auto

NOTE Confidence: 0.876364905

00:52:27.250 --> 00:52:28.110
complete this part here.

NOTE Confidence: 0.861135733333333

00:52:30.370 --> 00:52:31.999
I said 4513.

NOTE Confidence: 0.5727626225

00:52:36.440 --> 00:52:40.520
Down, scroll up. Here it is.

NOTE Confidence: 0.5727626225

00:52:40.520 --> 00:52:42.940
OK, hit Y for permalink.

NOTE Confidence: 0.5727626225

00:52:42.940 --> 00:52:46.156
I want to ohh it's click and drag.

NOTE Confidence: 0.5727626225

00:52:46.160 --> 00:52:47.688
Nope no it's shift.

NOTE Confidence: 0.5727626225

00:52:47.688 --> 00:52:49.216
Click trying to reach.

NOTE Confidence: 0.5727626225

00:52:49.220 --> 00:52:50.620
Which UI we're looking at?

NOTE Confidence: 0.5727626225

00:52:50.620 --> 00:52:53.490
Excuse me, Umm yeah, OK,

NOTE Confidence: 0.5727626225

00:52:53.490 --> 00:52:55.170
this is what I want to quote.

NOTE Confidence: 0.5727626225

00:52:55.170 --> 00:52:57.402
It has to be permalink for the inline

NOTE Confidence: 0.5727626225

00:52:57.402 --> 00:52:59.189
snippet to show in the comment.

NOTE Confidence: 0.5727626225

00:52:59.190 --> 00:53:01.760
We don't need this anymore.

NOTE Confidence: 0.5727626225

00:53:01.760 --> 00:53:05.576
OK Umm this is nitpick level.

NOTE Confidence: 0.5727626225

00:53:05.580 --> 00:53:07.002
Now it's not needed for correctness

NOTE Confidence: 0.5727626225

00:53:07.002 --> 00:53:08.319
because it will expand in line,

NOTE Confidence: 0.5727626225

00:53:08.320 --> 00:53:10.612
but it does follow the existing

NOTE Confidence: 0.5727626225

00:53:10.612 --> 00:53:12.288
convention we were in the

NOTE Confidence: 0.5727626225

00:53:12.288 --> 00:53:14.220
CPP Lib Bite case for LUX.

NOTE Confidence: 0.5727626225

00:53:14.220 --> 00:53:16.580
Compare something or other.

NOTE Confidence: 0.676167312857143

00:53:19.430 --> 00:53:22.450
Yep, here it is. If Dev CPP, Lib bite.

NOTE Confidence: 0.864327279090909

00:53:24.520 --> 00:53:25.535
No, I don't want to come in

NOTE Confidence: 0.864327279090909

00:53:25.535 --> 00:53:26.768
and that whole thing, no.

NOTE Confidence: 0.864327279090909

00:53:26.768 --> 00:53:30.056
OK, maybe just sign and cooperate.

NOTE Confidence: 0.864327279090909

00:53:30.060 --> 00:53:30.968
OK here we go.

NOTE Confidence: 0.687610436666667

00:53:33.900 --> 00:53:40.859
Let me paste the thing OK. Copy this OK.

NOTE Confidence: 0.687610436666667

00:53:40.860 --> 00:53:45.660
As this is guarded by CP Lib Bite,

NOTE Confidence: 0.687610436666667

00:53:45.660 --> 00:53:50.700
we should say plain in line here, see.

NOTE Confidence: 0.9201391

00:53:55.310 --> 00:53:57.990
OK. If Dev Sipila byte as

NOTE Confidence: 0.9201391

00:53:57.990 --> 00:53:59.480
this is guarded by cpla byte,

NOTE Confidence: 0.9201391

00:53:59.480 --> 00:54:00.998
we should say plain inline here.

NOTE Confidence: 0.9201391

00:54:01.000 --> 00:54:03.508
See if the byte allow them

NOTE Confidence: 0.9201391

00:54:03.508 --> 00:54:05.630
competing and so forth, OK?

NOTE Confidence: 0.92920588

00:54:08.620 --> 00:54:11.020
OK, so if we're being asked

NOTE Confidence: 0.92920588

00:54:11.020 --> 00:54:12.951
to compare I versus bite,

NOTE Confidence: 0.92920588

00:54:12.951 --> 00:54:14.459
we will report true.

NOTE Confidence: 0.92920588

00:54:14.460 --> 00:54:15.366
OK, that's good.

NOTE Confidence: 0.92920588

00:54:15.366 --> 00:54:17.178
That's what we're doing before here,

NOTE Confidence: 0.92920588

00:54:17.180 --> 00:54:18.980
except we had to repeat

NOTE Confidence: 0.92920588

00:54:18.980 --> 00:54:21.060
bite three times. King

NOTE Confidence: 0.805305379230769

00:54:24.060 --> 00:54:25.668
and if we don't recognize the

NOTE Confidence: 0.805305379230769

00:54:25.668 --> 00:54:27.500
thing we report void for the PRAD,

NOTE Confidence: 0.805305379230769

00:54:27.500 --> 00:54:28.916
which is how we say, hey,

NOTE Confidence: 0.805305379230769

00:54:28.916 --> 00:54:31.380
you're not actually comparable.

NOTE Confidence: 0.805305379230769

00:54:31.380 --> 00:54:33.796
OK Ohh wow this looks kind of terrible.

NOTE Confidence: 0.805305379230769

00:54:33.800 --> 00:54:35.697
Uh, just because it's so severely wrapped.

NOTE Confidence: 0.805305379230769

00:54:35.700 --> 00:54:40.038
OK UM, so we are specializing.

NOTE Confidence: 0.805305379230769

00:54:40.040 --> 00:54:44.546
Let's compare mencom classified pred.

NOTE Confidence: 0.805305379230769

00:54:44.546 --> 00:54:46.086
This is the primary template.

NOTE Confidence: 0.805305379230769

00:54:46.090 --> 00:54:48.064
So if we don't recognize it, it's void.

NOTE Confidence: 0.805305379230769

00:54:48.064 --> 00:54:50.776
But if we are specifically LM

NOTE Confidence: 0.805305379230769

00:54:50.776 --> 00:54:53.795
one LM two and less of LM 3,

NOTE Confidence: 0.805305379230769

00:54:53.800 --> 00:54:55.650
then we might be eligible.

NOTE Confidence: 0.805305379230769

00:54:55.650 --> 00:54:58.710
So we're going to ask if.

NOTE Confidence: 0.805305379230769

00:54:58.710 --> 00:55:01.150
I'm comparing LM three

NOTE Confidence: 0.805305379230769

00:55:01.150 --> 00:55:02.912
things could be done with.

NOTE Confidence: 0.805305379230769

00:55:02.912 --> 00:55:04.640
Let's compare because that's the comparison.

NOTE Confidence: 0.805305379230769

00:55:04.640 --> 00:55:06.180
It's actually going to happen.

NOTE Confidence: 0.805305379230769

00:55:06.180 --> 00:55:07.881
Then we need to make sure that

NOTE Confidence: 0.805305379230769

00:55:07.881 --> 00:55:10.152
going from one to three and two to

NOTE Confidence: 0.805305379230769

00:55:10.152 --> 00:55:11.637
three doesn't do weird conversions.

NOTE Confidence: 0.805305379230769

00:55:11.640 --> 00:55:13.960
So this uses the type trace we just

NOTE Confidence: 0.805305379230769

00:55:13.960 --> 00:55:16.241
ask about the naming inter copycat from

NOTE Confidence: 0.805305379230769

00:55:16.241 --> 00:55:18.800
an imaginary LM one star to an LM,

NOTE Confidence: 0.805305379230769

00:55:18.800 --> 00:55:20.680
three star if that's trivial,

NOTE Confidence: 0.805305379230769

00:55:20.680 --> 00:55:22.680
meaning same size and compatible,

NOTE Confidence: 0.805305379230769

00:55:22.680 --> 00:55:23.901
and it's trivial.

NOTE Confidence: 0.805305379230769

00:55:23.901 --> 00:55:26.343
Then you're not gonna mess with

NOTE Confidence: 0.805305379230769

00:55:26.343 --> 00:55:28.827
the bit representation at all.

NOTE Confidence: 0.805305379230769

00:55:28.830 --> 00:55:32.102
And Lessing them is good and we

NOTE Confidence: 0.805305379230769

00:55:32.102 --> 00:55:33.998
don't need to worry about usual

NOTE Confidence: 0.805305379230769

00:55:33.998 --> 00:55:34.987
arithmetic conversions because

NOTE Confidence: 0.805305379230769

00:55:34.987 --> 00:55:36.805
they're both being coerced to L3,

NOTE Confidence: 0.805305379230769

00:55:36.810 --> 00:55:38.427
so we don't need to worry about

NOTE Confidence: 0.805305379230769

00:55:38.427 --> 00:55:41.020
like an LM1 being wide or something

NOTE Confidence: 0.805305379230769

00:55:41.020 --> 00:55:44.213
and overpowering LM 3 L M3 is

NOTE Confidence: 0.805305379230769

00:55:44.213 --> 00:55:45.668
always the destination,

NOTE Confidence: 0.805305379230769

00:55:45.670 --> 00:55:48.118
and similarly LM two to three

NOTE Confidence: 0.805305379230769

00:55:48.118 --> 00:55:49.750
to the constructible OK,

NOTE Confidence: 0.805305379230769

00:55:49.750 --> 00:55:51.346
then return less into this is as

NOTE Confidence: 0.805305379230769

00:55:51.346 --> 00:55:53.140
we saw last time we'll be used

NOTE Confidence: 0.805305379230769

00:55:53.140 --> 00:55:54.724
to compare the output of mencom,

NOTE Confidence: 0.805305379230769

00:55:54.730 --> 00:55:57.411
so we're always needs to be int

NOTE Confidence: 0.805305379230769

00:55:57.411 --> 00:55:59.000
otherwise just return void.

NOTE Confidence: 0.805305379230769

00:55:59.000 --> 00:56:01.030
OK, good.

NOTE Confidence: 0.805305379230769

00:56:01.030 --> 00:56:03.610
Let's diamond is transparent, UM,

NOTE Confidence: 0.805305379230769

00:56:03.610 --> 00:56:06.193
so you can or we can immediately

NOTE Confidence: 0.805305379230769

00:56:06.193 --> 00:56:08.210
skip any concern about that.

NOTE Confidence: 0.805305379230769

00:56:08.210 --> 00:56:10.842
We just directly ask, hey is LM1LM2?

NOTE Confidence: 0.805305379230769

00:56:10.842 --> 00:56:12.890
Are they like comparable?

NOTE Confidence: 0.805305379230769

00:56:12.890 --> 00:56:17.048
If so, return lessons, otherwise would OK.

NOTE Confidence: 0.805305379230769

00:56:17.050 --> 00:56:19.468
Greater needs to reverse the sense,

NOTE Confidence: 0.805305379230769

00:56:19.470 --> 00:56:21.262
UM, so same pattern.

NOTE Confidence: 0.805305379230769

00:56:21.262 --> 00:56:23.054
Gotta be careful for,

NOTE Confidence: 0.805305379230769

00:56:23.060 --> 00:56:25.110
uh, copy paste those, uh,

NOTE Confidence: 0.805305379230769

00:56:25.110 --> 00:56:27.906
we would compare 3 versus 3.

NOTE Confidence: 0.805305379230769

00:56:27.910 --> 00:56:30.276
Here are the fact that the comparison

NOTE Confidence: 0.805305379230769

00:56:30.276 --> 00:56:31.750
senses reverse doesn't matter.

NOTE Confidence: 0.805305379230769

00:56:31.750 --> 00:56:33.388
It's going to be comparable from McComb.

NOTE Confidence: 0.805305379230769

00:56:33.390 --> 00:56:34.098
Either way,

NOTE Confidence: 0.805305379230769

00:56:34.098 --> 00:56:36.222
the reversion of the reverse Ness

NOTE Confidence: 0.805305379230769

00:56:36.222 --> 00:56:38.274
happens here and then go from one

NOTE Confidence: 0.805305379230769

00:56:38.274 --> 00:56:40.170
to three and from two to three.

NOTE Confidence: 0.805305379230769

00:56:40.170 --> 00:56:42.768
They both say pointers. That's good.

NOTE Confidence: 0.805305379230769

00:56:42.770 --> 00:56:44.330
OK great,

NOTE Confidence: 0.805305379230769

00:56:44.330 --> 00:56:48.230
greater diamond is also transparent.

NOTE Confidence: 0.805305379230769

00:56:48.230 --> 00:56:48.674
Uh,

NOTE Confidence: 0.805305379230769

00:56:48.674 --> 00:56:52.670
so this good one and two greater infoid OK?

NOTE Confidence: 0.70433149

00:56:57.470 --> 00:57:00.782
Uh, so for ranges guarded by if Dev concepts.

NOTE Confidence: 0.70433149

00:57:00.790 --> 00:57:02.942
If we see ranges less we know it's

NOTE Confidence: 0.70433149

00:57:02.942 --> 00:57:04.968
transparent so we can do this short form.

NOTE Confidence: 0.70433149

00:57:04.970 --> 00:57:06.580
I was just thinking should we just

NOTE Confidence: 0.70433149

00:57:06.580 --> 00:57:08.349
try from the other specialization,

NOTE Confidence: 0.70433149

00:57:08.350 --> 00:57:10.149
but that would really be the same.

NOTE Confidence: 0.70433149

00:57:10.150 --> 00:57:10.970
Would be one line,

NOTE Confidence: 0.70433149

00:57:10.970 --> 00:57:12.541
one extra line of code and it

NOTE Confidence: 0.70433149

00:57:12.541 --> 00:57:13.709
would instantiate more stuff.

NOTE Confidence: 0.70433149

00:57:13.710 --> 00:57:14.970
Better to just repeat this here.

NOTE Confidence: 0.539533734166667

00:57:17.060 --> 00:57:19.580
Uhm, so branges less compare one

NOTE Confidence: 0.539533734166667

00:57:19.580 --> 00:57:22.730
LM one LM two report lessons.

NOTE Confidence: 0.539533734166667

00:57:22.730 --> 00:57:24.158
For ranges, greater reports

NOTE Confidence: 0.539533734166667

00:57:24.158 --> 00:57:26.156
to greater Ents, that's good.

NOTE Confidence: 0.539533734166667

00:57:26.156 --> 00:57:28.934
OK, it's now the top level.

NOTE Confidence: 0.539533734166667

00:57:28.940 --> 00:57:32.228
Let's compare mencom classify.

NOTE Confidence: 0.539533734166667

00:57:32.230 --> 00:57:33.726
We're gonna ask, uh,

NOTE Confidence: 0.539533734166667

00:57:33.726 --> 00:57:35.970
for it one it two impressed.

NOTE Confidence: 0.746326679166667

00:57:39.070 --> 00:57:40.240
I just briefly think about is

NOTE Confidence: 0.746326679166667

00:57:40.240 --> 00:57:41.369
that the usual naming we have.

NOTE Confidence: 0.746326679166667

00:57:41.370 --> 00:57:43.086
Usually we say things like Itter,

NOTE Confidence: 0.746326679166667

00:57:43.090 --> 00:57:44.180
but it it is fine.

NOTE Confidence: 0.714471519565217

00:57:47.120 --> 00:57:49.505
So it wanted it to need to be contiguous

NOTE Confidence: 0.714471519565217

00:57:49.505 --> 00:57:51.524
and it 1 needs to be not volatile

NOTE Confidence: 0.714471519565217

00:57:51.524 --> 00:57:53.578
and not an iterator to volatile.

NOTE Confidence: 0.714471519565217

00:57:53.580 --> 00:57:56.233
Umm, same for it too had better

NOTE Confidence: 0.714471519565217

00:57:56.233 --> 00:57:59.050
not be iterator volatile then.

NOTE Confidence: 0.483331053928571

00:58:01.940 --> 00:58:03.158
If that's true,

NOTE Confidence: 0.483331053928571

00:58:03.158 --> 00:58:05.594
Amit tightening double column prad from

NOTE Confidence: 0.483331053928571

00:58:05.594 --> 00:58:08.137
let's compare mencom classified pred.

NOTE Confidence: 0.483331053928571

00:58:08.140 --> 00:58:10.422
Give it the inter value T this

NOTE Confidence: 0.483331053928571

00:58:10.422 --> 00:58:12.818
will not have any CV qualifiers.

NOTE Confidence: 0.483331053928571

00:58:12.820 --> 00:58:17.950
It value T V2 and the pred. OK.

NOTE Confidence: 0.483331053928571

00:58:17.950 --> 00:58:19.190
This is sort of pre-existing.

NOTE Confidence: 0.483331053928571

00:58:19.190 --> 00:58:21.066
I am not a fan of shadowing.

NOTE Confidence: 0.483331053928571

00:58:21.070 --> 00:58:22.560
This is not technically shadowing,

NOTE Confidence: 0.483331053928571

00:58:22.560 --> 00:58:24.416
but this is using pride in two different

NOTE Confidence: 0.483331053928571

00:58:24.416 --> 00:58:25.570
sentences, so when I see this,

NOTE Confidence: 0.483331053928571

00:58:25.570 --> 00:58:28.870
my brain momentarily short circuits.

NOTE Confidence: 0.483331053928571

00:58:28.870 --> 00:58:30.210
This is fine, though.

NOTE Confidence: 0.483331053928571

00:58:30.210 --> 00:58:34.130
I mean it's it's pretty existing, UM.

NOTE Confidence: 0.483331053928571

00:58:34.130 --> 00:58:36.530
We did avoid it before by having PR,

NOTE Confidence: 0.483331053928571

00:58:36.530 --> 00:58:39.510
at least in the template.

NOTE Confidence: 0.483331053928571

00:58:39.510 --> 00:58:40.868
I guess we do use Pred elsewhere.

NOTE Confidence: 0.483331053928571

00:58:40.870 --> 00:58:42.598
Where do we do?

NOTE Confidence: 0.483331053928571

00:58:42.598 --> 00:58:44.758
We use predecessors in PR.

NOTE Confidence: 0.483331053928571

00:58:44.760 --> 00:58:47.240
You could avoid this cheaply by saying PR.

NOTE Confidence: 0.483331053928571

00:58:47.240 --> 00:58:48.700
We say PR here.

NOTE Confidence: 0.483331053928571

00:58:48.700 --> 00:58:50.160
This avoids the duplication

NOTE Confidence: 0.483331053928571

00:58:50.160 --> 00:58:51.580
by saying class PR.

NOTE Confidence: 0.582851198888889

00:58:54.580 --> 00:58:56.940
Did we say, predict the

NOTE Confidence: 0.582851198888889

00:58:56.940 --> 00:58:58.828
moon come classified level?

NOTE Confidence: 0.582851198888889

00:58:58.830 --> 00:59:01.296
Ohh, used to be a function.

NOTE Confidence: 0.582851198888889

00:59:01.300 --> 00:59:05.302
And now it's a. That's a helper here.

NOTE Confidence: 0.582851198888889

00:59:05.302 --> 00:59:07.369
I'm going to ask for it to be,

NOTE Confidence: 0.582851198888889

00:59:07.370 --> 00:59:09.260
uhm, just class PR because that

NOTE Confidence: 0.582851198888889

00:59:09.260 --> 00:59:10.911
it's a little more consistent

NOTE Confidence: 0.582851198888889

00:59:10.911 --> 00:59:13.200
with what we did above and it

NOTE Confidence: 0.582851198888889

00:59:13.200 --> 00:59:15.310
avoids this weird quasi shadowing.

NOTE Confidence: 0.582851198888889

00:59:15.310 --> 00:59:17.662
Do we have any other cases of class

NOTE Confidence: 0.582851198888889

00:59:17.662 --> 00:59:20.010
spread that I would need to comment on?

NOTE Confidence: 0.582851198888889

00:59:20.010 --> 00:59:22.950
That's the only one.

NOTE Confidence: 0.582851198888889

00:59:22.950 --> 00:59:26.625
OK Ohh let me see.

NOTE Confidence: 0.582851198888889

00:59:26.630 --> 00:59:28.254
Maybe I'll come to the whole thing

NOTE Confidence: 0.582851198888889

00:59:28.254 --> 00:59:29.860
just so the context is clear.

NOTE Confidence: 0.170048117333333

00:59:33.310 --> 00:59:39.226
Naming, uh nitpick. I recommend

NOTE Confidence: 0.170048117333333

00:59:39.226 --> 00:59:43.714
templating on Umm class PR here,

NOTE Confidence: 0.170048117333333

00:59:43.720 --> 00:59:46.795
which would be more consistent

NOTE Confidence: 0.170048117333333

00:59:46.795 --> 00:59:50.497
with and let's get the use

NOTE Confidence: 0.170048117333333

00:59:50.497 --> 00:59:53.600
of class PR above. This one.

NOTE Confidence: 0.825762755

01:00:00.380 --> 01:00:02.688
With the definition of.

NOTE Confidence: 0.264882445

01:00:04.980 --> 01:00:11.146
Blah above. And would avoid the.

NOTE Confidence: 0.264882445

01:00:11.146 --> 01:00:17.380
Uh, quasi shadowing that appears in.

NOTE Confidence: 0.827035096666667

01:00:21.920 --> 01:00:24.770
This horrible thing. Not really

NOTE Confidence: 0.827035096666667

01:00:24.770 --> 01:00:25.910
horrible, it's just verbose.

NOTE Confidence: 0.490975980769231

01:00:37.840 --> 01:00:40.180
OK, naming the pick, I recommend

NOTE Confidence: 0.490975980769231

01:00:40.180 --> 01:00:42.758
completing on class under score PR here,

NOTE Confidence: 0.490975980769231

01:00:42.760 --> 01:00:44.176
which would be more consistent with

NOTE Confidence: 0.490975980769231

01:00:44.176 --> 01:00:45.404
the definition of lecompt classified

NOTE Confidence: 0.490975980769231

01:00:45.404 --> 01:00:47.084
part above and would avoid the quasi

NOTE Confidence: 0.490975980769231

01:00:47.084 --> 01:00:48.459
shadowing that appears in tightening.

NOTE Confidence: 0.490975980769231

01:00:48.460 --> 01:00:51.070
Let's compare Mecom classified Pred meow

NOTE Confidence: 0.490975980769231

01:00:51.070 --> 01:00:53.830
under score pred double compared. Yeah.

NOTE Confidence: 0.92454255

01:01:01.250 --> 01:01:04.849
OK. So now, Umm.

NOTE Confidence: 0.713473356666667

01:01:07.070 --> 01:01:09.520
We're going directly to lexicographical

NOTE Confidence: 0.713473356666667

01:01:09.520 --> 01:01:11.678
compare before we had functions.

NOTE Confidence: 0.713473356666667

01:01:11.678 --> 01:01:12.929
Let's compare unchecked.

NOTE Confidence: 0.30103523

01:01:15.380 --> 01:01:16.060
Year

NOTE Confidence: 0.851365413333333

01:01:18.190 --> 01:01:21.035
and now it's all being inlined. OK.

NOTE Confidence: 0.851365413333333

01:01:21.035 --> 01:01:24.755
So that's where all that complexity is going.

NOTE Confidence: 0.851365413333333

01:01:24.760 --> 01:01:26.758
It's good they these multiple layers

NOTE Confidence: 0.851365413333333

01:01:26.758 --> 01:01:29.696
are sort of a holdover, uh, often,

NOTE Confidence: 0.851365413333333

01:01:29.696 --> 01:01:32.138
UM, from our, uh, previous tag

NOTE Confidence: 0.851365413333333

01:01:32.138 --> 01:01:34.214
dispatch era when we didn't have.

NOTE Confidence: 0.851365413333333

01:01:34.220 --> 01:01:35.940
If Constexpr and we didn't

NOTE Confidence: 0.851365413333333

01:01:35.940 --> 01:01:37.660
have things like decal type,

NOTE Confidence: 0.851365413333333

01:01:37.660 --> 01:01:40.229
so we really needed another layer of

NOTE Confidence: 0.851365413333333

01:01:40.229 --> 01:01:42.541
a function template to deduce the

NOTE Confidence: 0.851365413333333

01:01:42.541 --> 01:01:44.815
unwrapped types and to switch between.

NOTE Confidence: 0.851365413333333

01:01:44.820 --> 01:01:46.000
I can optimize versus.

NOTE Confidence: 0.851365413333333

01:01:46.000 --> 01:01:48.523
I can't now that we have if Constexpr

NOTE Confidence: 0.851365413333333

01:01:48.523 --> 01:01:50.917
unconditionally even in C + 14 mode,

NOTE Confidence: 0.851365413333333

01:01:50.920 --> 01:01:52.621
because we can always use future technology

NOTE Confidence: 0.851365413333333

01:01:52.621 --> 01:01:55.108
when we ask the compiler devs, pretty please.

NOTE Confidence: 0.851365413333333

01:01:55.108 --> 01:01:58.286
Umm, and we have things like decltype.

NOTE Confidence: 0.851365413333333

01:01:58.290 --> 01:02:00.222
UM, we no longer need separate

NOTE Confidence: 0.851365413333333

01:02:00.222 --> 01:02:01.188
layers of functions.

NOTE Confidence: 0.851365413333333

01:02:01.190 --> 01:02:02.470
UM, sometimes we still want

NOTE Confidence: 0.851365413333333

01:02:02.470 --> 01:02:03.750
functions for helpers like with,

NOTE Confidence: 0.851365413333333

01:02:03.750 --> 01:02:05.366
you know, copy unchecked,

NOTE Confidence: 0.851365413333333

01:02:05.366 --> 01:02:08.340
but sometimes inlining it is just easier.

NOTE Confidence: 0.851365413333333

01:02:08.340 --> 01:02:09.680
And that's the case here.

NOTE Confidence: 0.851365413333333

01:02:09.680 --> 01:02:12.356
Umm, so now stood lexicographical compare?

NOTE Confidence: 0.851365413333333

01:02:12.360 --> 01:02:14.513
Uh, which is a lot of syllables, uh,

NOTE Confidence: 0.851365413333333

01:02:14.513 --> 01:02:16.378
we're adding top level consciousness

NOTE Confidence: 0.851365413333333

01:02:16.380 --> 01:02:18.984
for our most modern convention on

NOTE Confidence: 0.851365413333333

01:02:18.984 --> 01:02:20.128
everything except for the predicate.

NOTE Confidence: 0.851365413333333

01:02:20.128 --> 01:02:21.190
And that could have a *****

NOTE Confidence: 0.851365413333333

01:02:21.190 --> 01:02:22.282
function call operator.

NOTE Confidence: 0.851365413333333

01:02:22.282 --> 01:02:23.738
For all we know,

NOTE Confidence: 0.851365413333333

01:02:23.740 --> 01:02:27.236
we verify the iterators in the right order.

NOTE Confidence: 0.851365413333333

01:02:27.240 --> 01:02:28.710
We unwrap them.

NOTE Confidence: 0.851365413333333

01:02:28.710 --> 01:02:31.160
They're removing the constness on

NOTE Confidence: 0.851365413333333

01:02:31.160 --> 01:02:34.048
you first one and you first two.

NOTE Confidence: 0.851365413333333

01:02:34.050 --> 01:02:35.945
Because we're actually going to

NOTE Confidence: 0.851365413333333

01:02:35.945 --> 01:02:37.840
iterate through them because we're

NOTE Confidence: 0.851365413333333

01:02:37.901 --> 01:02:39.966
actually doing the fundamental loop.

NOTE Confidence: 0.851365413333333

01:02:39.970 --> 01:02:41.680
That's where that's going now.

NOTE Confidence: 0.851365413333333

01:02:41.680 --> 01:02:42.710
We're going to ask, OK,

NOTE Confidence: 0.851365413333333

01:02:42.710 --> 01:02:43.421
the Mencom pred,

NOTE Confidence: 0.851365413333333

01:02:43.421 --> 01:02:45.080
which is the thing we're going to

NOTE Confidence: 0.851365413333333

01:02:45.136 --> 01:02:46.606
compare the memcpy answer from.

NOTE Confidence: 0.851365413333333

01:02:46.610 --> 01:02:48.778
We're gonna lexicon lexicographical

NOTE Confidence: 0.851365413333333

01:02:48.778 --> 01:02:51.488
compare remcom classify the decal

NOTE Confidence: 0.851365413333333

01:02:51.488 --> 01:02:54.009
type of the unwrapped iterator.

NOTE Confidence: 0.851365413333333

01:02:54.010 --> 01:02:54.349
Umm,

NOTE Confidence: 0.851365413333333

01:02:54.349 --> 01:02:57.061
same for the deck type of the unwrapped

NOTE Confidence: 0.851365413333333

01:02:57.061 --> 01:02:59.850
second iterator and the PRUM if constexpr UM,

NOTE Confidence: 0.851365413333333

01:02:59.850 --> 01:03:01.830
so let's see if we're eligible

NOTE Confidence: 0.851365413333333

01:03:01.896 --> 01:03:03.228
for the optimization.

NOTE Confidence: 0.851365413333333

01:03:03.230 --> 01:03:05.078
If Mencom Pret is non void,

NOTE Confidence: 0.851365413333333

01:03:05.080 --> 01:03:06.452
then we are eligible.

NOTE Confidence: 0.851365413333333

01:03:06.452 --> 01:03:09.018
So let's do something cool, but wait.

NOTE Confidence: 0.851365413333333

01:03:09.018 --> 01:03:12.090
If we're in under score has 6X20 mode,

NOTE Confidence: 0.851365413333333

01:03:12.090 --> 01:03:14.490
then we are required to be constant expert.

NOTE Confidence: 0.851365413333333

01:03:14.490 --> 01:03:16.175
This them comp thing is

NOTE Confidence: 0.851365413333333

01:03:16.175 --> 01:03:17.523
incompatible at compile time,

NOTE Confidence: 0.851365413333333

01:03:17.530 --> 01:03:19.870
so we need a runtime test that says if

NOTE Confidence: 0.851365413333333

01:03:19.870 --> 01:03:21.941
we're in 20 mode then we had better

NOTE Confidence: 0.851365413333333

01:03:21.941 --> 01:03:24.167
not be stood as constant in valuated.

NOTE Confidence: 0.851365413333333

01:03:24.170 --> 01:03:26.018
Only then at runtime can we

NOTE Confidence: 0.851365413333333

01:03:26.018 --> 01:03:27.250
do this cool thing.

NOTE Confidence: 0.851365413333333

01:03:27.250 --> 01:03:29.903
If we turn out to be actually

NOTE Confidence: 0.851365413333333

01:03:29.903 --> 01:03:32.169
being invoked for compile time,

NOTE Confidence: 0.851365413333333

01:03:32.170 --> 01:03:34.676
this will turn out to be false

NOTE Confidence: 0.851365413333333

01:03:34.676 --> 01:03:37.989
and we'll end up doing the the raw

NOTE Confidence: 0.851365413333333

01:03:37.989 --> 01:03:40.144
loop that is constexpr friendly.

NOTE Confidence: 0.851365413333333

01:03:40.150 --> 01:03:41.788
So this pattern is quite common

NOTE Confidence: 0.851365413333333

01:03:41.788 --> 01:03:42.607
throughout the STL,

NOTE Confidence: 0.851365413333333

01:03:42.610 --> 01:03:44.596
and if we're not eligible at

NOTE Confidence: 0.851365413333333

01:03:44.596 --> 01:03:45.589
all free optimization,

NOTE Confidence: 0.851365413333333

01:03:45.590 --> 01:03:46.710
we never even bother asking.

NOTE Confidence: 0.851365413333333

01:03:46.710 --> 01:03:48.830
Are we constantly evaluate it?

NOTE Confidence: 0.851365413333333

01:03:48.830 --> 01:03:50.755
Thanks to the wonders of if cost

NOTE Confidence: 0.851365413333333

01:03:50.755 --> 01:03:52.217
expert that this also explains

NOTE Confidence: 0.851365413333333

01:03:52.217 --> 01:03:54.226
why this is not an if constexpr?

NOTE Confidence: 0.851365413333333

01:03:54.230 --> 01:03:56.150
Else because we do need this

NOTE Confidence: 0.851365413333333

01:03:56.150 --> 01:03:58.284
fall through in the case that

NOTE Confidence: 0.851365413333333

01:03:58.284 --> 01:04:00.239
the runtime test falls through,

NOTE Confidence: 0.851365413333333

01:04:00.240 --> 01:04:01.460
and as a final aside,

NOTE Confidence: 0.851365413333333

01:04:01.460 --> 01:04:03.556
it is extremely intentional that this is not.

NOTE Confidence: 0.851365413333333

01:04:03.560 --> 01:04:06.520
If constexpr is constant evaluated,

NOTE Confidence: 0.851365413333333

01:04:06.520 --> 01:04:08.260
the compiler will actually warrant you.

NOTE Confidence: 0.851365413333333

01:04:08.260 --> 01:04:09.168
If you do that,

NOTE Confidence: 0.851365413333333

01:04:09.168 --> 01:04:10.879
because that forces the answer always be yes,

NOTE Confidence: 0.851365413333333

01:04:10.880 --> 01:04:11.624
it is constant evaluated,

NOTE Confidence: 0.851365413333333

01:04:11.624 --> 01:04:12.740
which is not what you want.

NOTE Confidence: 0.739274634444444

01:04:12.740 --> 01:04:16.268
This needs to be expressed as a runtime test.

NOTE Confidence: 0.739274634444444

01:04:16.270 --> 01:04:18.710
OK, Umm, so if we end up being

NOTE Confidence: 0.739274634444444

01:04:18.710 --> 01:04:20.835
eligible at compile time and

NOTE Confidence: 0.739274634444444

01:04:20.835 --> 01:04:22.747
runtime for the optimization,

NOTE Confidence: 0.739274634444444

01:04:22.750 --> 01:04:24.646
we get the differences of the

NOTE Confidence: 0.739274634444444

01:04:24.646 --> 01:04:26.329
iterators and that's the number

NOTE Confidence: 0.739274634444444

01:04:26.329 --> 01:04:28.089
of elements we're looking at.

NOTE Confidence: 0.739274634444444

01:04:28.090 --> 01:04:29.581
We static cast from putative T to

NOTE Confidence: 0.739274634444444

01:04:29.581 --> 01:04:31.658
size T we know that they're in the

NOTE Confidence: 0.739274634444444

01:04:31.658 --> 01:04:33.350
right order because we verified them,

NOTE Confidence: 0.739274634444444

01:04:33.350 --> 01:04:34.862
so we don't need to worry

NOTE Confidence: 0.739274634444444

01:04:34.862 --> 01:04:35.618
about reverse things.

NOTE Confidence: 0.739274634444444

01:04:35.620 --> 01:04:38.609
We call our helper mencom taking account.

NOTE Confidence: 0.739274634444444

01:04:38.610 --> 01:04:41.592
We give it the unwrapped raw

NOTE Confidence: 0.739274634444444

01:04:41.592 --> 01:04:43.580
pointers or unwrapped iterators.

NOTE Confidence: 0.739274634444444

01:04:43.580 --> 01:04:45.470
And we're going to prepare for

NOTE Confidence: 0.739274634444444

01:04:45.470 --> 01:04:47.480
the lesser of number one and #2.

NOTE Confidence: 0.739274634444444

01:04:47.480 --> 01:04:49.204
You stood men, uh,

NOTE Confidence: 0.739274634444444

01:04:49.204 --> 01:04:51.359
parenthesize to avoid macro expansion.

NOTE Confidence: 0.739274634444444

01:04:51.360 --> 01:04:53.380
UM, get the answer out.

NOTE Confidence: 0.739274634444444

01:04:53.380 --> 01:04:55.198
This is very similar to what we had before,

NOTE Confidence: 0.739274634444444

01:04:55.200 --> 01:05:00.135
and then we compare if it is.

NOTE Confidence: 0.739274634444444

01:05:00.140 --> 01:05:04.172
Less than zero if it is less than meaning,

NOTE Confidence: 0.739274634444444

01:05:04.180 --> 01:05:05.090
as judged by the pred.

NOTE Confidence: 0.739274634444444

01:05:05.090 --> 01:05:08.150
This handles the the reverting.

NOTE Confidence: 0.739274634444444

01:05:08.150 --> 01:05:10.430
The reversing of behavior, UM,

NOTE Confidence: 0.739274634444444

01:05:10.430 --> 01:05:12.430
then we'll immediately return it,

NOTE Confidence: 0.739274634444444

01:05:12.430 --> 01:05:13.080
UM?

NOTE Confidence: 0.909204477272727

01:05:16.310 --> 01:05:17.854
So if that if it ends up being

NOTE Confidence: 0.909204477272727

01:05:17.854 --> 01:05:19.925
less than zero, we'll return that.

NOTE Confidence: 0.909204477272727

01:05:19.925 --> 01:05:22.715
Otherwise, if it's greater than zero,

NOTE Confidence: 0.909204477272727

01:05:22.720 --> 01:05:24.388
we definitely want to return false.

NOTE Confidence: 0.909204477272727

01:05:24.390 --> 01:05:26.148
If it's exactly equal to 0,

NOTE Confidence: 0.909204477272727

01:05:26.150 --> 01:05:28.126
the only way we can return true is

NOTE Confidence: 0.909204477272727

01:05:28.126 --> 01:05:30.189
if NUM one is less than NUM two,

NOTE Confidence: 0.909204477272727

01:05:30.190 --> 01:05:32.278
meaning the first sequence is shorter.

NOTE Confidence: 0.909204477272727

01:05:32.280 --> 01:05:34.583
This handles the prefix case where your

NOTE Confidence: 0.909204477272727

01:05:34.583 --> 01:05:36.909
cat is considered less than catastrophe.

NOTE Confidence: 0.909204477272727

01:05:36.910 --> 01:05:40.690
If you had a sequence of care.

NOTE Confidence: 0.909204477272727

01:05:40.690 --> 01:05:42.422
This is exactly equivalent

NOTE Confidence: 0.909204477272727

01:05:42.422 --> 01:05:44.784
to what we had before this.

NOTE Confidence: 0.909204477272727

01:05:44.784 --> 01:05:45.560
Also, by the way,

NOTE Confidence: 0.909204477272727

01:05:45.560 --> 01:05:47.804
this correctly handles the case where

NOTE Confidence: 0.909204477272727

01:05:47.804 --> 01:05:49.976
the comparator is stood greater that

NOTE Confidence: 0.909204477272727

01:05:49.976 --> 01:05:52.424
only if you pass stood greater as the

NOTE Confidence: 0.909204477272727

01:05:52.492 --> 01:05:54.880
comparison that only affects the answer

NOTE Confidence: 0.909204477272727

01:05:54.880 --> 01:05:58.720
when the elements compare not equal.

NOTE Confidence: 0.909204477272727

01:05:58.720 --> 01:06:01.635
Alex compare withstood Greater will

NOTE Confidence: 0.909204477272727

01:06:01.635 --> 01:06:05.819
still say that a shorter sequence is.

NOTE Confidence: 0.909204477272727

01:06:05.820 --> 01:06:06.720
Consider lexicographically

NOTE Confidence: 0.909204477272727

01:06:06.720 --> 01:06:08.520
before the longer sequence.

NOTE Confidence: 0.909204477272727

01:06:08.520 --> 01:06:10.660
It doesn't reverse that part,

NOTE Confidence: 0.909204477272727

01:06:10.660 --> 01:06:12.000
because in in some sense,

NOTE Confidence: 0.909204477272727

01:06:12.000 --> 01:06:12.628
let's compare.

NOTE Confidence: 0.909204477272727

01:06:12.628 --> 01:06:14.198
Doesn't know that it's reverting

NOTE Confidence: 0.909204477272727

01:06:14.198 --> 01:06:15.140
reversing at all.

NOTE Confidence: 0.909204477272727

01:06:15.140 --> 01:06:16.380
Maybe it's only comparing the

NOTE Confidence: 0.909204477272727

01:06:16.380 --> 01:06:17.620
sizes of strings or something,

NOTE Confidence: 0.909204477272727

01:06:17.620 --> 01:06:19.388
it just has a rule if all the

NOTE Confidence: 0.909204477272727

01:06:19.388 --> 01:06:21.040
elements are considered equivalent,

NOTE Confidence: 0.909204477272727

01:06:21.040 --> 01:06:22.612
then shorter sequence is

NOTE Confidence: 0.909204477272727

01:06:22.612 --> 01:06:24.184
lexicographically before longer sequence.

NOTE Confidence: 0.766420896

01:06:26.860 --> 01:06:30.020
OK, so that's good, UM?

NOTE Confidence: 0.766420896

01:06:30.020 --> 01:06:33.730
Next, here we go, UM.

NOTE Confidence: 0.766420896

01:06:33.730 --> 01:06:35.946
So I I guess I guess the conclusion

NOTE Confidence: 0.766420896

01:06:35.946 --> 01:06:38.109
that is what that means is that.

NOTE Confidence: 0.766420896

01:06:38.110 --> 01:06:41.848
Sorting a sequence of strings by

NOTE Confidence: 0.766420896

01:06:41.850 --> 01:06:44.090
lexicographic stood less is not,

NOTE Confidence: 0.766420896

01:06:44.090 --> 01:06:47.126
and then sorting it or sorry,

NOTE Confidence: 0.766420896

01:06:47.130 --> 01:06:48.195
comparing them with the greater

NOTE Confidence: 0.766420896

01:06:48.195 --> 01:06:49.760
is not the same as just doing

NOTE Confidence: 0.766420896

01:06:49.760 --> 01:06:51.116
it with less and then reversing

NOTE Confidence: 0.766420896

01:06:51.116 --> 01:06:52.849
it because it's going to handle

NOTE Confidence: 0.766420896

01:06:52.849 --> 01:06:54.085
different length strings differently.

NOTE Confidence: 0.766420896

01:06:54.090 --> 01:06:56.478
That makes any sense.

NOTE Confidence: 0.766420896

01:06:56.480 --> 01:06:58.888
OK, uh, otherwise if we are not eligible

NOTE Confidence: 0.766420896

01:06:58.888 --> 01:07:01.312
for the Mencap optimization like we're

NOTE Confidence: 0.766420896

01:07:01.312 --> 01:07:03.507
dealing with user defined types,

NOTE Confidence: 0.766420896

01:07:03.510 --> 01:07:05.590
or if we are in context for land,

NOTE Confidence: 0.766420896

01:07:05.590 --> 01:07:07.606
we need to do the raw loop.

NOTE Confidence: 0.766420896

01:07:07.610 --> 01:07:08.501
So we iterate.

NOTE Confidence: 0.766420896

01:07:08.501 --> 01:07:09.689
We've initialized everything already,

NOTE Confidence: 0.766420896

01:07:09.690 --> 01:07:10.810
so as long as your first one

NOTE Confidence: 0.766420896

01:07:10.810 --> 01:07:12.034
is not your last one and your

NOTE Confidence: 0.766420896

01:07:12.034 --> 01:07:13.290
first two is not your last two,

NOTE Confidence: 0.766420896

01:07:13.290 --> 01:07:14.670
we have elements of both sequences.

NOTE Confidence: 0.766420896

01:07:14.670 --> 01:07:17.230
We can do the comparison at the

NOTE Confidence: 0.766420896

01:07:17.230 --> 01:07:18.470
end of the loop, we'll increment.

NOTE Confidence: 0.766420896

01:07:18.470 --> 01:07:20.510
First one, we'll increment first two.

NOTE Confidence: 0.766420896

01:07:20.510 --> 01:07:23.334
We've got this void cast here to handle

NOTE Confidence: 0.766420896

01:07:23.334 --> 01:07:24.877
overloaded operator comma because

NOTE Confidence: 0.766420896

01:07:24.877 --> 01:07:27.579
being a standard library implementer is fun.

NOTE Confidence: 0.766420896

01:07:27.580 --> 01:07:29.436
We have to defend against all sorts of,

NOTE Confidence: 0.766420896

01:07:29.440 --> 01:07:31.440
UM, interesting user behavior.

NOTE Confidence: 0.766420896

01:07:31.440 --> 01:07:33.344
Uh, something to compare?

NOTE Confidence: 0.766420896

01:07:33.344 --> 01:07:34.280
Do it.

NOTE Confidence: 0.766420896

01:07:34.280 --> 01:07:35.816
We're gonna compare,

NOTE Confidence: 0.766420896

01:07:35.816 --> 01:07:36.840
uh, Derek.

NOTE Confidence: 0.766420896

01:07:36.840 --> 01:07:39.031
You first one against Derek Fu 1st

NOTE Confidence: 0.766420896

01:07:39.031 --> 01:07:41.384
2 using the PRED we will run it

NOTE Confidence: 0.766420896

01:07:41.384 --> 01:07:42.980
through our debug Lt Pride helper.

NOTE Confidence: 0.766420896

01:07:42.980 --> 01:07:45.212
This detects cases where the user

NOTE Confidence: 0.766420896

01:07:45.212 --> 01:07:47.444
predicate is incorrect and returns true

NOTE Confidence: 0.766420896

01:07:47.444 --> 01:07:49.810
when an element is less than itself.

NOTE Confidence: 0.766420896

01:07:49.810 --> 01:07:51.760
That should never ever happen.

NOTE Confidence: 0.766420896

01:07:51.760 --> 01:07:53.128
This detects incorrect use

NOTE Confidence: 0.766420896

01:07:53.128 --> 01:07:54.496
of like less equal,

NOTE Confidence: 0.766420896

01:07:54.500 --> 01:07:56.065
so if it's considered less

NOTE Confidence: 0.766420896

01:07:56.065 --> 01:07:57.317
than we return true.

NOTE Confidence: 0.766420896

01:07:57.320 --> 01:07:58.656
Otherwise we'll reverse it,

NOTE Confidence: 0.766420896

01:07:58.656 --> 01:08:00.990
and if two is less than one,

NOTE Confidence: 0.766420896

01:08:00.990 --> 01:08:02.400
we'll return false.

NOTE Confidence: 0.766420896

01:08:02.400 --> 01:08:02.870
Otherwise,

NOTE Confidence: 0.766420896

01:08:02.870 --> 01:08:04.750
we'll keep going because

NOTE Confidence: 0.766420896

01:08:04.750 --> 01:08:06.459
they're equivalent at the end,

NOTE Confidence: 0.766420896

01:08:06.460 --> 01:08:08.204
they are lexicographically less.

NOTE Confidence: 0.766420896

01:08:08.204 --> 01:08:10.384
Only when the first sequence

NOTE Confidence: 0.766420896

01:08:10.384 --> 01:08:12.317
is shorter than the 2nd,

NOTE Confidence: 0.766420896

01:08:12.320 --> 01:08:14.040
that happens when you first

NOTE Confidence: 0.766420896

01:08:14.040 --> 01:08:15.416
one has been exhausted.

NOTE Confidence: 0.766420896

01:08:15.420 --> 01:08:16.596
It's equal to you last one,

NOTE Confidence: 0.766420896

01:08:16.600 --> 01:08:19.218
and you first two is not exhausted.

NOTE Confidence: 0.766420896

01:08:19.220 --> 01:08:21.000
It's not equal, you lastic.

NOTE Confidence: 0.766420896

01:08:21.000 --> 01:08:22.836
So this is translating in fact.

NOTE Confidence: 0.766420896

01:08:22.840 --> 01:08:24.324
Basically moving this code

NOTE Confidence: 0.766420896

01:08:24.324 --> 01:08:26.550
around that was already up here.

NOTE Confidence: 0.766420896

01:08:26.550 --> 01:08:27.582
GitHub doesn't show moves,

NOTE Confidence: 0.766420896

01:08:27.582 --> 01:08:29.130
but that it's just a move.

NOTE Confidence: 0.766420896

01:08:29.130 --> 01:08:30.510
If I was extremely paranoid,

NOTE Confidence: 0.766420896

01:08:30.510 --> 01:08:32.370
I would diff before and after

NOTE Confidence: 0.766420896

01:08:32.370 --> 01:08:34.010
as I do elsewhere here.

NOTE Confidence: 0.766420896

01:08:34.010 --> 01:08:35.312
The code is straightforward enough that I

NOTE Confidence: 0.766420896

01:08:35.312 --> 01:08:36.608
can visually see that it's all correct,

NOTE Confidence: 0.766420896

01:08:36.610 --> 01:08:39.985
and it hasn't been mutated in any weird way.

NOTE Confidence: 0.766420896

01:08:39.990 --> 01:08:44.660
OK, so that is for.

NOTE Confidence: 0.766420896

01:08:44.660 --> 01:08:48.040
Lux compare with ipred.

NOTE Confidence: 0.766420896

01:08:48.040 --> 01:08:51.050
Now we have Lux compare without pride.

NOTE Confidence: 0.766420896

01:08:51.050 --> 01:08:53.525
This one is just meaning

NOTE Confidence: 0.766420896

01:08:53.525 --> 01:08:55.505
constant all the iterators.

NOTE Confidence: 0.766420896

01:08:55.510 --> 01:08:57.430
Nothing else is happening here.

NOTE Confidence: 0.766420896

01:08:57.430 --> 01:08:58.490
I don't actually know why.

NOTE Confidence: 0.766420896

01:08:58.490 --> 01:09:00.010
I guess it's too much of a change.

NOTE Confidence: 0.766420896

01:09:00.010 --> 01:09:00.535
Uh, I forget.

NOTE Confidence: 0.766420896

01:09:00.535 --> 01:09:01.235
How to highlight cost

NOTE Confidence: 0.766420896

01:09:01.235 --> 01:09:02.160
four times in this case,

NOTE Confidence: 0.766420896

01:09:02.160 --> 01:09:04.388
but that's what's happening.

NOTE Confidence: 0.766420896

01:09:04.390 --> 01:09:07.758
And then we just pass let's diamond OK.

NOTE Confidence: 0.766420896

01:09:07.760 --> 01:09:10.332
For the parallel version.

NOTE Confidence: 0.766420896

01:09:10.332 --> 01:09:15.050
Expo rifraff these are all constant dying.

NOTE Confidence: 0.766420896

01:09:15.050 --> 01:09:17.626
OK, this one's not being paralyzed right now,

NOTE Confidence: 0.766420896

01:09:17.630 --> 01:09:20.395
so we just called the stid version.

NOTE Confidence: 0.766420896

01:09:20.400 --> 01:09:20.823
OK,

NOTE Confidence: 0.766420896

01:09:20.823 --> 01:09:21.669
that's good.

NOTE Confidence: 0.679135227272727

01:09:24.530 --> 01:09:26.028
This one is the one that doesn't

NOTE Confidence: 0.679135227272727

01:09:26.028 --> 01:09:28.080
even take a pred, but it's parallel.

NOTE Confidence: 0.662013940857143

01:09:30.110 --> 01:09:31.858
Again, we're adding constant

NOTE Confidence: 0.662013940857143

01:09:31.858 --> 01:09:36.940
all the iterators. OK. Yep.

NOTE Confidence: 0.662013940857143

01:09:36.940 --> 01:09:40.480
OK, now in the concepts world

NOTE Confidence: 0.662013940857143

01:09:40.480 --> 01:09:42.552
this is the Lex compare 3 way

NOTE Confidence: 0.662013940857143

01:09:42.552 --> 01:09:44.070
for the spaceship operator.

NOTE Confidence: 0.575633645

01:09:47.360 --> 01:09:52.568
OK, so. Template on under score on one LM,

NOTE Confidence: 0.575633645

01:09:52.570 --> 01:09:54.280
two come on what was scanning

NOTE Confidence: 0.575633645

01:09:54.280 --> 01:09:55.420
for not updating names.

NOTE Confidence: 0.575633645

01:09:55.420 --> 01:09:57.780
Umm, this is Deluxe compare

NOTE Confidence: 0.575633645

01:09:57.780 --> 01:10:00.140
3 way mencom classify comp.

NOTE Confidence: 0.575633645

01:10:00.140 --> 01:10:01.684
By default, not eligible.

NOTE Confidence: 0.575633645

01:10:01.684 --> 01:10:03.614
We were port and void,

NOTE Confidence: 0.575633645

01:10:03.620 --> 01:10:06.338
but if we're given the stood compare 3 way,

NOTE Confidence: 0.575633645

01:10:06.340 --> 01:10:07.561
Umm, function object,

NOTE Confidence: 0.575633645

01:10:07.561 --> 01:10:09.596
then we might be eligible.

NOTE Confidence: 0.575633645

01:10:09.600 --> 01:10:14.238
So using comp is conditional test.

NOTE Confidence: 0.575633645

01:10:14.240 --> 01:10:17.236
We're gonna ask, can we let's compare

NOTE Confidence: 0.575633645

01:10:17.236 --> 01:10:19.557
mencom classify elements LM one LM two.

NOTE Confidence: 0.575633645

01:10:19.560 --> 01:10:22.128
This uses the mencom thing we defined above,

NOTE Confidence: 0.575633645

01:10:22.130 --> 01:10:23.714
because ultimately that's what we want to do.

NOTE Confidence: 0.575633645

01:10:23.720 --> 01:10:25.956
We want to ask, hey, are you them comparable?

NOTE Confidence: 0.575633645

01:10:25.956 --> 01:10:28.080
But we also need to make sure.

NOTE Confidence: 0.575633645

01:10:28.080 --> 01:10:30.040
Are these elements just

NOTE Confidence: 0.575633645

01:10:30.040 --> 01:10:32.490
three way comparable at all?

NOTE Confidence: 0.575633645

01:10:32.490 --> 01:10:35.162
So is it and this standard, uh,

NOTE Confidence: 0.575633645

01:10:35.162 --> 01:10:36.926
I wanna say this is a concept

NOTE Confidence: 0.575633645

01:10:36.926 --> 01:10:38.607
3 way comparable with concello

NOTE Confidence: 0.575633645

01:10:38.607 --> 01:10:41.190
one WAF versus cons Ellen 2 ref.

NOTE Confidence: 0.575633645

01:10:41.190 --> 01:10:42.798
If that's true we'll return compare

NOTE Confidence: 0.575633645

01:10:42.798 --> 01:10:44.610
3 way using the same sort of.

NOTE Confidence: 0.575633645

01:10:44.610 --> 01:10:47.536
This is what we're going to compare

NOTE Confidence: 0.575633645

01:10:47.536 --> 01:10:50.059
mcoms result with otherwise void.

NOTE Confidence: 0.575633645

01:10:50.060 --> 01:10:52.700
OK, we've got some internal concepts.

NOTE Confidence: 0.575633645

01:10:52.700 --> 01:10:55.156
This is all guarded by CP Lib concepts.

NOTE Confidence: 0.735178294

01:10:57.720 --> 01:10:58.914
That's because not all of our

NOTE Confidence: 0.735178294

01:10:58.914 --> 01:10:59.710
front end support concepts,

NOTE Confidence: 0.735178294

01:10:59.710 --> 01:11:03.164
yet they will soon. Then then this

NOTE Confidence: 0.735178294

01:11:03.164 --> 01:11:05.180
will just turn to have six 6:20.

NOTE Confidence: 0.735178294

01:11:05.180 --> 01:11:08.960
So if we are given Taiwan and Tai two can

NOTE Confidence: 0.735178294

01:11:09.053 --> 01:11:11.735
strong order requires given a consti one

NOTE Confidence: 0.735178294

01:11:11.735 --> 01:11:14.040
rough left and a constitu rough, right?

NOTE Confidence: 0.735178294

01:11:14.040 --> 01:11:16.348
We can call strong order left, right?

NOTE Confidence: 0.735178294

01:11:16.348 --> 01:11:17.692
This is, interestingly,

NOTE Confidence: 0.735178294

01:11:17.692 --> 01:11:20.380
a function object in the STL,

NOTE Confidence: 0.735178294

01:11:20.380 --> 01:11:23.026
so we do not qualify it.

NOTE Confidence: 0.735178294

01:11:23.030 --> 01:11:26.406
I think, UM, it's not technically a function,

NOTE Confidence: 0.735178294

01:11:26.410 --> 01:11:28.066
so it's not vulnerable to ADL.

NOTE Confidence: 0.735178294

01:11:28.070 --> 01:11:29.054
I think the existing

NOTE Confidence: 0.735178294

01:11:29.054 --> 01:11:30.284
conventions we don't qualify it,

NOTE Confidence: 0.735178294

01:11:30.290 --> 01:11:31.230
but I can't remember if

NOTE Confidence: 0.735178294

01:11:31.230 --> 01:11:31.982
we actually called this.

NOTE Confidence: 0.670671948

01:11:41.200 --> 01:11:43.288
Ohh, that's interesting.

NOTE Confidence: 0.670671948

01:11:43.288 --> 01:11:45.568
So here I did end up.

NOTE Confidence: 0.670671948

01:11:45.568 --> 01:11:46.900
I think I wrote this code.

NOTE Confidence: 0.670671948

01:11:46.900 --> 01:11:48.920
Yeah, this looks familiar.

NOTE Confidence: 0.670671948

01:11:48.920 --> 01:11:50.780
I did qualify this because

NOTE Confidence: 0.670671948

01:11:50.780 --> 01:11:52.640
it looks like a function.

NOTE Confidence: 0.670671948

01:11:52.640 --> 01:11:54.840
Yes, is qualified here too.

NOTE Confidence: 0.670671948

01:11:54.840 --> 01:11:59.630
It's technically not. UM?

NOTE Confidence: 0.670671948

01:11:59.630 --> 01:12:01.052
Here we made sure that strong

NOTE Confidence: 0.670671948

01:12:01.052 --> 01:12:02.340
ordering was not in scope,

NOTE Confidence: 0.670671948

01:12:02.340 --> 01:12:04.410
and we're doing a DL call.

NOTE Confidence: 0.670671948

01:12:04.410 --> 01:12:06.426
I would feel better with a stood here.

NOTE Confidence: 0.849809571428572

01:12:09.740 --> 01:12:11.819
It is more consistent with existing usage.

NOTE Confidence: 0.829003026

01:12:14.490 --> 01:12:16.650
I can quote this.

NOTE Confidence: 0.829003026

01:12:16.650 --> 01:12:19.890
This is in compare line 700.

NOTE Confidence: 0.829003026

01:12:19.890 --> 01:12:21.586
It's a nitpick, UM.

NOTE Confidence: 0.829003026

01:12:21.586 --> 01:12:23.282
It's influenced by how

NOTE Confidence: 0.829003026

01:12:23.282 --> 01:12:25.690
much I am hate and fear.

NOTE Confidence: 0.829003026

01:12:25.690 --> 01:12:28.042
ADL the argument dependent lookup that

NOTE Confidence: 0.829003026

01:12:28.042 --> 01:12:30.170
we're constantly on guard against.

NOTE Confidence: 0.829003026

01:12:30.170 --> 01:12:32.249
When I, when I see the qualification,

NOTE Confidence: 0.829003026

01:12:32.250 --> 01:12:34.090
I'm like, Oh no ADL, this is,

NOTE Confidence: 0.829003026

01:12:34.090 --> 01:12:35.990
you know, fun and happy.

NOTE Confidence: 0.829003026

01:12:35.990 --> 01:12:37.390
And when I don't see the qualification

NOTE Confidence: 0.829003026

01:12:37.390 --> 01:12:39.298
I'm like oh, could this be ADL?

NOTE Confidence: 0.829003026

01:12:39.298 --> 01:12:42.529
Could we be hijacked by a better overload?

NOTE Confidence: 0.829003026

01:12:42.530 --> 01:12:45.170
Or compare? Here we go.

NOTE Confidence: 0.829003026

01:12:45.170 --> 01:12:48.258
I wanted, Nope, I don't want this PR.

NOTE Confidence: 0.829003026

01:12:48.260 --> 01:12:50.846
On line three, no line 700.

NOTE Confidence: 0.829003026

01:12:50.850 --> 01:12:51.380
That's, uh,

NOTE Confidence: 0.829003026

01:12:51.380 --> 01:12:52.970
and I've got the PR code.

NOTE Confidence: 0.68107307

01:12:55.580 --> 01:12:56.966
Sorry about that.

NOTE Confidence: 0.68107307

01:12:56.966 --> 01:12:59.494
Whenever I tapped my. Trackpad?

NOTE Confidence: 0.68107307

01:12:59.494 --> 01:13:03.538
Becomes click OK. Here we go.

NOTE Confidence: 0.68107307

01:13:03.540 --> 01:13:05.328
Get a permalink by pressing Y.

NOTE Confidence: 0.68107307

01:13:05.330 --> 01:13:07.286
Here's the call listed strong order.

NOTE Confidence: 0.482716345666667

01:13:09.580 --> 01:13:13.750
OK, go inside utility. This occurs

NOTE Confidence: 0.482716345666667

01:13:13.750 --> 01:13:19.570
to all these, UM. So nitpick.

NOTE Confidence: 0.3964676865

01:13:21.680 --> 01:13:24.780
Although this.

NOTE Confidence: 0.3964676865

01:13:24.780 --> 01:13:30.396
Uhm, technically isn't a I'm function

NOTE Confidence: 0.3964676865

01:13:30.400 --> 01:13:36.190
and therefore is invulnerable to ADL.

NOTE Confidence: 0.3964676865

01:13:36.190 --> 01:13:38.899
I can expand this for any UM.

NOTE Confidence: 0.3964676865

01:13:38.900 --> 01:13:42.132
Viewers out there who are not versed in

NOTE Confidence: 0.3964676865

01:13:42.132 --> 01:13:44.606
the standard acronyms argument pendant,

NOTE Confidence: 0.3964676865

01:13:44.606 --> 01:13:46.202
I don't do this for everything

NOTE Confidence: 0.3964676865

01:13:46.202 --> 01:13:47.868
like Sheena, but may as well.

NOTE Confidence: 0.3964676865

01:13:47.868 --> 01:13:49.560
This is also not universally known.

NOTE Confidence: 0.3964676865

01:13:49.560 --> 01:13:50.400
Look up.

NOTE Confidence: 0.204100936666667

01:13:52.950 --> 01:13:58.172
Umm, we've uhm. Conventionally,

NOTE Confidence: 0.204100936666667

01:13:58.172 --> 01:14:01.900
uh, qualified it elsewhere.

NOTE Confidence: 0.204100936666667

01:14:01.900 --> 01:14:06.370
Just to avoid any confusion.

NOTE Confidence: 0.204100936666667

01:14:06.370 --> 01:14:09.880
Occurs below for.

NOTE Confidence: 0.204100936666667

01:14:09.880 --> 01:14:15.420
Week order and partial. Order

NOTE Confidence: 0.777692413333333

01:14:17.900 --> 01:14:22.633
UM example of. For example precedent.

NOTE Confidence: 0.777692413333333

01:14:22.633 --> 01:14:25.569
It's kind of saw on this, OK?

NOTE Confidence: 0.777692413333333

01:14:25.569 --> 01:14:26.965
Nitpick, although this technically

NOTE Confidence: 0.777692413333333

01:14:26.965 --> 01:14:29.142
isn't a function and therefore is

NOTE Confidence: 0.777692413333333

01:14:29.142 --> 01:14:31.037
invulnerable to argument dependent lookup,

NOTE Confidence: 0.777692413333333

01:14:31.040 --> 01:14:32.200
we've kind of eventually qualified

NOTE Confidence: 0.777692413333333

01:14:32.200 --> 01:14:33.641
elsewhere just to avoid any confusion

NOTE Confidence: 0.777692413333333

01:14:33.641 --> 01:14:34.826
occurs below for weak order.

NOTE Confidence: 0.777692413333333

01:14:34.830 --> 01:14:36.345
Partial order example President returns

NOTE Confidence: 0.777692413333333

01:14:36.345 --> 01:14:39.530
to strong order, left, right. OK.

NOTE Confidence: 0.673744684285714

01:14:49.610 --> 01:14:52.130
Ohh, and this just occurred to me,

NOTE Confidence: 0.673744684285714

01:14:52.130 --> 01:14:53.405
this is called canned strong

NOTE Confidence: 0.673744684285714

01:14:53.405 --> 01:14:54.680
order that thing it compared

NOTE Confidence: 0.673744684285714

01:14:54.727 --> 01:14:55.977
was called can strong order.

NOTE Confidence: 0.476065075

01:14:59.350 --> 01:15:02.416
It was here and strong order.

NOTE Confidence: 0.558589592857143

01:15:05.360 --> 01:15:09.308
Answer, uh, nested within the fall back.

NOTE Confidence: 0.558589592857143

01:15:09.310 --> 01:15:13.360
It's nested within this namespace.

NOTE Confidence: 0.558589592857143

01:15:13.360 --> 01:15:15.435
Technically. It is actually shadowing

NOTE Confidence: 0.558589592857143

01:15:15.435 --> 01:15:17.998
like there's a stood can strong

NOTE Confidence: 0.558589592857143

01:15:17.998 --> 01:15:20.470
order if that's been included above,

NOTE Confidence: 0.558589592857143

01:15:20.470 --> 01:15:21.525
although here I think compare

NOTE Confidence: 0.558589592857143

01:15:21.525 --> 01:15:22.369
is actually included above,

NOTE Confidence: 0.558589592857143

01:15:22.370 --> 01:15:24.860
but it's the same name.

NOTE Confidence: 0.558589592857143

01:15:24.860 --> 01:15:26.325
I'm really uncomfortable whenever I

NOTE Confidence: 0.558589592857143

01:15:26.325 --> 01:15:28.379
see the same name reused in the STL,

NOTE Confidence: 0.558589592857143

01:15:28.380 --> 01:15:30.186
even if there's no actual shadowing.

NOTE Confidence: 0.887812914285714

01:15:33.760 --> 01:15:35.657
I would prefer any any other name,

NOTE Confidence: 0.887812914285714

01:15:35.660 --> 01:15:39.910
UM, that, or lift this up, UM.

NOTE Confidence: 0.887812914285714

01:15:39.910 --> 01:15:41.002
Like here, the only reason I

NOTE Confidence: 0.887812914285714

01:15:41.002 --> 01:15:42.479
nested it in was because I didn't

NOTE Confidence: 0.887812914285714

01:15:42.479 --> 01:15:43.644
think anybody else needed it.

NOTE Confidence: 0.887812914285714

01:15:43.650 --> 01:15:45.554
But if we actually do need it now.

NOTE Confidence: 0.7831940875

01:15:48.760 --> 01:15:50.734
This is trying to call the stud

NOTE Confidence: 0.7831940875

01:15:50.734 --> 01:15:52.399
function object that we've defined.

NOTE Confidence: 0.7831940875

01:15:52.400 --> 01:15:55.310
Lifting this out would be better.

NOTE Confidence: 0.7831940875

01:15:55.310 --> 01:15:57.446
One fewer concept and no shadowing.

NOTE Confidence: 0.7831940875

01:15:57.450 --> 01:15:58.776
Let me let me suggest that.

NOTE Confidence: 0.860803765

01:16:01.660 --> 01:16:03.340
OK, so let me.

NOTE Confidence: 0.7950547

01:16:05.370 --> 01:16:07.860
Shifts like this excuse me.

NOTE Confidence: 0.386909604

01:16:12.640 --> 01:16:17.855
OK, Umm. This comment armies

NOTE Confidence: 0.386909604

01:16:17.855 --> 01:16:21.110
thing they were go. Umm?

NOTE Confidence: 0.45634812775

01:16:23.470 --> 01:16:27.630
Actually, Umm, this uh.

NOTE Confidence: 0.45634812775

01:16:27.630 --> 01:16:30.549
I'm gonna say I'm gonna say duplicates.

NOTE Confidence: 0.45634812775

01:16:30.550 --> 01:16:31.984
This appears to.

NOTE Confidence: 0.45634812775

01:16:31.984 --> 01:16:34.626
Trump actually said 100% sure

NOTE Confidence: 0.45634812775

01:16:34.626 --> 01:16:37.530
this appears to duplicate.

NOTE Confidence: 0.45634812775

01:16:37.530 --> 01:16:41.490
I am the helper in compare.

NOTE Confidence: 0.633184351428571

01:16:44.610 --> 01:16:48.439
Come play yeah it's concept canister order.

NOTE Confidence: 0.633184351428571

01:16:48.440 --> 01:16:50.216
It's testing the stud function object.

NOTE Confidence: 0.633184351428571

01:16:50.220 --> 01:16:54.220
Yeah, looks exactly the same, UM.

NOTE Confidence: 0.633184351428571

01:16:54.220 --> 01:16:58.119
If they are indeed exactly the same,

NOTE Confidence: 0.633184351428571

01:16:58.120 --> 01:17:03.132
UM, testing whether we can use the

NOTE Confidence: 0.633184351428571

01:17:03.132 --> 01:17:06.156
standard function object. Uh, uh,

NOTE Confidence: 0.633184351428571

01:17:06.156 --> 01:17:10.390
lifted out of let me copy the name space.

NOTE Confidence: 0.4910703675

01:17:13.900 --> 01:17:19.688
I recommend extracting the.

NOTE Confidence: 0.4910703675

01:17:19.690 --> 01:17:24.910
Helper in compare out of.

NOTE Confidence: 0.4910703675

01:17:24.910 --> 01:17:27.120
In space, compare stronger fall

NOTE Confidence: 0.4910703675

01:17:27.120 --> 01:17:30.329
back so it can be used here.

NOTE Confidence: 0.4910703675

01:17:30.330 --> 01:17:35.070
This would avoid, UM, any UM,

NOTE Confidence: 0.4910703675

01:17:35.070 --> 01:17:40.098
quasi shadowing and confusion.

NOTE Confidence: 0.4910703675

01:17:40.100 --> 01:17:44.240
OK does it look ohh and I need to say

NOTE Confidence: 0.4910703675

01:17:44.240 --> 01:17:49.340
occurs for the following concepts too.

NOTE Confidence: 0.4910703675

01:17:49.340 --> 01:17:55.962
I had nested the helper concepts in

NOTE Confidence: 0.4910703675

01:17:55.962 --> 01:18:01.579
their namespaces since I didn't expect.

NOTE Confidence: 0.4910703675

01:18:01.580 --> 01:18:06.500
Any further use of? Them.

NOTE Confidence: 0.7599394

01:18:12.300 --> 01:18:20.570
But didn't intend to prevent wider use, OK.

NOTE Confidence: 0.7599394

01:18:20.570 --> 01:18:21.900
This appears to duplicate the

NOTE Confidence: 0.7599394

01:18:21.900 --> 01:18:22.964
helper and compare council.

NOTE Confidence: 0.7599394

01:18:22.970 --> 01:18:24.951
Can strong order if they are indeed

NOTE Confidence: 0.7599394

01:18:24.951 --> 01:18:26.409
exactly the same, testing whether we

NOTE Confidence: 0.7599394

01:18:26.409 --> 01:18:27.627
can use the standard function object,

NOTE Confidence: 0.7599394

01:18:27.630 --> 01:18:29.064
I recommend extracting the helper and

NOTE Confidence: 0.7599394

01:18:29.064 --> 01:18:30.428
compare out of namespace compare string

NOTE Confidence: 0.7599394

01:18:30.428 --> 01:18:32.140
order fall back so it can be used here.

NOTE Confidence: 0.7599394

01:18:32.140 --> 01:18:33.708
This would avoid any

NOTE Confidence: 0.7599394

01:18:33.708 --> 01:18:34.884
quasi shadowing confusion.

NOTE Confidence: 0.7599394

01:18:34.890 --> 01:18:36.846
Occurs for the following concepts too.

NOTE Confidence: 0.7599394

01:18:36.850 --> 01:18:38.296
I had nested the helper concepts

NOTE Confidence: 0.7599394

01:18:38.296 --> 01:18:39.721
in their namespaces since I didn't

NOTE Confidence: 0.7599394

01:18:39.721 --> 01:18:40.969
expect any further use of them,

NOTE Confidence: 0.7599394

01:18:40.970 --> 01:18:44.834
but didn't intend to prevent wider use.

NOTE Confidence: 0.7599394

01:18:44.840 --> 01:18:50.066
OK. Can we quarter can partial order?

NOTE Confidence: 0.7599394

01:18:50.070 --> 01:18:52.563
OK, getting close to the end of X utility.

NOTE Confidence: 0.7599394

01:18:52.570 --> 01:18:54.906
Let me check real quick around line 5000.

NOTE Confidence: 0.7599394

01:18:54.910 --> 01:18:56.710
We are almost at the end.

NOTE Confidence: 0.7599394

01:18:56.710 --> 01:18:58.168
Yeah, we're almost at the end.

NOTE Confidence: 0.7599394

01:18:58.170 --> 01:18:59.925
OK, I'll get to the end of this uh,

NOTE Confidence: 0.7599394

01:18:59.930 --> 01:19:02.792
file and we'll call this a

NOTE Confidence: 0.7599394

01:19:02.792 --> 01:19:04.422
review or video review.

NOTE Confidence: 0.7599394

01:19:04.422 --> 01:19:07.110
We're still more files to look at.

NOTE Confidence: 0.7599394

01:19:07.110 --> 01:19:09.665
OK, here's the end of the concepts.

NOTE Confidence: 0.7599394

01:19:09.670 --> 01:19:10.864
OK, let's see.

NOTE Confidence: 0.7599394

01:19:10.864 --> 01:19:12.854
So this all added no.

NOTE Confidence: 0.7599394

01:19:12.860 --> 01:19:16.350
We're going back to deletions.

NOTE Confidence: 0.7599394

01:19:16.350 --> 01:19:20.985
Template on L1 and L2 LEX compare 3 way

NOTE Confidence: 0.7599394

01:19:20.985 --> 01:19:25.430
mencom classify comp UM given L1L2 and the

NOTE Confidence: 0.7599394

01:19:25.430 --> 01:19:27.790
strong order customization point object.

NOTE Confidence: 0.7599394

01:19:27.790 --> 01:19:30.695
This is the type of the stood

NOTE Confidence: 0.7599394

01:19:30.695 --> 01:19:32.600
strong order function object.

NOTE Confidence: 0.7599394

01:19:32.600 --> 01:19:35.000
Using comp UM, so we are.

NOTE Confidence: 0.7599394

01:19:35.000 --> 01:19:36.850
If we're given strong order.

NOTE Confidence: 0.7599394

01:19:36.850 --> 01:19:38.494
We're going to ask,

NOTE Confidence: 0.7599394

01:19:38.494 --> 01:19:40.960
can we lux compare mencom classify

NOTE Confidence: 0.7599394

01:19:41.045 --> 01:19:44.762
elements L M1 and M2 and can we strong

NOTE Confidence: 0.7599394

01:19:44.762 --> 01:19:47.428
order LM1LM2 meaning can we call this

NOTE Confidence: 0.7599394

01:19:47.428 --> 01:19:49.380
strong order function object on them?

NOTE Confidence: 0.7599394

01:19:49.380 --> 01:19:51.270
Then let's submit strong order CPO,

NOTE Confidence: 0.7599394

01:19:51.270 --> 01:19:53.940
otherwise void OK.

NOTE Confidence: 0.7599394

01:19:53.940 --> 01:19:56.980
For week order same question,

NOTE Confidence: 0.7599394

01:19:56.980 --> 01:19:58.448
can we use mencom?

NOTE Confidence: 0.7599394

01:19:58.448 --> 01:20:00.283
Can we weak order here?

NOTE Confidence: 0.7599394

01:20:00.290 --> 01:20:02.372
I'm looking for copy paste those

NOTE Confidence: 0.7599394

01:20:02.372 --> 01:20:04.550
if so admit week order CPO.

NOTE Confidence: 0.7599394

01:20:04.550 --> 01:20:06.570
And finally, for partial order,

NOTE Confidence: 0.7599394

01:20:06.570 --> 01:20:08.418
still can remember comp one and

NOTE Confidence: 0.7599394

01:20:08.418 --> 01:20:11.270
two can we partial order L1L2?

NOTE Confidence: 0.7599394

01:20:11.270 --> 01:20:12.610
If so, in partial order?

NOTE Confidence: 0.7599394

01:20:12.610 --> 01:20:13.340
CPO,

NOTE Confidence: 0.7599394

01:20:13.340 --> 01:20:14.070
OK?

NOTE Confidence: 0.674927585386364

01:20:20.730 --> 01:20:23.358
Now for class it one it two and comp

NOTE Confidence: 0.674927585386364

01:20:23.358 --> 01:20:26.139
the LUX compare 3 way McComb classify

NOTE Confidence: 0.674927585386364

01:20:26.139 --> 01:20:28.770
given 2 iterators and a comparator.

NOTE Confidence: 0.674927585386364

01:20:28.770 --> 01:20:31.569
We need X or you have one and two

NOTE Confidence: 0.674927585386364

01:20:31.569 --> 01:20:33.429
contiguous iterators and it one

NOTE Confidence: 0.674927585386364

01:20:33.429 --> 01:20:36.065
is not an iterator volatile and it

NOTE Confidence: 0.674927585386364

01:20:36.065 --> 01:20:38.189
too is not an iterator volatile.

NOTE Confidence: 0.674927585386364

01:20:38.190 --> 01:20:40.794
And that's the case.

NOTE Confidence: 0.674927585386364

01:20:40.794 --> 01:20:42.747
Then let's report.

NOTE Confidence: 0.674927585386364

01:20:42.750 --> 01:20:45.326
The comp returned by this I see

NOTE Confidence: 0.674927585386364

01:20:45.326 --> 01:20:47.634
the same quasi shadowing that we

NOTE Confidence: 0.674927585386364

01:20:47.634 --> 01:20:49.048
might be able to avoid with CMP,

NOTE Confidence: 0.674927585386364

01:20:49.050 --> 01:20:50.807
so I'm going to ask for that.

NOTE Confidence: 0.674927585386364

01:20:50.810 --> 01:20:51.600
Let's ask.

NOTE Confidence: 0.674927585386364

01:20:51.600 --> 01:20:53.970
Let's compare 3 way mencom classify

NOTE Confidence: 0.674927585386364

01:20:53.970 --> 01:20:57.005
comp give the inter value T from it one

NOTE Confidence: 0.674927585386364

01:20:57.005 --> 01:20:59.396
better value T from it two and then comp.

NOTE Confidence: 0.674927585386364

01:20:59.396 --> 01:21:01.101
OK here I'm trying to catch cases where

NOTE Confidence: 0.674927585386364

01:21:01.101 --> 01:21:02.547
we accidentally say like it won't.

NOTE Confidence: 0.674927585386364

01:21:02.550 --> 01:21:03.930
It won twice,

NOTE Confidence: 0.674927585386364

01:21:03.930 --> 01:21:05.770
which would be catastrophic

NOTE Confidence: 0.674927585386364

01:21:05.770 --> 01:21:08.499
and missed in a lot of cases.

NOTE Confidence: 0.674927585386364

01:21:08.500 --> 01:21:09.460
OK, so this is all good,

NOTE Confidence: 0.674927585386364

01:21:09.460 --> 01:21:11.208
except I'm quasi shadowing,

NOTE Confidence: 0.674927585386364

01:21:11.208 --> 01:21:13.393
so I'll ask for that,

NOTE Confidence: 0.674927585386364

01:21:13.400 --> 01:21:14.130
let's see.

NOTE Confidence: 0.772789386

01:21:16.180 --> 01:21:20.080
Uhm, similar issue as before.

NOTE Confidence: 0.772789386

01:21:20.080 --> 01:21:24.539
UM, can we use class under CMP

NOTE Confidence: 0.772789386

01:21:24.539 --> 01:21:29.420
to avoid the quasi shadowing of?

NOTE Confidence: 0.811696046666667

01:21:37.790 --> 01:21:38.810
I just avoid.

NOTE Confidence: 0.465608099333333

01:21:40.840 --> 01:21:43.030
Quasi shadowing here.

NOTE Confidence: 0.490505768571429

01:21:46.720 --> 01:21:47.995
Glassdoor, CMP, Yep,

NOTE Confidence: 0.490505768571429

01:21:47.995 --> 01:21:50.250
that'd be nice instinct, OK?

NOTE Confidence: 0.685592534875

01:21:52.620 --> 01:21:55.748
And now the couple of function for users.

NOTE Confidence: 0.685592534875

01:21:55.750 --> 01:21:57.440
We're adding couple of accounts

NOTE Confidence: 0.685592534875

01:21:57.440 --> 01:22:00.449
to the iterators, all of them.

NOTE Confidence: 0.685592534875

01:22:00.450 --> 01:22:02.826
We already were not constant dying.

NOTE Confidence: 0.685592534875

01:22:02.830 --> 01:22:04.198
You first wanted you first two.

NOTE Confidence: 0.685592534875

01:22:04.200 --> 01:22:05.400
There's no change there.

NOTE Confidence: 0.84737695125

01:22:08.840 --> 01:22:10.440
All of this is now being lifted up.

NOTE Confidence: 0.84737695125

01:22:10.440 --> 01:22:12.540
That's being extracted into those helpers.

NOTE Confidence: 0.84737695125

01:22:12.540 --> 01:22:16.833
Umm, so we can ask here the mencom pred.

NOTE Confidence: 0.84737695125

01:22:16.840 --> 01:22:19.661
Let's call Alex compare 3 way McComb

NOTE Confidence: 0.84737695125

01:22:19.661 --> 01:22:22.203
classify the deco type of you first

NOTE Confidence: 0.84737695125

01:22:22.203 --> 01:22:25.180
one and you first two and the CMP.

NOTE Confidence: 0.878008597

01:22:27.240 --> 01:22:28.664
If it's not void,

NOTE Confidence: 0.878008597

01:22:28.664 --> 01:22:30.800
then we're eligible at compile time.

NOTE Confidence: 0.878008597

01:22:30.800 --> 01:22:32.624
We need to see if we're

NOTE Confidence: 0.878008597

01:22:32.624 --> 01:22:33.840
eligible at runtime here.

NOTE Confidence: 0.878008597

01:22:33.840 --> 01:22:34.890
The three way is always see

NOTE Confidence: 0.878008597

01:22:34.890 --> 01:22:36.319
us 20 so we don't need any.

NOTE Confidence: 0.878008597

01:22:36.320 --> 01:22:38.470
If CX-20 stuff around here.

NOTE Confidence: 0.93209296

01:22:43.640 --> 01:22:44.270
OK.

NOTE Confidence: 0.639052524428571

01:22:49.110 --> 01:22:51.318
It's not constant evaluated.

NOTE Confidence: 0.639052524428571

01:22:51.318 --> 01:22:52.974
Then call mencom.

NOTE Confidence: 0.639052524428571

01:22:52.980 --> 01:22:55.626
If they end up being the same.

NOTE Confidence: 0.639052524428571

01:22:55.630 --> 01:22:58.336
Then we need to compare the

NOTE Confidence: 0.639052524428571

01:22:58.336 --> 01:23:01.060
lengths with the MEMC compared.

NOTE Confidence: 0.639052524428571

01:23:01.060 --> 01:23:04.945
Otherwise compare against. Zero,

NOTE Confidence: 0.639052524428571

01:23:04.945 --> 01:23:07.305
so this is not handling the greater thing.

NOTE Confidence: 0.639052524428571

01:23:07.310 --> 01:23:08.696
This would be this is very

NOTE Confidence: 0.639052524428571

01:23:08.696 --> 01:23:10.034
different from the, UM, plain.

NOTE Confidence: 0.639052524428571

01:23:10.034 --> 01:23:11.966
Let's compare where we never wanted

NOTE Confidence: 0.639052524428571

01:23:11.966 --> 01:23:14.748
to use the pred predicate that we

NOTE Confidence: 0.639052524428571

01:23:14.748 --> 01:23:16.404
admitted to our metaprogramming

NOTE Confidence: 0.639052524428571

01:23:16.404 --> 01:23:18.147
machinery on the links here.

NOTE Confidence: 0.639052524428571

01:23:18.147 --> 01:23:21.369
Umm, the pred can't be greater,

NOTE Confidence: 0.639052524428571

01:23:21.370 --> 01:23:22.352
or whatever.

NOTE Confidence: 0.639052524428571

01:23:22.352 --> 01:23:24.316
It can only be.

NOTE Confidence: 0.639052524428571

01:23:24.320 --> 01:23:27.334
Strong order, weak order or partial order.

NOTE Confidence: 0.639052524428571

01:23:27.334 --> 01:23:31.080
Do I believe that it can be user defined?

NOTE Confidence: 0.639052524428571

01:23:31.080 --> 01:23:31.534
That's interesting,

NOTE Confidence: 0.639052524428571

01:23:31.534 --> 01:23:33.123
I'm gonna need to double check that.

NOTE Confidence: 0.794883293571428

01:23:37.690 --> 01:23:38.542
That's extremely interesting.

NOTE Confidence: 0.794883293571428

01:23:38.542 --> 01:23:40.246
What if it's a user defined

NOTE Confidence: 0.794883293571428

01:23:40.246 --> 01:23:41.580
comparator that reverses the sense?

NOTE Confidence: 0.794883293571428

01:23:41.580 --> 01:23:44.079
I'm going to need to check that.

NOTE Confidence: 0.794883293571428

01:23:44.080 --> 01:23:46.384
This part is fine.

NOTE Confidence: 0.794883293571428

01:23:46.384 --> 01:23:52.210
You compare against zero. OK, Umm.

NOTE Confidence: 0.794883293571428

01:23:52.210 --> 01:23:53.554
This one's really interesting,

NOTE Confidence: 0.794883293571428

01:23:53.554 --> 01:23:57.388
uh, let me. Let's compare 3 way.

NOTE Confidence: 0.794883293571428

01:23:57.390 --> 01:23:58.290
We don't have any.

NOTE Confidence: 0.794883293571428

01:23:58.290 --> 01:23:59.899
We don't have any test coverage for

NOTE Confidence: 0.794883293571428

01:23:59.899 --> 01:24:02.960
custom uh, spaceship comparators. Umm?

NOTE Confidence: 0.4730766992

01:24:10.710 --> 01:24:13.040
Three Ohh compare 3 way.

NOTE Confidence: 0.353291796666667

01:24:20.890 --> 01:24:22.618
Define clause 25.

NOTE Confidence: 0.7206547

01:24:46.360 --> 01:24:52.618
Ohh OK, I think I think we're correct so.

NOTE Confidence: 0.7206547

01:24:52.620 --> 01:24:54.797
This says in sort of mathematical terms,

NOTE Confidence: 0.7206547

01:24:54.800 --> 01:24:57.060
find the smallest integer that

NOTE Confidence: 0.7206547

01:24:57.060 --> 01:24:58.348
you see different elements,

NOTE Confidence: 0.7206547

01:24:58.348 --> 01:25:00.660
so the first elements that don't match.

NOTE Confidence: 0.7206547

01:25:00.660 --> 01:25:02.324
If you find 1 where it's not zero,

NOTE Confidence: 0.7206547

01:25:02.330 --> 01:25:05.308
you just return it. If they all

NOTE Confidence: 0.7206547

01:25:05.308 --> 01:25:07.050
end up happening to be equal to 0,

NOTE Confidence: 0.7206547

01:25:07.050 --> 01:25:10.530
meaning they're all equivalent, then.

NOTE Confidence: 0.7206547

01:25:10.530 --> 01:25:15.018
Uh, ohh spaceship eyes always spaceship.

NOTE Confidence: 0.964173718571429

01:25:17.050 --> 01:25:18.975
OK, so this is very much like.

NOTE Confidence: 0.92212529

01:25:23.640 --> 01:25:25.120
This is exactly like.

NOTE Confidence: 0.645477678333333

01:25:27.520 --> 01:25:29.680
The stand the the classic one

NOTE Confidence: 0.645477678333333

01:25:29.680 --> 01:25:32.039
where the classical one says if the

NOTE Confidence: 0.645477678333333

01:25:32.039 --> 01:25:33.539
comparison resolves before the end,

NOTE Confidence: 0.645477678333333

01:25:33.540 --> 01:25:35.538
return whatever the comparator set so

NOTE Confidence: 0.645477678333333

01:25:35.538 --> 01:25:37.778
stood last at greater user last user,

NOTE Confidence: 0.645477678333333

01:25:37.780 --> 01:25:40.180
greater whatever.

NOTE Confidence: 0.645477678333333

01:25:40.180 --> 01:25:41.580
You return that, but if they end

NOTE Confidence: 0.645477678333333

01:25:41.580 --> 01:25:43.119
up all being equivalent elements,

NOTE Confidence: 0.645477678333333

01:25:43.120 --> 01:25:46.151
then the shorter sequence is considered less

NOTE Confidence: 0.645477678333333

01:25:46.151 --> 01:25:48.482
than lexicographically less than the greater.

NOTE Confidence: 0.645477678333333

01:25:48.482 --> 01:25:51.856
You don't use the user comparator there.

NOTE Confidence: 0.645477678333333

01:25:51.860 --> 01:25:54.674
This here says let E of N.

NOTE Confidence: 0.645477678333333

01:25:54.680 --> 01:25:57.032
We use the user comparator on the

NOTE Confidence: 0.645477678333333

01:25:57.032 --> 01:25:59.080
NTH elements of the sequences.

NOTE Confidence: 0.645477678333333

01:25:59.080 --> 01:26:01.705
UM, if the comparison if

NOTE Confidence: 0.645477678333333

01:26:01.705 --> 01:26:03.805
there are different elements.

NOTE Confidence: 0.645477678333333

01:26:03.810 --> 01:26:06.148
That we encounter return the user comparison.

NOTE Confidence: 0.645477678333333

01:26:06.150 --> 01:26:08.430
If you don't then you ignore

NOTE Confidence: 0.645477678333333

01:26:08.430 --> 01:26:09.570
the user comparison.

NOTE Confidence: 0.645477678333333

01:26:09.570 --> 01:26:13.278
You directly open spaceship.

NOTE Confidence: 0.645477678333333

01:26:13.278 --> 01:26:17.913
The lengths of these so.

NOTE Confidence: 0.645477678333333

01:26:17.920 --> 01:26:20.380
The user comparison could be returning

NOTE Confidence: 0.645477678333333

01:26:20.380 --> 01:26:22.786
a strong ordering of, you know,

NOTE Confidence: 0.645477678333333

01:26:22.786 --> 01:26:24.318
lesser greater that's reversed.

NOTE Confidence: 0.645477678333333

01:26:24.320 --> 01:26:26.714
It could be doing like a stood

NOTE Confidence: 0.645477678333333

01:26:26.714 --> 01:26:27.740
greater type comparison,

NOTE Confidence: 0.645477678333333

01:26:27.740 --> 01:26:30.296
but you are not supposed to

NOTE Confidence: 0.645477678333333

01:26:30.296 --> 01:26:31.940
use it on this case.

NOTE Confidence: 0.645477678333333

01:26:31.940 --> 01:26:33.380
So this says that we've got a bug.

NOTE Confidence: 0.645477678333333

01:26:33.380 --> 01:26:34.956
We need test coverage for it as well,

NOTE Confidence: 0.645477678333333

01:26:34.960 --> 01:26:35.380
OK?

NOTE Confidence: 0.756526797111111

01:26:41.580 --> 01:26:43.925
And I guess I noticed this because

NOTE Confidence: 0.756526797111111

01:26:43.925 --> 01:26:46.338
this pattern of using the mencom Pride

NOTE Confidence: 0.756526797111111

01:26:46.338 --> 01:26:48.885
twice did not occur for the stood

NOTE Confidence: 0.756526797111111

01:26:48.885 --> 01:26:51.699
lexicographical compare to the classic one.

NOTE Confidence: 0.756526797111111

01:26:51.700 --> 01:26:53.604
So even though it does look like it's

NOTE Confidence: 0.756526797111111

01:26:53.604 --> 01:26:55.030
consistent here that we're converting

NOTE Confidence: 0.756526797111111

01:26:55.030 --> 01:26:56.952
these two spaceships over to the

NOTE Confidence: 0.756526797111111

01:26:56.952 --> 01:26:58.796
mencom pred machinery, that difference

NOTE Confidence: 0.756526797111111

01:26:58.796 --> 01:27:01.512
in pattern is what clued me in.

NOTE Confidence: 0.756526797111111

01:27:01.520 --> 01:27:03.938
This is not what we want.

NOTE Confidence: 0.756526797111111

01:27:03.940 --> 01:27:05.560
OK, so where is the bug?

NOTE Confidence: 0.756526797111111

01:27:05.560 --> 01:27:08.818
I think the bug is with the new ones.

NOTE Confidence: 0.756526797111111

01:27:08.820 --> 01:27:13.440
Because if Mencom finds a nonzero answer,

NOTE Confidence: 0.756526797111111

01:27:13.440 --> 01:27:17.400
we found different elements.

NOTE Confidence: 0.756526797111111

01:27:17.400 --> 01:27:19.230
So. Posted here.

NOTE Confidence: 0.816720048

01:27:24.960 --> 01:27:26.865
Actually, is this an issue, are we, uh?

NOTE Confidence: 0.816720048

01:27:26.865 --> 01:27:29.279
This may not be an issue. This we only

NOTE Confidence: 0.816720048

01:27:29.279 --> 01:27:31.397
activate this for ones we recognize.

NOTE Confidence: 0.866081235

01:27:33.550 --> 01:27:36.566
We only activate it for our strong order,

NOTE Confidence: 0.866081235

01:27:36.570 --> 01:27:38.290
weak order and partial order,

NOTE Confidence: 0.866081235

01:27:38.290 --> 01:27:40.354
not for user comparisons because we

NOTE Confidence: 0.866081235

01:27:40.354 --> 01:27:42.489
don't know what they're going to do,

NOTE Confidence: 0.866081235

01:27:42.490 --> 01:27:44.575
so we can't possibly call

NOTE Confidence: 0.866081235

01:27:44.575 --> 01:27:47.290
them come before them. Ah.

NOTE Confidence: 0.718663053333333

01:27:50.000 --> 01:27:54.360
So at most. At most this is

NOTE Confidence: 0.718663053333333

01:27:54.360 --> 01:27:55.360
unnecessarily generalized.

NOTE Confidence: 0.718663053333333

01:27:55.360 --> 01:27:56.256
I think I'm still going to ask

NOTE Confidence: 0.718663053333333

01:27:56.256 --> 01:27:57.214
for it to be changed because

NOTE Confidence: 0.718663053333333

01:27:57.214 --> 01:27:58.282
we can just say spaceship here.

NOTE Confidence: 0.577373174888889

01:28:03.010 --> 01:28:08.077
Yeah, it affects the ohh yeah oh it's Umm.

NOTE Confidence: 0.577373174888889

01:28:08.080 --> 01:28:09.706
Auto ohh we would convert the

NOTE Confidence: 0.577373174888889

01:28:09.706 --> 01:28:11.249
stronger to the weaker that's

NOTE Confidence: 0.577373174888889

01:28:11.249 --> 01:28:14.249
that's possible, right, yeah. Umm?

NOTE Confidence: 0.7610244

01:28:16.770 --> 01:28:18.706
It it it does. I think it does

NOTE Confidence: 0.7610244

01:28:18.706 --> 01:28:20.429
not affect observable behavior.

NOTE Confidence: 0.7610244

01:28:20.430 --> 01:28:22.810
UM, but for clarity I would prefer

NOTE Confidence: 0.7610244

01:28:22.810 --> 01:28:25.818
to see a direct use of spaceship.

NOTE Confidence: 0.7610244

01:28:25.820 --> 01:28:29.540
Umm, I'll put it like that.

NOTE Confidence: 0.7610244

01:28:29.540 --> 01:28:32.388
OK, and it's on the NUM ones because

NOTE Confidence: 0.7610244

01:28:32.388 --> 01:28:34.853
if answer is not zero then we should

NOTE Confidence: 0.7610244

01:28:34.853 --> 01:28:36.208
return whatever this returns this.

NOTE Confidence: 0.7610244

01:28:36.210 --> 01:28:39.297
This whole thing auto the whole thing

NOTE Confidence: 0.7610244

01:28:39.297 --> 01:28:41.460
is auto. Oh sorry, it's auto arrow,

NOTE Confidence: 0.7610244

01:28:41.460 --> 01:28:43.036
so we've already got the return type here.

NOTE Confidence: 0.7610244

01:28:43.040 --> 01:28:46.556
Yeah, I wanna see spaceship OK.

NOTE Confidence: 0.7610244

01:28:46.560 --> 01:28:48.770
I'm going to comment here.

NOTE Confidence: 0.7610244

01:28:48.770 --> 01:28:51.250
OK, Umm yeah, so horrible.

NOTE Confidence: 0.7610244

01:28:51.250 --> 01:28:54.015
Uh, it says paragraph three of I

NOTE Confidence: 0.7610244

01:28:54.015 --> 01:28:56.670
really need a bigger text box.

NOTE Confidence: 0.7610244

01:28:56.670 --> 01:28:58.722
I think big thoughts.

NOTE Confidence: 0.7610244

01:28:58.722 --> 01:29:00.590
Thank you, OK?

NOTE Confidence: 0.695821856666667

01:29:05.740 --> 01:29:08.603
And we're almost at time or slightly

NOTE Confidence: 0.695821856666667

01:29:08.603 --> 01:29:10.993
overtime WG 21 Dash and 4892.

NOTE Confidence: 0.695821856666667

01:29:10.993 --> 01:29:14.024
That number Umm I'll keep the section

NOTE Confidence: 0.695821856666667

01:29:14.024 --> 01:29:16.769
number in there for convenience.

NOTE Confidence: 0.695821856666667

01:29:16.770 --> 01:29:19.666
I'm not gonna bother with all the formatting.

NOTE Confidence: 0.795923438571428

01:29:26.520 --> 01:29:31.170
Chop this out so it's not distracting. That

NOTE Confidence: 0.901691329230769

01:29:33.180 --> 01:29:35.651
I guess I am a little picky

NOTE Confidence: 0.901691329230769

01:29:35.651 --> 01:29:38.218
and I'll put that in italics.

NOTE Confidence: 0.901691329230769

01:29:38.220 --> 01:29:41.060
Gonna put some metrics here.

NOTE Confidence: 0.901691329230769

01:29:41.060 --> 01:29:45.619
OK, uhm. Let's see, UM.

NOTE Confidence: 0.774868538333333

01:29:50.600 --> 01:29:55.046
Although I don't believe it actually

NOTE Confidence: 0.774868538333333

01:29:55.050 --> 01:29:59.870
summarize this. After some thought.

NOTE Confidence: 0.774868538333333

01:29:59.870 --> 01:30:04.208
I don't believe this affects correctness,

NOTE Confidence: 0.774868538333333

01:30:04.208 --> 01:30:09.794
UM, but I believe we should directly.

NOTE Confidence: 0.6358113248

01:30:12.450 --> 01:30:16.782
Spaceship. Uh, compare the.

NOTE Confidence: 0.6358113248

01:30:16.782 --> 01:30:23.280
Lengths here instead of using the.

NOTE Confidence: 0.6358113248

01:30:23.280 --> 01:30:28.440
Ma'am. Compared.

NOTE Confidence: 0.6358113248

01:30:28.440 --> 01:30:32.160
Returned by the Meta programming.

NOTE Confidence: 0.6358113248

01:30:32.160 --> 01:30:36.360
This will match the standard's

NOTE Confidence: 0.6358113248

01:30:36.360 --> 01:30:41.846
and the classic lexicographical

NOTE Confidence: 0.6358113248

01:30:41.846 --> 01:30:50.030
compare implementation more closely.

NOTE Confidence: 0.6358113248

01:30:50.030 --> 01:30:52.886
For the classic imple,

NOTE Confidence: 0.6358113248

01:30:52.886 --> 01:30:56.959
this is critical, as the UM.

NOTE Confidence: 0.730410974444444

01:30:59.110 --> 01:31:02.398
Meta programmed machinery is

NOTE Confidence: 0.730410974444444

01:31:02.398 --> 01:31:06.508
capable of reversing the ordering,

NOTE Confidence: 0.730410974444444

01:31:06.510 --> 01:31:11.974
which we don't want to do for the.

NOTE Confidence: 0.730410974444444

01:31:11.980 --> 01:31:17.680
Uh, links. Of equal prefix sequences.

NOTE Confidence: 0.730410974444444

01:31:17.680 --> 01:31:21.418
UM for the UM, 3 way,

NOTE Confidence: 0.730410974444444

01:31:21.420 --> 01:31:27.484
UM imple this is cosmetic as we activate

NOTE Confidence: 0.730410974444444

01:31:27.484 --> 01:31:32.069
the optimization only for strong order.

NOTE Confidence: 0.730410974444444

01:31:32.070 --> 01:31:34.238
I'm not gonna bother money spacing this week.

NOTE Confidence: 0.730410974444444

01:31:34.240 --> 01:31:39.357
Order a partial order, none of which.

NOTE Confidence: 0.730410974444444

01:31:39.360 --> 01:31:46.339
Reverse things like UM stood greater due, OK?

NOTE Confidence: 0.730410974444444

01:31:46.339 --> 01:31:49.668
Lot of words. 2021 and 49.

NOTE Confidence: 0.730410974444444

01:31:49.668 --> 01:31:50.916
Two out. Three way.

NOTE Confidence: 0.730410974444444

01:31:50.916 --> 01:31:52.656
Three returns or E1 minus

NOTE Confidence: 0.730410974444444

01:31:52.656 --> 01:31:54.390
P1 spaceship E 2 - B two.

NOTE Confidence: 0.730410974444444

01:31:54.390 --> 01:31:55.415
If no such anger exists.

NOTE Confidence: 0.730410974444444

01:31:55.420 --> 01:31:56.164
After some thought,

NOTE Confidence: 0.730410974444444

01:31:56.164 --> 01:31:57.652
I don't believe this affects darkness.

NOTE Confidence: 0.730410974444444

01:31:57.660 --> 01:31:59.110
I believe we should directly.

NOTE Confidence: 0.676280422

01:32:02.240 --> 01:32:03.450
You say, but for clarity.

NOTE Confidence: 0.687131418888889

01:32:05.800 --> 01:32:06.406
After some thought,

NOTE Confidence: 0.687131418888889

01:32:06.406 --> 01:32:07.618
I don't believe this affects correctness,

NOTE Confidence: 0.687131418888889

01:32:07.620 --> 01:32:08.820
but for clarity I believe we

NOTE Confidence: 0.687131418888889

01:32:08.820 --> 01:32:09.620
should directly spaceship compare

NOTE Confidence: 0.687131418888889

01:32:09.656 --> 01:32:10.688
the links instead of using them.

NOTE Confidence: 0.687131418888889

01:32:10.690 --> 01:32:11.875
Period returned by the minute

NOTE Confidence: 0.687131418888889

01:32:11.875 --> 01:32:13.060
programming this match the standard

NOTE Confidence: 0.687131418888889

01:32:13.106 --> 01:32:14.496
ease and the classic lexicographical

NOTE Confidence: 0.687131418888889

01:32:14.496 --> 01:32:15.330
compare implementation will

NOTE Confidence: 0.687131418888889

01:32:15.330 --> 01:32:16.618
closely for the classic simple,

NOTE Confidence: 0.687131418888889

01:32:16.620 --> 01:32:17.448
This is critical,

NOTE Confidence: 0.687131418888889

01:32:17.448 --> 01:32:18.828
as the metaprogramming machinery capable

NOTE Confidence: 0.687131418888889

01:32:18.828 --> 01:32:20.322
of reversing the ordering which we don't

NOTE Confidence: 0.687131418888889

01:32:20.322 --> 01:32:21.937
want to do for the links that equal

NOTE Confidence: 0.687131418888889

01:32:21.937 --> 01:32:23.519
prefix sequences for the three way input.

NOTE Confidence: 0.687131418888889

01:32:23.520 --> 01:32:25.208
This is cosmetic as we activate the operation

NOTE Confidence: 0.687131418888889

01:32:25.208 --> 01:32:27.077
only for strong order recorder partial order.

NOTE Confidence: 0.687131418888889

01:32:27.080 --> 01:32:28.852
Another way to reverse

NOTE Confidence: 0.687131418888889

01:32:28.852 --> 01:32:30.624
things like Streater do.

NOTE Confidence: 0.687131418888889

01:32:30.630 --> 01:32:34.218
OK. And then add some top of

NOTE Confidence: 0.687131418888889

01:32:34.218 --> 01:32:35.800
accounts and we're all good.

NOTE Confidence: 0.687131418888889

01:32:35.800 --> 01:32:41.090
Uh, no ranges stuff here.

NOTE Confidence: 0.687131418888889

01:32:41.090 --> 01:32:44.690
Then I see OK that is the end of X utility.

NOTE Confidence: 0.687131418888889

01:32:44.690 --> 01:32:47.618
We can mark that as viewed.

NOTE Confidence: 0.687131418888889

01:32:47.620 --> 01:32:49.706
OK, so let me alt click and

NOTE Confidence: 0.687131418888889

01:32:49.706 --> 01:32:51.630
see what test code we have.

NOTE Confidence: 0.687131418888889

01:32:51.630 --> 01:32:53.394
So you've got all the test code.

NOTE Confidence: 0.687131418888889

01:32:53.400 --> 01:32:55.317
Only thing I had looked at was test list.

NOTE Confidence: 0.826465922222222

01:32:57.600 --> 01:33:00.160
OK, most of it is new tasks or

NOTE Confidence: 0.826465922222222

01:33:00.160 --> 01:33:02.360
sorry it's these decomposed tests.

NOTE Confidence: 0.826465922222222

01:33:02.360 --> 01:33:04.948
Some new, some decomposed. OK, uh,

NOTE Confidence: 0.826465922222222

01:33:04.948 --> 01:33:08.479
I will go ahead and submit this review.

NOTE Confidence: 0.826465922222222

01:33:08.480 --> 01:33:13.608
I'm thanks Part 2 UM.

NOTE Confidence: 0.826465922222222

01:33:13.610 --> 01:33:21.024
Have the thanks, uh, viewed this in Part 2.

NOTE Confidence: 0.826465922222222

01:33:21.024 --> 01:33:26.140
Of the video review UM.

NOTE Confidence: 0.826465922222222

01:33:26.140 --> 01:33:29.964
Looked at the rest of U MX utility,

NOTE Confidence: 0.826465922222222

01:33:29.970 --> 01:33:35.050
UM still need to review the test. Code.

NOTE Confidence: 0.97783864

01:33:38.350 --> 01:33:38.810
OK.

NOTE Confidence: 0.25129265

01:33:40.830 --> 01:33:41.380
Cut.

NOTE Confidence: 0.865302578

01:33:49.130 --> 01:33:51.760
OK so I asked for.

NOTE Confidence: 0.865302578

01:33:51.760 --> 01:33:53.545
Come and change about the volatility because

NOTE Confidence: 0.865302578

01:33:53.545 --> 01:33:55.886
I was a little bit confused about that.

NOTE Confidence: 0.865302578

01:33:55.890 --> 01:33:57.930
The renaming that I don't have

NOTE Confidence: 0.865302578

01:33:57.930 --> 01:33:59.874
any good suggestions for, uh,

NOTE Confidence: 0.865302578

01:33:59.874 --> 01:34:02.210
the inline that's cosmetic?

NOTE Confidence: 0.865302578

01:34:02.210 --> 01:34:03.450
Uh, avoiding the quasar,

NOTE Confidence: 0.865302578

01:34:03.450 --> 01:34:04.690
shadowing with under score,

NOTE Confidence: 0.865302578

01:34:04.690 --> 01:34:06.565
prepared same with under score

NOTE Confidence: 0.865302578

01:34:06.565 --> 01:34:08.440
comp elsewhere and either stood

NOTE Confidence: 0.865302578

01:34:08.507 --> 01:34:10.805
qualifying this or just unifying them.

NOTE Confidence: 0.865302578

01:34:10.810 --> 01:34:13.466
And I think it should actually be unified.

NOTE Confidence: 0.865302578

01:34:13.470 --> 01:34:15.366
Uh, the comp as I mentioned and then

NOTE Confidence: 0.865302578

01:34:15.366 --> 01:34:17.190
the final thing with the spaceship.

NOTE Confidence: 0.865302578

01:34:17.190 --> 01:34:19.565
So all cosmetic stuff slash

NOTE Confidence: 0.865302578

01:34:19.565 --> 01:34:21.465
some clarity for naming?

NOTE Confidence: 0.865302578

01:34:21.470 --> 01:34:23.426
Uh, but really no correctness concern.

NOTE Confidence: 0.865302578

01:34:23.430 --> 01:34:25.695
So this is looking extremely

NOTE Confidence: 0.865302578

01:34:25.695 --> 01:34:27.734
good and I think we're just gonna

NOTE Confidence: 0.865302578

01:34:27.734 --> 01:34:29.690
need to look at the test code.

NOTE Confidence: 0.865302578

01:34:29.690 --> 01:34:31.916
Ohh, looks like Casey has also reviewed.

NOTE Confidence: 0.874288998888889

01:34:34.040 --> 01:34:36.266
This can fail in the presence

NOTE Confidence: 0.874288998888889

01:34:36.266 --> 01:34:37.379
of multiple inheritance,

NOTE Confidence: 0.874288998888889

01:34:37.380 --> 01:34:39.252
since the point of base in point Dr

NOTE Confidence: 0.874288998888889

01:34:39.252 --> 01:34:41.169
can be equal but have differing.

NOTE Confidence: 0.874288998888889

01:34:41.170 --> 01:34:43.360
Bit patterns. Is that true for

NOTE Confidence: 0.874288998888889

01:34:43.360 --> 01:34:44.455
is pointer interconvertible.

NOTE Confidence: 0.730980382857143

01:34:47.020 --> 01:34:48.679
I thought that's what is the interview.

NOTE Confidence: 0.691098311

01:34:51.240 --> 01:34:52.108
This is a user.

NOTE Confidence: 0.691098311

01:34:52.108 --> 01:34:53.410
This is a library to find.

NOTE Confidence: 0.691098311

01:34:53.410 --> 01:34:54.635
This is why Adam Bussiere is defining,

NOTE Confidence: 0.691098311

01:34:54.640 --> 01:34:57.080
but he uses his pointer

NOTE Confidence: 0.691098311

01:34:57.080 --> 01:34:59.070
interconvertible base of never mind.

NOTE Confidence: 0.94933563

01:35:01.090 --> 01:35:03.400
Yeah. But that's a good point.

NOTE Confidence: 0.94933563

01:35:03.400 --> 01:35:04.396
We should. We should have a.

NOTE Confidence: 0.94933563

01:35:04.400 --> 01:35:08.580
We should have a test. UM, ideally.

NOTE Confidence: 0.94933563

01:35:08.580 --> 01:35:09.810
I can add a comment here.

NOTE Confidence: 0.94933563

01:35:09.810 --> 01:35:12.156
I believe that the use of,

NOTE Confidence: 0.94933563

01:35:12.160 --> 01:35:15.796
uh, I guess yeah, thank you.

NOTE Confidence: 0.94933563

01:35:15.800 --> 01:35:17.220
Yeah, I can't spell it.

NOTE Confidence: 0.94933563

01:35:17.220 --> 01:35:21.770
I think it's is pointer

NOTE Confidence: 0.94933563

01:35:21.770 --> 01:35:24.130
interconvertible big.

NOTE Confidence: 0.94933563

01:35:24.130 --> 01:35:28.740
This puppy there we go, yeah. Umm?

NOTE Confidence: 0.726983133333333

01:35:31.170 --> 01:35:33.501
Handles this scenario,

NOTE Confidence: 0.726983133333333

01:35:33.501 --> 01:35:38.163
but we should be sure to.

NOTE Confidence: 0.726983133333333

01:35:38.170 --> 01:35:41.398
We should make sure.

NOTE Confidence: 0.726983133333333

01:35:41.400 --> 01:35:44.428
And there's test coverage

NOTE Confidence: 0.726983133333333

01:35:44.428 --> 01:35:46.699
for this scenario.

NOTE Confidence: 0.726983133333333

01:35:46.700 --> 01:35:49.380
I haven't checked yet.

NOTE Confidence: 0.759614664

01:35:53.240 --> 01:35:54.632
Yes, an excellent question.

NOTE Confidence: 0.759614664

01:35:54.632 --> 01:35:55.865
Because, UM, the sandling.

NOTE Confidence: 0.759614664

01:35:55.865 --> 01:35:57.340
This would be very bad.

NOTE Confidence: 0.7083422

01:36:00.130 --> 01:36:00.650
Counted.

NOTE Confidence: 0.746156662

01:36:05.240 --> 01:36:07.060
OK, cool uh, let's see.

NOTE Confidence: 0.746156662

01:36:07.060 --> 01:36:08.536
Are there any questions for all

NOTE Confidence: 0.746156662

01:36:08.536 --> 01:36:10.159
of the UM, topics we covered?

NOTE Confidence: 0.95319514

01:36:19.880 --> 01:36:22.700
OK, I'm not hearing any.

NOTE Confidence: 0.95319514

01:36:22.700 --> 01:36:25.445
So I think we can call this the end

NOTE Confidence: 0.95319514

01:36:25.445 --> 01:36:27.936
of the Umm, uh, video code review.

NOTE Confidence: 0.95319514

01:36:27.936 --> 01:36:29.756
I'll stop sharing my screen.

NOTE Confidence: 0.95319514

01:36:29.760 --> 01:36:32.579
So thanks again for joining us for next week.

NOTE Confidence: 0.95319514

01:36:32.579 --> 01:36:34.626
We may either continue looking at this or

NOTE Confidence: 0.95319514

01:36:34.626 --> 01:36:36.450
perhaps I'll go off and review the test.

NOTE Confidence: 0.95319514

01:36:36.450 --> 01:36:39.314
We'll be looking at another PR next time,

NOTE Confidence: 0.95319514

01:36:39.320 --> 01:36:40.646
so thanks and see you then.
