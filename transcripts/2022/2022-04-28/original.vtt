WEBVTT

NOTE duration:"01:28:44"

NOTE recognizability:0.796

NOTE language:en-us

NOTE Confidence: 0.83695011

00:00:11.260 --> 00:00:13.282
Hi everyone and welcome back to

NOTE Confidence: 0.83695011

00:00:13.282 --> 00:00:15.400
another VC libraries Open code review.

NOTE Confidence: 0.83695011

00:00:15.400 --> 00:00:17.878
Today we'll be looking at another

NOTE Confidence: 0.83695011

00:00:17.880 --> 00:00:20.640
PR implementing C + 23 features.

NOTE Confidence: 0.83695011

00:00:20.640 --> 00:00:25.680
This is Part 2 of the stood expected review.

NOTE Confidence: 0.83695011

00:00:25.680 --> 00:00:27.078
This is adding a whole new

NOTE Confidence: 0.83695011

00:00:27.078 --> 00:00:28.440
header to the standard library.

NOTE Confidence: 0.83695011

00:00:28.440 --> 00:00:32.640
The PR is 2643 by our contributor Misco.

NOTE Confidence: 0.83695011

00:00:32.640 --> 00:00:35.406
Previously on the Open court reviews

NOTE Confidence: 0.83695011

00:00:35.406 --> 00:00:38.128
and I've gotten partially through this

NOTE Confidence: 0.83695011

00:00:38.128 --> 00:00:40.907
up to I believe the class expected.

NOTE Confidence: 0.83695011

00:00:40.910 --> 00:00:43.080
In the header itself and the new

NOTE Confidence: 0.83695011

00:00:43.080 --> 00:00:45.638
test and the new testing would be I

NOTE Confidence: 0.83695011

00:00:45.638 --> 00:00:46.646
had submitted a bunch of comments.

NOTE Confidence: 0.83695011

00:00:46.650 --> 00:00:49.824
Miss Go has addressed those and

NOTE Confidence: 0.83695011

00:00:49.824 --> 00:00:53.140
reply to the comments that I had.

NOTE Confidence: 0.83695011

00:00:53.140 --> 00:00:55.696
Now I'm looking at the the

NOTE Confidence: 0.83695011

00:00:55.696 --> 00:00:56.974
commit history here.

NOTE Confidence: 0.83695011

00:00:56.980 --> 00:01:00.334
There has been a force push which sometimes

NOTE Confidence: 0.83695011

00:01:00.334 --> 00:01:03.813
makes it difficult to see what happened,

NOTE Confidence: 0.83695011

00:01:03.820 --> 00:01:05.720
although GitHub is surprisingly

NOTE Confidence: 0.83695011

00:01:05.720 --> 00:01:08.095
good at showing the differences

NOTE Confidence: 0.83695011

00:01:08.095 --> 00:01:09.580
between force pushing.

NOTE Confidence: 0.83695011

00:01:09.580 --> 00:01:11.020
So I'll see if I can do that.

NOTE Confidence: 0.7935935215

00:01:14.520 --> 00:01:16.734
And then OK, then we mentioned

NOTE Confidence: 0.7935935215

00:01:16.734 --> 00:01:19.088
there are some questions in the

NOTE Confidence: 0.7935935215

00:01:19.088 --> 00:01:20.700
the discussion history about.

NOTE Confidence: 0.7935935215

00:01:20.700 --> 00:01:23.479
OK, we're adding a new standard proposal.

NOTE Confidence: 0.7935935215

00:01:23.480 --> 00:01:25.376
Should we add other standard proposals?

NOTE Confidence: 0.7935935215

00:01:25.380 --> 00:01:26.980
And our answer is respectively

NOTE Confidence: 0.7935935215

00:01:26.980 --> 00:01:28.580
have been yes and no.

NOTE Confidence: 0.7935935215

00:01:28.580 --> 00:01:30.500
There's one actually mentioned

NOTE Confidence: 0.7935935215

00:01:30.500 --> 00:01:33.560
early on in the review. It's it's.

NOTE Confidence: 0.7935935215

00:01:33.560 --> 00:01:35.540
There's a specific comment for it.

NOTE Confidence: 0.7935935215

00:01:35.540 --> 00:01:37.520
I could find it.

NOTE Confidence: 0.7935935215

00:01:37.520 --> 00:01:39.995
It's actually my first comment.

NOTE Confidence: 0.7935935215

00:01:40.000 --> 00:01:40.921
Here it is.

NOTE Confidence: 0.7935935215

00:01:40.921 --> 00:01:43.070
There's one paper that has not been

NOTE Confidence: 0.7935935215

00:01:43.140 --> 00:01:45.560
officially accepted by the committee,

NOTE Confidence: 0.7935935215

00:01:45.560 --> 00:01:49.140
but it has been looked at by the

NOTE Confidence: 0.7935935215

00:01:49.140 --> 00:01:50.460
library Evolution Working Group.

NOTE Confidence: 0.7935935215

00:01:50.460 --> 00:01:51.680
They had a strong consensus

NOTE Confidence: 0.7935935215

00:01:51.680 --> 00:01:52.656
to proceed with it,

NOTE Confidence: 0.7935935215

00:01:52.660 --> 00:01:54.432
and it's currently being

NOTE Confidence: 0.7935935215

00:01:54.432 --> 00:01:56.647
polled by them right now,

NOTE Confidence: 0.7935935215

00:01:56.650 --> 00:01:58.176
and this is a fairly small change.

NOTE Confidence: 0.7935935215

00:01:58.180 --> 00:01:59.995
It just renames the member

NOTE Confidence: 0.7935935215

00:01:59.995 --> 00:02:02.280
function so as maintainers.

NOTE Confidence: 0.7935935215

00:02:02.280 --> 00:02:04.680
We've given you know approval to say,

NOTE Confidence: 0.7935935215

00:02:04.680 --> 00:02:04.885
OK,

NOTE Confidence: 0.7935935215

00:02:04.885 --> 00:02:06.320
it's OK to implement this paper even

NOTE Confidence: 0.7935935215

00:02:06.320 --> 00:02:07.557
though it hasn't been technically

NOTE Confidence: 0.7935935215

00:02:07.557 --> 00:02:09.117
voted into the working paper yet.

NOTE Confidence: 0.7935935215

00:02:09.120 --> 00:02:10.540
But then there's another one.

NOTE Confidence: 0.7935935215

00:02:10.540 --> 00:02:13.370
That Musk was asking about.

NOTE Confidence: 0.7935935215

00:02:13.370 --> 00:02:15.062
Monadic functions for

NOTE Confidence: 0.7935935215

00:02:15.062 --> 00:02:17.142
state expected that paper.

NOTE Confidence: 0.7935935215

00:02:17.142 --> 00:02:19.046
Although many people are

NOTE Confidence: 0.7935935215

00:02:19.046 --> 00:02:20.950
very interested in it,

NOTE Confidence: 0.7935935215

00:02:20.950 --> 00:02:23.057
has not yet been reviewed by the

NOTE Confidence: 0.7935935215

00:02:23.057 --> 00:02:24.330
library Evolution Working Group.

NOTE Confidence: 0.7935935215

00:02:24.330 --> 00:02:28.758
So currently we've decided to not

NOTE Confidence: 0.7935935215

00:02:28.760 --> 00:02:31.728
add that paper as part of this PR.

NOTE Confidence: 0.7935935215

00:02:31.730 --> 00:02:33.890
Just because so many times in the past,

NOTE Confidence: 0.7935935215

00:02:33.890 --> 00:02:36.354
we have tried to implement things in advance

NOTE Confidence: 0.7935935215

00:02:36.354 --> 00:02:39.110
of them being voted into the working paper,

NOTE Confidence: 0.7935935215

00:02:39.110 --> 00:02:42.250
and if they get changed,

NOTE Confidence: 0.7935935215

00:02:42.250 --> 00:02:44.008
or in the worst case rejected.

NOTE Confidence: 0.7935935215

00:02:44.010 --> 00:02:45.906
And they don't appear in the working paper.

NOTE Confidence: 0.7935935215

00:02:45.910 --> 00:02:47.932
Then we've just shipped something nonstandard

NOTE Confidence: 0.7935935215

00:02:47.932 --> 00:02:50.806
and we have to go unwind what we've done.

NOTE Confidence: 0.7935935215

00:02:50.810 --> 00:02:52.930
Most notably,

NOTE Confidence: 0.7935935215

00:02:52.930 --> 00:02:55.054
we were burned when we expected

NOTE Confidence: 0.7935935215

00:02:55.054 --> 00:02:57.567
to change to happen to still

NOTE Confidence: 0.7935935215

00:02:57.567 --> 00:02:59.106
futures blocking destructor.

NOTE Confidence: 0.7935935215

00:02:59.110 --> 00:03:00.286
That did not happen,

NOTE Confidence: 0.7935935215

00:03:00.286 --> 00:03:02.470
and so since then we've been very

NOTE Confidence: 0.7935935215

00:03:02.470 --> 00:03:04.630
careful about trying to implement only

NOTE Confidence: 0.7935935215

00:03:04.630 --> 00:03:07.030
what is actually in the working paper.

NOTE Confidence: 0.7935935215

00:03:07.030 --> 00:03:07.567
Plus,

NOTE Confidence: 0.7935935215

00:03:07.567 --> 00:03:09.178
really obvious fixes,

NOTE Confidence: 0.7935935215

00:03:09.178 --> 00:03:12.020
like if the wording in the standard is

NOTE Confidence: 0.7935935215

00:03:12.020 --> 00:03:14.180
what I refer to as unimplementable.

NOTE Confidence: 0.7935935215

00:03:14.180 --> 00:03:16.124
Vague or self contradictory?

NOTE Confidence: 0.7935935215

00:03:16.124 --> 00:03:19.040
Then we have to choose something

NOTE Confidence: 0.7935935215

00:03:19.120 --> 00:03:21.430
and in cases like that we can

NOTE Confidence: 0.7935935215

00:03:21.430 --> 00:03:22.730
implement things like library

NOTE Confidence: 0.7935935215

00:03:22.730 --> 00:03:24.355
Working group resolutions that have

NOTE Confidence: 0.7935935215

00:03:24.355 --> 00:03:26.150
not been technically accepted yet.

NOTE Confidence: 0.7935935215

00:03:26.150 --> 00:03:28.150
But in this case this does an extra

NOTE Confidence: 0.7935935215

00:03:28.150 --> 00:03:29.774
feature and is however good that

NOTE Confidence: 0.7935935215

00:03:29.774 --> 00:03:31.750
might be before it gets voted in

NOTE Confidence: 0.7935935215

00:03:31.750 --> 00:03:34.688
implementing it as part of this paper is,

NOTE Confidence: 0.7935935215

00:03:34.690 --> 00:03:36.710
I think, too early.

NOTE Confidence: 0.7935935215

00:03:36.710 --> 00:03:38.318
It's also separate.

NOTE Confidence: 0.7935935215

00:03:38.318 --> 00:03:40.998
Yeah, and that means that

NOTE Confidence: 0.7935935215

00:03:40.998 --> 00:03:43.130
implementing it separately.

NOTE Confidence: 0.7935935215

00:03:43.130 --> 00:03:47.979
Uh, it's just much easier in terms of.

NOTE Confidence: 0.7935935215

00:03:47.980 --> 00:03:49.228
Getting code reviewed.

NOTE Confidence: 0.7935935215

00:03:49.228 --> 00:03:49.644
Yeah,

NOTE Confidence: 0.7935935215

00:03:49.644 --> 00:03:50.060
yeah,

NOTE Confidence: 0.7935935215

00:03:50.060 --> 00:03:52.069
rather than as a large I think

NOTE Confidence: 0.7935935215

00:03:52.069 --> 00:03:53.920
this is multi thousand line.

NOTE Confidence: 0.7935935215

00:03:53.920 --> 00:03:56.440
Yeah this is like three 2980 lines

NOTE Confidence: 0.7935935215

00:03:56.440 --> 00:03:58.060
so that smaller is generally better.

NOTE Confidence: 0.7935935215

00:03:58.060 --> 00:03:59.542
If it had already been accepted

NOTE Confidence: 0.7935935215

00:03:59.542 --> 00:04:01.431
then having it be part of this

NOTE Confidence: 0.7935935215

00:04:01.431 --> 00:04:02.555
paper would be reasonable.

NOTE Confidence: 0.7935935215

00:04:02.560 --> 00:04:04.104
We would just be a single integrated feature.

NOTE Confidence: 0.7935935215

00:04:04.110 --> 00:04:06.060
We usually get catch papers

NOTE Confidence: 0.7935935215

00:04:06.060 --> 00:04:08.010
once they've been voted in.

NOTE Confidence: 0.7935935215

00:04:08.010 --> 00:04:10.308
Just get them all at once that

NOTE Confidence: 0.7935935215

00:04:10.308 --> 00:04:11.436
we don't need to worry about.

NOTE Confidence: 0.7935935215

00:04:11.440 --> 00:04:13.610
Like a intermediate point in

NOTE Confidence: 0.7935935215

00:04:13.610 --> 00:04:14.478
the implementation.

NOTE Confidence: 0.7935935215

00:04:14.480 --> 00:04:16.488
But in this case it has not yet

NOTE Confidence: 0.7935935215

00:04:16.488 --> 00:04:18.309
yet landed in the working paper.

NOTE Confidence: 0.885045075714286

00:04:18.310 --> 00:04:20.713
OK, so with that, if it's all the same

NOTE Confidence: 0.885045075714286

00:04:20.713 --> 00:04:23.150
part of the working paper, then yes,

NOTE Confidence: 0.885045075714286

00:04:23.150 --> 00:04:25.383
there yeah this joint then yeah,

NOTE Confidence: 0.885045075714286

00:04:25.383 --> 00:04:27.014
if it was like a separate header

NOTE Confidence: 0.885045075714286

00:04:27.014 --> 00:04:28.557
that just works with then yeah,

NOTE Confidence: 0.885045075714286

00:04:28.560 --> 00:04:31.626
having it is a separate very simple.

NOTE Confidence: 0.885045075714286

00:04:31.630 --> 00:04:33.088
OK, I will minimize Casey here

NOTE Confidence: 0.885045075714286

00:04:33.088 --> 00:04:35.188
so I can see more of the screen.

NOTE Confidence: 0.885045075714286

00:04:35.190 --> 00:04:38.148
OK, so let's see what's changed.

NOTE Confidence: 0.885045075714286

00:04:38.150 --> 00:04:39.886
I'm going to Alt Click to minimize.

NOTE Confidence: 0.885045075714286

00:04:39.890 --> 00:04:43.450
We've got a change to the Navis, that's new.

NOTE Confidence: 0.885045075714286

00:04:43.450 --> 00:04:45.450
We've got expected itself.

NOTE Confidence: 0.885045075714286

00:04:45.450 --> 00:04:47.562
We've got the test and being added to

NOTE Confidence: 0.885045075714286

00:04:47.562 --> 00:04:49.449
the include each header load matrix,

NOTE Confidence: 0.885045075714286

00:04:49.450 --> 00:04:51.060
I think I'd asked for this because

NOTE Confidence: 0.885045075714286

00:04:51.060 --> 00:04:53.149
it was a missing change last time,

NOTE Confidence: 0.885045075714286

00:04:53.150 --> 00:04:54.986
so expected as being added there

NOTE Confidence: 0.885045075714286

00:04:54.986 --> 00:04:58.416
and sorted order, that's good. OK.

NOTE Confidence: 0.885045075714286

00:04:58.416 --> 00:05:02.464
Let's take a look at the debugger visualizer,

NOTE Confidence: 0.885045075714286

00:05:02.470 --> 00:05:08.254
so this is used by the IDE to display

NOTE Confidence: 0.885045075714286

00:05:08.254 --> 00:05:11.626
complicated types in the watch window.

NOTE Confidence: 0.885045075714286

00:05:11.630 --> 00:05:14.366
So if you have something like a stood vector,

NOTE Confidence: 0.885045075714286

00:05:14.370 --> 00:05:15.578
a representation of vector

NOTE Confidence: 0.885045075714286

00:05:15.578 --> 00:05:16.484
is very complicated.

NOTE Confidence: 0.885045075714286

00:05:16.490 --> 00:05:17.794
It's got 3 pointers.

NOTE Confidence: 0.885045075714286

00:05:17.794 --> 00:05:19.750
It has maybe some debug data

NOTE Confidence: 0.885045075714286

00:05:19.820 --> 00:05:21.062
members understanding what

NOTE Confidence: 0.885045075714286

00:05:21.062 --> 00:05:23.546
they point to is not obvious.

NOTE Confidence: 0.885045075714286

00:05:23.550 --> 00:05:26.390
Classes like list and map or even worse,

NOTE Confidence: 0.885045075714286

00:05:26.390 --> 00:05:29.300
so this XML file the native.

NOTE Confidence: 0.885045075714286

00:05:29.300 --> 00:05:30.034
Come out,

NOTE Confidence: 0.885045075714286

00:05:30.034 --> 00:05:32.236
which is documented on Microsoft Docs

NOTE Confidence: 0.885045075714286

00:05:32.236 --> 00:05:34.419
and helps the debugger understand

NOTE Confidence: 0.885045075714286

00:05:34.419 --> 00:05:36.714
the representations of STL types.

NOTE Confidence: 0.885045075714286

00:05:36.720 --> 00:05:38.864
So we ship it alongside the STL and

NOTE Confidence: 0.885045075714286

00:05:38.864 --> 00:05:41.406
then it gets incorporated into the IDE.

NOTE Confidence: 0.885045075714286

00:05:41.410 --> 00:05:43.839
So this here I'm assuming that Misco

NOTE Confidence: 0.885045075714286

00:05:43.839 --> 00:05:45.690
is already actually tested this.

NOTE Confidence: 0.885045075714286

00:05:45.690 --> 00:05:47.618
I'm just going to look at the XML

NOTE Confidence: 0.885045075714286

00:05:47.618 --> 00:05:49.313
and see if this looks reasonable.

NOTE Confidence: 0.885045075714286

00:05:49.313 --> 00:05:51.611
The format is you mentioned the

NOTE Confidence: 0.885045075714286

00:05:51.611 --> 00:05:53.910
type you have the HTML escape.

NOTE Confidence: 0.885045075714286

00:05:53.910 --> 00:05:55.678
Things like angle brackets,

NOTE Confidence: 0.885045075714286

00:05:55.678 --> 00:05:57.888
so anything matching student expected.

NOTE Confidence: 0.885045075714286

00:05:57.890 --> 00:05:59.080
Let me see what type that is.

NOTE Confidence: 0.885045075714286

00:05:59.080 --> 00:06:02.599
Yeah, unexpected, let me zoom in a bit here.

NOTE Confidence: 0.885045075714286

00:06:02.600 --> 00:06:06.020
Yeah, so unexpected of star.

NOTE Confidence: 0.885045075714286

00:06:06.020 --> 00:06:07.406
OK, intrinsic.

NOTE Confidence: 0.885045075714286

00:06:07.406 --> 00:06:14.620
This is a way I think to refer to.

NOTE Confidence: 0.885045075714286

00:06:14.620 --> 00:06:15.910
Member functions.

NOTE Confidence: 0.885045075714286

00:06:15.910 --> 00:06:18.490
He's calling it unex,

NOTE Confidence: 0.885045075714286

00:06:18.490 --> 00:06:21.080
and this calls the function

NOTE Confidence: 0.885045075714286

00:06:21.080 --> 00:06:23.152
under score capital unexpected.

NOTE Confidence: 0.885045075714286

00:06:23.160 --> 00:06:27.800
OK, so at an exposition only data member.

NOTE Confidence: 0.885045075714286

00:06:27.800 --> 00:06:30.929
It's Val and I don't want to

NOTE Confidence: 0.885045075714286

00:06:30.929 --> 00:06:35.220
highlight Val in the paper itself.

NOTE Confidence: 0.885045075714286

00:06:35.220 --> 00:06:35.640
OK.

NOTE Confidence: 0.73789381875

00:06:37.760 --> 00:06:41.024
And he here he displays it as unax.

NOTE Confidence: 0.73789381875

00:06:41.030 --> 00:06:41.790
That's interesting,

NOTE Confidence: 0.73789381875

00:06:41.790 --> 00:06:43.578
does that come from? Yeah,

NOTE Confidence: 0.73789381875

00:06:43.578 --> 00:06:45.454
I don't think that's a standard identifier.

NOTE Confidence: 0.73789381875

00:06:45.460 --> 00:06:47.716
Umm, so the the Convention that we've used,

NOTE Confidence: 0.73789381875

00:06:47.720 --> 00:06:49.178
and admittedly it has been something

NOTE Confidence: 0.73789381875

00:06:49.178 --> 00:06:51.069
like five or seven years since I've

NOTE Confidence: 0.73789381875

00:06:51.069 --> 00:06:52.809
directly worked on the visualizers myself.

NOTE Confidence: 0.73789381875

00:06:52.810 --> 00:06:54.922
I think Casey and Andrew have

NOTE Confidence: 0.73789381875

00:06:54.922 --> 00:06:57.390
worked on these much more recently.

NOTE Confidence: 0.73789381875

00:06:57.390 --> 00:06:58.950
The convention that I followed

NOTE Confidence: 0.73789381875

00:06:58.950 --> 00:07:01.090
back in the day was if you're

NOTE Confidence: 0.73789381875

00:07:01.090 --> 00:07:02.606
displaying a data member, or yeah,

NOTE Confidence: 0.73789381875

00:07:02.606 --> 00:07:04.030
it's going to get a lot of results.

NOTE Confidence: 0.73789381875

00:07:04.030 --> 00:07:06.126
If you're displaying a data member and you

NOTE Confidence: 0.73789381875

00:07:06.126 --> 00:07:08.867
want to depict an imaginary name for it that

NOTE Confidence: 0.73789381875

00:07:08.867 --> 00:07:10.688
doesn't actually exist in the standard,

NOTE Confidence: 0.73789381875

00:07:10.690 --> 00:07:11.626
I would put it in square.

NOTE Confidence: 0.73789381875

00:07:11.630 --> 00:07:15.977
Brackets, why can't we just use unexpected?

NOTE Confidence: 0.73789381875

00:07:15.980 --> 00:07:19.016
That's the name of the type.

NOTE Confidence: 0.73789381875

00:07:19.020 --> 00:07:21.414
The thing that it stores is in the standard.

NOTE Confidence: 0.73789381875

00:07:21.420 --> 00:07:23.076
It's called Val, or that the

NOTE Confidence: 0.73789381875

00:07:23.076 --> 00:07:25.149
accessor is going to be called error.

NOTE Confidence: 0.73789381875

00:07:25.150 --> 00:07:27.940
Right now it's called value.

NOTE Confidence: 0.73789381875

00:07:27.940 --> 00:07:29.468
The Accessor is going to be called error,

NOTE Confidence: 0.73789381875

00:07:29.470 --> 00:07:30.880
then depicting it as like

NOTE Confidence: 0.73789381875

00:07:30.880 --> 00:07:31.726
square bracket error.

NOTE Confidence: 0.73789381875

00:07:31.730 --> 00:07:33.100
Error could be more reasonable.

NOTE Confidence: 0.841004895882353

00:07:35.830 --> 00:07:36.862
It's very interesting,

NOTE Confidence: 0.841004895882353

00:07:36.862 --> 00:07:39.730
let me let me actually look at the

NOTE Confidence: 0.841004895882353

00:07:39.730 --> 00:07:42.070
representation of the type real quick.

NOTE Confidence: 0.841004895882353

00:07:42.070 --> 00:07:46.684
It's not like. OK, so uh miscues

NOTE Confidence: 0.841004895882353

00:07:46.684 --> 00:07:49.114
naming the data member unexpected.

NOTE Confidence: 0.841004895882353

00:07:49.120 --> 00:07:51.378
But if the accessor is error then

NOTE Confidence: 0.841004895882353

00:07:51.378 --> 00:07:53.046
displaying the member as error Prem

NOTE Confidence: 0.841004895882353

00:07:53.046 --> 00:07:55.078
Prem would be in terms of something

NOTE Confidence: 0.841004895882353

00:07:55.078 --> 00:07:56.508
the user would directly see.

NOTE Confidence: 0.841004895882353

00:07:56.510 --> 00:07:59.438
I think that would be a better name

NOTE Confidence: 0.841004895882353

00:07:59.438 --> 00:08:02.220
but the error type is is error.

NOTE Confidence: 0.841004895882353

00:08:02.220 --> 00:08:04.551
Yeah but this is not referring to

NOTE Confidence: 0.841004895882353

00:08:04.551 --> 00:08:07.000
the type but to the data member.

NOTE Confidence: 0.841004895882353

00:08:07.000 --> 00:08:12.330
Yeah, so I think that this area I think.

NOTE Confidence: 0.841004895882353

00:08:12.330 --> 00:08:17.278
OK so we've got to come. Let's see dislay.

NOTE Confidence: 0.841004895882353

00:08:17.278 --> 00:08:19.238
It's really the. This doesn't matter.

NOTE Confidence: 0.841004895882353

00:08:19.238 --> 00:08:20.610
This is just like the internal name.

NOTE Confidence: 0.841004895882353

00:08:20.610 --> 00:08:22.730
It's the item name here.

NOTE Confidence: 0.841004895882353

00:08:22.730 --> 00:08:29.440
OK, this name or displays.

NOTE Confidence: 0.841004895882353

00:08:29.440 --> 00:08:33.664
The data member's name I cannot type on

NOTE Confidence: 0.841004895882353

00:08:33.664 --> 00:08:39.860
this thing as an ex but that identifier.

NOTE Confidence: 0.841004895882353

00:08:39.860 --> 00:08:43.900
Doesn't appear in the standard.

NOTE Confidence: 0.841004895882353

00:08:43.900 --> 00:08:51.649
Would it be better? To. Display error here.

NOTE Confidence: 0.841004895882353

00:08:51.650 --> 00:08:56.450
Since that's the name. Of the.

NOTE Confidence: 0.841004895882353

00:08:56.450 --> 00:09:01.109
Accessor number function.

NOTE Confidence: 0.841004895882353

00:09:01.110 --> 00:09:05.650
Or possibly.

NOTE Confidence: 0.841004895882353

00:09:05.650 --> 00:09:07.730
Huh?

NOTE Confidence: 0.841004895882353

00:09:07.730 --> 00:09:07.930
Like

NOTE Confidence: 0.699672871111111

00:09:10.850 --> 00:09:12.356
OK, this displays the data member

NOTE Confidence: 0.699672871111111

00:09:12.356 --> 00:09:13.743
name as unex, but that identifier

NOTE Confidence: 0.699672871111111

00:09:13.743 --> 00:09:14.958
doesn't appear in. The standard.

NOTE Confidence: 0.699672871111111

00:09:14.958 --> 00:09:16.692
Would be better to display error

NOTE Confidence: 0.699672871111111

00:09:16.692 --> 00:09:18.193
prime prime here since that's

NOTE Confidence: 0.699672871111111

00:09:18.193 --> 00:09:19.927
the name of the ACCESSOR member

NOTE Confidence: 0.699672871111111

00:09:19.927 --> 00:09:21.490
function or possibly error. Perfect.

NOTE Confidence: 0.71909570375

00:09:26.410 --> 00:09:29.130
Then we've got a stood bad expected access,

NOTE Confidence: 0.71909570375

00:09:29.130 --> 00:09:33.776
which is the. Exception type.

NOTE Confidence: 0.71909570375

00:09:33.776 --> 00:09:37.268
What does that have?

NOTE Confidence: 0.71909570375

00:09:37.270 --> 00:09:40.630
This ohh here we go.

NOTE Confidence: 0.71909570375

00:09:40.630 --> 00:09:42.358
This is templated on T and we've got

NOTE Confidence: 0.71909570375

00:09:42.358 --> 00:09:44.407
some by no this is what am I looking at.

NOTE Confidence: 0.71909570375

00:09:44.410 --> 00:09:46.390
This is expected bad expected

NOTE Confidence: 0.71909570375

00:09:46.390 --> 00:09:48.370
access void device from exception.

NOTE Confidence: 0.71909570375

00:09:48.370 --> 00:09:50.300
OK, here's the templating 1.

NOTE Confidence: 0.71909570375

00:09:50.300 --> 00:09:51.670
This an also has error.

NOTE Confidence: 0.894690256

00:09:53.750 --> 00:09:57.860
And not anything else. OK, so same.

NOTE Confidence: 0.45390594

00:10:00.930 --> 00:10:06.480
Same same question. Garden

NOTE Confidence: 0.33495498

00:10:08.920 --> 00:10:11.320
name add.

NOTE Confidence: 0.4571494

00:10:18.970 --> 00:10:21.280
For. Assess

NOTE Confidence: 0.816741808

00:10:29.570 --> 00:10:34.160
Next up stood. Expected itself.

NOTE Confidence: 0.816741808

00:10:34.160 --> 00:10:37.436
OK, so here I'm just looking

NOTE Confidence: 0.816741808

00:10:37.436 --> 00:10:39.620
at the class definition.

NOTE Confidence: 0.816741808

00:10:39.620 --> 00:10:42.662
Seeing what Stata provides and you

NOTE Confidence: 0.816741808

00:10:42.662 --> 00:10:45.980
can access as value and highlight

NOTE Confidence: 0.816741808

00:10:45.980 --> 00:10:49.430
again as value value and error.

NOTE Confidence: 0.816741808

00:10:49.430 --> 00:10:51.415
OK, and then there's like

NOTE Confidence: 0.816741808

00:10:51.415 --> 00:10:53.720
value or things like that so.

NOTE Confidence: 0.816741808

00:10:53.720 --> 00:10:56.606
Let's go find some helper intrinsics

NOTE Confidence: 0.816741808

00:10:56.610 --> 00:10:59.766
has a value value and unexpected.

NOTE Confidence: 0.816741808

00:10:59.770 --> 00:11:02.926
OK, so we've got some conditions.

NOTE Confidence: 0.816741808

00:11:02.930 --> 00:11:05.009
If you have a value show value.

NOTE Confidence: 0.816741808

00:11:05.010 --> 00:11:07.922
If you don't unax.

NOTE Confidence: 0.816741808

00:11:07.922 --> 00:11:11.368
OK, and then again same name here.

NOTE Confidence: 0.816741808

00:11:11.370 --> 00:11:13.110
Aside from this, this seems reasonable.

NOTE Confidence: 0.816741808

00:11:13.110 --> 00:11:14.738
If you have a value, you show the value.

NOTE Confidence: 0.816741808

00:11:14.738 --> 00:11:16.140
If you don't, you show the error.

NOTE Confidence: 0.836632612222222

00:11:19.230 --> 00:11:20.582
Yes, every single one.

NOTE Confidence: 0.836632612222222

00:11:20.582 --> 00:11:22.272
So in fact I will.

NOTE Confidence: 0.836632612222222

00:11:22.280 --> 00:11:24.760
Say just occurs below.

NOTE Confidence: 0.2082565647

00:11:28.770 --> 00:11:37.555
And X activated access and expected itself.

NOTE Confidence: 0.863095176

00:11:41.090 --> 00:11:43.005
Trying to avoid too many

NOTE Confidence: 0.863095176

00:11:43.005 --> 00:11:44.920
comments for the same thing.

NOTE Confidence: 0.863095176

00:11:44.920 --> 00:11:46.439
OK, other than that this looks good.

NOTE Confidence: 0.863095176

00:11:46.440 --> 00:11:48.216
This nicely switches between the two,

NOTE Confidence: 0.863095176

00:11:48.220 --> 00:11:50.828
which is very good. OK.

NOTE Confidence: 0.863095176

00:11:50.828 --> 00:11:55.316
And then for expected a void.

NOTE Confidence: 0.863095176

00:11:55.320 --> 00:11:58.248
Because you can't really have a value void.

NOTE Confidence: 0.863095176

00:11:58.250 --> 00:11:59.482
He just displays void.

NOTE Confidence: 0.863095176

00:11:59.482 --> 00:12:00.406
That seems reasonable.

NOTE Confidence: 0.919669314

00:12:03.130 --> 00:12:08.739
And if you put a. A literal string.

NOTE Confidence: 0.919669314

00:12:08.740 --> 00:12:10.480
You just say void here,

NOTE Confidence: 0.919669314

00:12:10.480 --> 00:12:11.608
but that's interesting.

NOTE Confidence: 0.730413725

00:12:14.360 --> 00:12:16.280
That's extremely interesting so.

NOTE Confidence: 0.724100528571429

00:12:18.550 --> 00:12:20.426
Oh no, hold on the display string.

NOTE Confidence: 0.724100528571429

00:12:20.430 --> 00:12:22.662
You need to wrap and braces if you want

NOTE Confidence: 0.724100528571429

00:12:22.662 --> 00:12:24.688
something like an intrinsic to be evaluated,

NOTE Confidence: 0.724100528571429

00:12:24.690 --> 00:12:27.372
but for the item you dumped, you just.

NOTE Confidence: 0.724100528571429

00:12:27.372 --> 00:12:29.978
With the thing directly there, display

NOTE Confidence: 0.724100528571429

00:12:29.978 --> 00:12:34.166
string embraces item direct embraces direct.

NOTE Confidence: 0.724100528571429

00:12:34.170 --> 00:12:36.006
OK, so the display string if

NOTE Confidence: 0.724100528571429

00:12:36.006 --> 00:12:37.969
you just say void by itself.

NOTE Confidence: 0.724100528571429

00:12:37.970 --> 00:12:40.340
And that's a literal string.

NOTE Confidence: 0.724100528571429

00:12:40.340 --> 00:12:42.419
Is here and this actually gets OK,

NOTE Confidence: 0.724100528571429

00:12:42.420 --> 00:12:43.500
so this is all?

NOTE Confidence: 0.724100528571429

00:12:43.500 --> 00:12:45.899
And then only if you don't have value,

NOTE Confidence: 0.724100528571429

00:12:45.900 --> 00:12:46.700
do you show the error.

NOTE Confidence: 0.724100528571429

00:12:46.700 --> 00:12:47.426
If you do have a value,

NOTE Confidence: 0.724100528571429

00:12:47.430 --> 00:12:49.620
you should avoid, but no children.

NOTE Confidence: 0.724100528571429

00:12:49.620 --> 00:12:50.960
That's what the items are.

NOTE Confidence: 0.724100528571429

00:12:50.960 --> 00:12:53.900
The data members are displayed as children.

NOTE Confidence: 0.724100528571429

00:12:53.900 --> 00:12:57.525
OK, this all looks correct, just that name.

NOTE Confidence: 0.724100528571429

00:12:57.525 --> 00:13:00.000
OK, that all seems fine.

NOTE Confidence: 0.724100528571429

00:13:00.000 --> 00:13:02.748
We don't need any sort of.

NOTE Confidence: 0.724100528571429

00:13:02.750 --> 00:13:03.862
Conditional logic from the

NOTE Confidence: 0.724100528571429

00:13:03.862 --> 00:13:05.252
version of library or anything.

NOTE Confidence: 0.724100528571429

00:13:05.260 --> 00:13:06.616
Because essentially if the type exists,

NOTE Confidence: 0.724100528571429

00:13:06.620 --> 00:13:08.050
this is how the visualized.

NOTE Confidence: 0.724100528571429

00:13:08.050 --> 00:13:10.590
Otherwise the type doesn't exist.

NOTE Confidence: 0.724100528571429

00:13:10.590 --> 00:13:12.966
Uhm, it has never been revised.

NOTE Confidence: 0.724100528571429

00:13:12.970 --> 00:13:14.986
OK, so that's good.

NOTE Confidence: 0.724100528571429

00:13:14.986 --> 00:13:17.392
OK, let's look at.

NOTE Confidence: 0.724100528571429

00:13:17.392 --> 00:13:19.928
This stood expected now.

NOTE Confidence: 0.724100528571429

00:13:19.930 --> 00:13:21.466
OK, that's my existing comment about

NOTE Confidence: 0.724100528571429

00:13:21.466 --> 00:13:23.030
updating our list of extensions,

NOTE Confidence: 0.724100528571429

00:13:23.030 --> 00:13:24.702
headers and so forth.

NOTE Confidence: 0.724100528571429

00:13:24.702 --> 00:13:25.538
I oh,

NOTE Confidence: 0.724100528571429

00:13:25.540 --> 00:13:28.924
I guess I could look at what has changed.

NOTE Confidence: 0.724100528571429

00:13:28.930 --> 00:13:31.303
Just a quick check that any other

NOTE Confidence: 0.724100528571429

00:13:31.303 --> 00:13:32.969
comments were addressed before I

NOTE Confidence: 0.724100528571429

00:13:32.969 --> 00:13:35.006
get to expected and the test setup.

NOTE Confidence: 0.724100528571429

00:13:35.010 --> 00:13:36.434
That's one thing is we try to make

NOTE Confidence: 0.724100528571429

00:13:36.434 --> 00:13:37.878
sure is that when changes are made

NOTE Confidence: 0.724100528571429

00:13:37.878 --> 00:13:39.388
in response to code of your comments

NOTE Confidence: 0.724100528571429

00:13:39.388 --> 00:13:41.084
that we actually go look at what was

NOTE Confidence: 0.724100528571429

00:13:41.090 --> 00:13:43.142
changed and that the changes were

NOTE Confidence: 0.724100528571429

00:13:43.142 --> 00:13:45.549
correct and not you know that they.

NOTE Confidence: 0.724100528571429

00:13:45.550 --> 00:13:47.134
Or address 100% of what was

NOTE Confidence: 0.724100528571429

00:13:47.134 --> 00:13:48.190
actually commented and that

NOTE Confidence: 0.724100528571429

00:13:48.243 --> 00:13:49.827
nothing was dropped on the floor.

NOTE Confidence: 0.724100528571429

00:13:49.830 --> 00:13:51.093
I'm not currently,

NOTE Confidence: 0.724100528571429

00:13:51.093 --> 00:13:53.619
I'm not exhaustively checking each comment

NOTE Confidence: 0.724100528571429

00:13:53.619 --> 00:13:55.550
I had mentioned against the changes,

NOTE Confidence: 0.724100528571429

00:13:55.550 --> 00:13:57.410
but I think just looking at

NOTE Confidence: 0.724100528571429

00:13:57.466 --> 00:13:59.068
what has changed will be good.

NOTE Confidence: 0.724100528571429

00:13:59.070 --> 00:14:02.270
So of course the whole Davis is new.

NOTE Confidence: 0.724100528571429

00:14:02.270 --> 00:14:03.734
We saw that the included Trader

NOTE Confidence: 0.724100528571429

00:14:03.734 --> 00:14:04.940
loan matrix change is new.

NOTE Confidence: 0.724100528571429

00:14:04.940 --> 00:14:07.534
We've got a test change this test

NOTE Confidence: 0.724100528571429

00:14:07.534 --> 00:14:11.120
deduction guide. OK, that's good.

NOTE Confidence: 0.724100528571429

00:14:11.120 --> 00:14:11.890
Umm?

NOTE Confidence: 0.872150383846154

00:14:13.960 --> 00:14:16.718
This is this uses the idiom that

NOTE Confidence: 0.872150383846154

00:14:16.718 --> 00:14:20.334
I am not a fan of. This could be.

NOTE Confidence: 0.872150383846154

00:14:20.334 --> 00:14:23.670
I will comment that the the

NOTE Confidence: 0.872150383846154

00:14:23.670 --> 00:14:26.480
full changes like yeah, yeah,

NOTE Confidence: 0.872150383846154

00:14:26.480 --> 00:14:29.070
essentially I'm not a fan of the

NOTE Confidence: 0.872150383846154

00:14:29.070 --> 00:14:31.063
almost always almost always auto

NOTE Confidence: 0.872150383846154

00:14:31.063 --> 00:14:34.246
idiom because I consider it to be an

NOTE Confidence: 0.872150383846154

00:14:34.246 --> 00:14:36.781
unnecessarily verbose in this case

NOTE Confidence: 0.872150383846154

00:14:36.781 --> 00:14:39.267
saying student unexpected deduced paren

NOTE Confidence: 0.872150383846154

00:14:39.267 --> 00:14:41.190
test error says exactly the same thing,

NOTE Confidence: 0.872150383846154

00:14:41.190 --> 00:14:42.744
except we don't need the auto there

NOTE Confidence: 0.872150383846154

00:14:42.744 --> 00:14:44.141
and it's reasonable when you already

NOTE Confidence: 0.872150383846154

00:14:44.141 --> 00:14:45.730
have something that already has a type.

NOTE Confidence: 0.872150383846154

00:14:45.730 --> 00:14:47.985
But saying auto thing equals

NOTE Confidence: 0.872150383846154

00:14:47.985 --> 00:14:49.338
temporary even without.

NOTE Confidence: 0.872150383846154

00:14:49.340 --> 00:14:53.435
But even if you kept the sign in form.

NOTE Confidence: 0.872150383846154

00:14:53.440 --> 00:14:55.355
Just the auto and some

NOTE Confidence: 0.872150383846154

00:14:55.355 --> 00:14:56.504
parentheses correct you.

NOTE Confidence: 0.872150383846154

00:14:56.510 --> 00:14:57.614
Yeah, you don't need.

NOTE Confidence: 0.872150383846154

00:14:57.614 --> 00:14:59.730
You could use the assignment form as well.

NOTE Confidence: 0.872150383846154

00:14:59.730 --> 00:15:01.080
The copy in that form.

NOTE Confidence: 0.844783074

00:15:03.310 --> 00:15:04.510
OK, that's a good point.

NOTE Confidence: 0.844783074

00:15:04.510 --> 00:15:06.080
Stack asserts name is Decltype,

NOTE Confidence: 0.844783074

00:15:06.080 --> 00:15:06.674
deduce unexpected.

NOTE Confidence: 0.844783074

00:15:06.674 --> 00:15:08.456
OK and we'll comment on that.

NOTE Confidence: 0.844783074

00:15:08.460 --> 00:15:09.285
That's purely stylistic,

NOTE Confidence: 0.844783074

00:15:09.285 --> 00:15:11.210
I think I also need to comment

NOTE Confidence: 0.844783074

00:15:11.266 --> 00:15:12.970
that stood is probably not needed.

NOTE Confidence: 0.844783074

00:15:12.970 --> 00:15:14.632
It looks like this test is

NOTE Confidence: 0.844783074

00:15:14.632 --> 00:15:16.130
already using the space stood.

NOTE Confidence: 0.844783074

00:15:16.130 --> 00:15:17.924
OK, so I will eventually note

NOTE Confidence: 0.844783074

00:15:17.924 --> 00:15:20.211
that and then we got a bunch

NOTE Confidence: 0.844783074

00:15:20.211 --> 00:15:21.916
of changes to expected itself.

NOTE Confidence: 0.882555176

00:15:24.260 --> 00:15:26.068
These are quite extensive.

NOTE Confidence: 0.882555176

00:15:26.068 --> 00:15:27.460
OK, before I look at those,

NOTE Confidence: 0.882555176

00:15:27.460 --> 00:15:29.315
let me actually submit that

NOTE Confidence: 0.882555176

00:15:29.315 --> 00:15:31.080
comment against all the changes.

NOTE Confidence: 0.882555176

00:15:31.080 --> 00:15:33.460
Quite trust what happens if I tried

NOTE Confidence: 0.882555176

00:15:33.530 --> 00:15:35.560
to submit it on just the delta.

NOTE Confidence: 0.882555176

00:15:35.560 --> 00:15:38.468
So in the testing would be 2000 lines.

NOTE Confidence: 0.882555176

00:15:38.468 --> 00:15:41.038
The test is indeed already

NOTE Confidence: 0.882555176

00:15:41.038 --> 00:15:43.280
using a space stood.

NOTE Confidence: 0.882555176

00:15:43.280 --> 00:15:47.700
My favorite comment and was around 1:30.

NOTE Confidence: 0.882555176

00:15:47.700 --> 00:15:53.370
OK. This test is already.

NOTE Confidence: 0.882555176

00:15:53.370 --> 00:15:57.058
Using the space stud.

NOTE Confidence: 0.882555176

00:15:57.060 --> 00:16:03.388
Additionally we. Eventually died.

NOTE Confidence: 0.882555176

00:16:03.388 --> 00:16:08.480
The. Almost romance model.

NOTE Confidence: 0.882555176

00:16:08.480 --> 00:16:10.660
Umm?

NOTE Confidence: 0.882555176

00:16:10.660 --> 00:16:13.256
Production I.

NOTE Confidence: 0.882555176

00:16:13.256 --> 00:16:17.150
And we tested.

NOTE Confidence: 0.882555176

00:16:17.150 --> 00:16:21.170
Never directly or copy that.

NOTE Confidence: 0.575836444

00:16:25.320 --> 00:16:26.970
Demonstrate like this.

NOTE Confidence: 0.602332105555556

00:16:32.990 --> 00:16:37.229
Yeah I do. Why don't I first really stood?

NOTE Confidence: 0.691895844566667

00:16:40.140 --> 00:16:43.536
And the variable name is deduced.

NOTE Confidence: 0.11063969

00:16:46.060 --> 00:16:46.990
This.

NOTE Confidence: 0.5209362

00:16:51.880 --> 00:16:53.420
Equal

NOTE Confidence: 0.740920901

00:17:00.900 --> 00:17:02.156
technically not an assignment,

NOTE Confidence: 0.740920901

00:17:02.156 --> 00:17:04.040
it just uses assignments and tags.

NOTE Confidence: 0.740920901

00:17:04.040 --> 00:17:06.510
I wish the suggestions interface

NOTE Confidence: 0.740920901

00:17:06.510 --> 00:17:09.960
would let you just edit the thing.

NOTE Confidence: 0.740920901

00:17:09.960 --> 00:17:11.016
Yeah, you're here.

NOTE Confidence: 0.740920901

00:17:11.016 --> 00:17:14.100
We just want to give Mr the choice.

NOTE Confidence: 0.740920901

00:17:14.100 --> 00:17:17.180
So yeah, this test is already using.

NOTE Confidence: 0.740920901

00:17:17.180 --> 00:17:19.380
Using this test is already using ASP stood.

NOTE Confidence: 0.740920901

00:17:19.380 --> 00:17:21.042
Additionally we can eventually the almost

NOTE Confidence: 0.740920901

00:17:21.042 --> 00:17:22.933
always AutoCAD or the deduction guy who

NOTE Confidence: 0.740920901

00:17:22.933 --> 00:17:24.409
can be tested with either direction

NOTE Confidence: 0.740920901

00:17:24.409 --> 00:17:26.147
or copying it like this unexpected to

NOTE Confidence: 0.740920901

00:17:26.147 --> 00:17:28.208
do spring test error direct in it or

NOTE Confidence: 0.740920901

00:17:28.208 --> 00:17:29.840
unexpected to reduce equals test error.

NOTE Confidence: 0.740920901

00:17:29.840 --> 00:17:33.410
Copy it. Yeah, that looks good.

NOTE Confidence: 0.740920901

00:17:33.410 --> 00:17:34.859
It's like oh, and it clearly better.

NOTE Confidence: 0.740920901

00:17:34.860 --> 00:17:37.320
Is this one character less?

NOTE Confidence: 0.740920901

00:17:37.320 --> 00:17:40.484
Uh, second one is 1 character more.

NOTE Confidence: 0.740920901

00:17:40.490 --> 00:17:41.862
No one editor character.

NOTE Confidence: 0.740920901

00:17:41.862 --> 00:17:44.380
If you put spaces around the equal,

NOTE Confidence: 0.740920901

00:17:44.380 --> 00:17:46.820
yes, it's as longer. It must be longer.

NOTE Confidence: 0.740920901

00:17:46.820 --> 00:17:48.470
It's more meaningful.

NOTE Confidence: 0.740920901

00:17:48.470 --> 00:17:50.120
1 token less.

NOTE Confidence: 0.740920901

00:17:50.120 --> 00:17:52.230
Yeah, there's a very slight

NOTE Confidence: 0.740920901

00:17:52.230 --> 00:17:53.074
stylistic difference.

NOTE Confidence: 0.740920901

00:17:53.080 --> 00:17:55.880
Not that I would ever comment in

NOTE Confidence: 0.740920901

00:17:55.880 --> 00:17:57.460
a PR about it.

NOTE Confidence: 0.740920901

00:17:57.460 --> 00:17:59.784
Usually I sort of mixed both forms

NOTE Confidence: 0.740920901

00:17:59.784 --> 00:18:02.051
directly and copy it because I'm

NOTE Confidence: 0.740920901

00:18:02.051 --> 00:18:03.655
familiar with the difference.

NOTE Confidence: 0.740920901

00:18:03.660 --> 00:18:05.172
I I certainly don't blame anybody who

NOTE Confidence: 0.740920901

00:18:05.172 --> 00:18:06.928
tries to rely like only on direct edit,

NOTE Confidence: 0.740920901

00:18:06.930 --> 00:18:08.522
because copying its merit,

NOTE Confidence: 0.740920901

00:18:08.522 --> 00:18:10.512
or I suppose vice versa,

NOTE Confidence: 0.740920901

00:18:10.520 --> 00:18:12.060
although vice versa doesn't

NOTE Confidence: 0.740920901

00:18:12.060 --> 00:18:13.630
work with explicit constructors

NOTE Confidence: 0.740920901

00:18:13.630 --> 00:18:15.680
or clear that you're using.

NOTE Confidence: 0.81612625

00:18:17.770 --> 00:18:20.880
The constructor.

NOTE Confidence: 0.81612625

00:18:20.880 --> 00:18:22.824
Yeah, but those that have instead

NOTE Confidence: 0.81612625

00:18:22.824 --> 00:18:24.560
of an assignment operator, yeah,

NOTE Confidence: 0.81612625

00:18:24.560 --> 00:18:27.200
yeah avoids that sort of ambiguity.

NOTE Confidence: 0.81612625

00:18:27.200 --> 00:18:29.216
My personal sort of criterion for

NOTE Confidence: 0.81612625

00:18:29.216 --> 00:18:32.690
when do I use one or the other is if

NOTE Confidence: 0.81612625

00:18:32.690 --> 00:18:34.780
the types are essentially the same.

NOTE Confidence: 0.81612625

00:18:34.780 --> 00:18:38.260
I like I'm OK with equal,

NOTE Confidence: 0.81612625

00:18:38.260 --> 00:18:39.947
but if I'm doing like a conversion

NOTE Confidence: 0.81612625

00:18:39.947 --> 00:18:41.340
I'll use the parenthesis.

NOTE Confidence: 0.81612625

00:18:41.340 --> 00:18:43.992
So like with a stood string I feel

NOTE Confidence: 0.81612625

00:18:43.992 --> 00:18:46.522
comfortable saying string stir 2

NOTE Confidence: 0.81612625

00:18:46.522 --> 00:18:48.936
equals stir one just to copy it.

NOTE Confidence: 0.81612625

00:18:48.936 --> 00:18:50.056
But if I'm constructing from

NOTE Confidence: 0.81612625

00:18:50.056 --> 00:18:50.869
like a conscious.

NOTE Confidence: 0.81612625

00:18:50.870 --> 00:18:52.490
Are that's enough of a tight

NOTE Confidence: 0.81612625

00:18:52.490 --> 00:18:54.280
transformation that I'd like to use parens?

NOTE Confidence: 0.81612625

00:18:54.280 --> 00:18:57.070
I'm not 100% disciplined about it,

NOTE Confidence: 0.81612625

00:18:57.070 --> 00:18:58.955
and it's not even consistent

NOTE Confidence: 0.81612625

00:18:58.955 --> 00:19:01.214
enough about it that it's sort of

NOTE Confidence: 0.81612625

00:19:01.214 --> 00:19:02.950
reliable to read my code that way,

NOTE Confidence: 0.81612625

00:19:02.950 --> 00:19:06.235
but it's on things I tried to think about.

NOTE Confidence: 0.81612625

00:19:06.240 --> 00:19:08.400
OK, so that was what was changed in the test.

NOTE Confidence: 0.81612625

00:19:08.400 --> 00:19:10.506
I'm glance over were changed in

NOTE Confidence: 0.81612625

00:19:10.506 --> 00:19:11.910
expected because otherwise I'm

NOTE Confidence: 0.81612625

00:19:11.972 --> 00:19:13.757
going to jump past all that stuff

NOTE Confidence: 0.81612625

00:19:13.757 --> 00:19:15.600
and just go to class expected.

NOTE Confidence: 0.81612625

00:19:15.600 --> 00:19:17.940
OK, so here's the expected header.

NOTE Confidence: 0.81612625

00:19:17.940 --> 00:19:21.756
OK, so we've got a fair number of changes.

NOTE Confidence: 0.81612625

00:19:21.760 --> 00:19:23.200
Looks like some claim format stuff.

NOTE Confidence: 0.81612625

00:19:23.200 --> 00:19:23.920
Oh yes,

NOTE Confidence: 0.81612625

00:19:23.920 --> 00:19:26.440
I remember the stable name was incorrect.

NOTE Confidence: 0.81612625

00:19:26.440 --> 00:19:29.490
OK, I'm just calling down.

NOTE Confidence: 0.81612625

00:19:29.490 --> 00:19:31.056
OK, the changes here are actually

NOTE Confidence: 0.81612625

00:19:31.056 --> 00:19:31.839
not too invasive.

NOTE Confidence: 0.81612625

00:19:31.840 --> 00:19:34.885
OK, I'll just quickly read through this.

NOTE Confidence: 0.81612625

00:19:34.890 --> 00:19:36.565
OK, so we're no longer

NOTE Confidence: 0.81612625

00:19:36.565 --> 00:19:37.905
suppressing cling format here,

NOTE Confidence: 0.81612625

00:19:37.910 --> 00:19:39.338
because that constraint is going away.

NOTE Confidence: 0.81612625

00:19:39.340 --> 00:19:41.888
I remember asking to not constrain anymore,

NOTE Confidence: 0.81612625

00:19:41.890 --> 00:19:43.615
so that's why we're just

NOTE Confidence: 0.81612625

00:19:43.615 --> 00:19:44.650
unconstrained on error.

NOTE Confidence: 0.81612625

00:19:44.650 --> 00:19:44.936
OK,

NOTE Confidence: 0.81612625

00:19:44.936 --> 00:19:46.366
then we got some static

NOTE Confidence: 0.81612625

00:19:46.366 --> 00:19:47.510
asserts that enforce this.

NOTE Confidence: 0.81612625

00:19:47.510 --> 00:19:49.410
It's gotta be is object.

NOTE Confidence: 0.81612625

00:19:49.410 --> 00:19:51.756
VE must be an object type.

NOTE Confidence: 0.81612625

00:19:51.760 --> 00:19:55.405
Not Israel VE must not be an array type.

NOTE Confidence: 0.81612625

00:19:55.410 --> 00:19:57.540
Not volatile and not consed.

NOTE Confidence: 0.81612625

00:19:57.540 --> 00:20:00.025
He must not be seen by qualified.

NOTE Confidence: 0.81612625

00:20:00.030 --> 00:20:01.298
And then our specialization

NOTE Confidence: 0.81612625

00:20:01.298 --> 00:20:02.566
that all sounds good.

NOTE Confidence: 0.81612625

00:20:02.570 --> 00:20:04.770
Friendship needs to be not with the concept,

NOTE Confidence: 0.81612625

00:20:04.770 --> 00:20:05.386
it's good.

NOTE Confidence: 0.81612625

00:20:05.386 --> 00:20:07.234
We don't need to wrap this

NOTE Confidence: 0.81612625

00:20:07.234 --> 00:20:08.715
here because we're already

NOTE Confidence: 0.81612625

00:20:08.715 --> 00:20:10.315
cleaning format off tier.

NOTE Confidence: 0.72438941125

00:20:12.560 --> 00:20:15.576
Yes, the off honor being removed in pairs.

NOTE Confidence: 0.72438941125

00:20:15.580 --> 00:20:17.780
Stable name is fixed.

NOTE Confidence: 0.72438941125

00:20:17.780 --> 00:20:20.530
This has to be auto.

NOTE Confidence: 0.72438941125

00:20:20.530 --> 00:20:22.833
Oh yes, I remember this was a

NOTE Confidence: 0.72438941125

00:20:22.833 --> 00:20:24.691
stealth build break because the

NOTE Confidence: 0.72438941125

00:20:24.691 --> 00:20:27.103
MSVC does not currently define this.

NOTE Confidence: 0.72438941125

00:20:27.110 --> 00:20:30.204
And we're mentioning the deducing this paper,

NOTE Confidence: 0.72438941125

00:20:30.210 --> 00:20:33.780
in addition to the renaming paper.

NOTE Confidence: 0.72438941125

00:20:33.780 --> 00:20:35.710
So this auto rifraff wait.

NOTE Confidence: 0.72438941125

00:20:35.710 --> 00:20:37.334
Why was that a stealth build break?

NOTE Confidence: 0.72438941125

00:20:37.340 --> 00:20:38.545
Isn't that the whole reason

NOTE Confidence: 0.72438941125

00:20:38.545 --> 00:20:39.940
we use this stuff instead of?

NOTE Confidence: 0.6382200646

00:20:42.350 --> 00:20:43.985
Ohh, it's because the if

NOTE Confidence: 0.6382200646

00:20:43.985 --> 00:20:45.620
that was added OK yeah,

NOTE Confidence: 0.6382200646

00:20:45.620 --> 00:20:47.609
the the the well the if was there already,

NOTE Confidence: 0.6382200646

00:20:47.610 --> 00:20:49.386
but MSVC currently does not activate

NOTE Confidence: 0.6382200646

00:20:49.386 --> 00:20:52.029
this and the stuff in here would not compile.

NOTE Confidence: 0.6382200646

00:20:52.030 --> 00:20:54.378
I think it's because.

NOTE Confidence: 0.6382200646

00:20:54.380 --> 00:20:56.604
And then the stuff in there shouldn't have

NOTE Confidence: 0.6382200646

00:20:56.604 --> 00:20:58.601
been even been seen by you see, right?

NOTE Confidence: 0.6382200646

00:20:58.601 --> 00:20:59.836
Yeah, MSVC wasn't Even so,

NOTE Confidence: 0.6382200646

00:20:59.840 --> 00:21:00.920
that's why I'm saying was stealth.

NOTE Confidence: 0.6382200646

00:21:00.920 --> 00:21:02.936
As soon as the compiler turned on that macro,

NOTE Confidence: 0.6382200646

00:21:02.940 --> 00:21:04.180
this code would be exposed,

NOTE Confidence: 0.6382200646

00:21:04.180 --> 00:21:06.994
and then we would fail to compile.

NOTE Confidence: 0.6382200646

00:21:07.000 --> 00:21:09.688
I think the error was that.

NOTE Confidence: 0.6382200646

00:21:09.690 --> 00:21:10.974
This was not deducing,

NOTE Confidence: 0.6382200646

00:21:10.974 --> 00:21:14.148
it was always taking a ref ref to unexpected.

NOTE Confidence: 0.6382200646

00:21:14.150 --> 00:21:16.934
But here we actually want perfect

NOTE Confidence: 0.6382200646

00:21:16.934 --> 00:21:18.790
forwarding and then since

NOTE Confidence: 0.6382200646

00:21:18.875 --> 00:21:21.080
the the value category also.

NOTE Confidence: 0.6382200646

00:21:21.080 --> 00:21:21.614
Ohh yeah,

NOTE Confidence: 0.6382200646

00:21:21.614 --> 00:21:23.216
because unexpected to not not gonna

NOTE Confidence: 0.6382200646

00:21:23.216 --> 00:21:25.092
be a template parameter yeah cause

NOTE Confidence: 0.6382200646

00:21:25.092 --> 00:21:27.018
yeah here here we're trying to

NOTE Confidence: 0.6382200646

00:21:27.071 --> 00:21:28.591
replace these four overloads with

NOTE Confidence: 0.6382200646

00:21:28.591 --> 00:21:31.020
one so this really does need to

NOTE Confidence: 0.6382200646

00:21:31.020 --> 00:21:32.820
be templating perfect forwarding.

NOTE Confidence: 0.6382200646

00:21:32.820 --> 00:21:35.396
So we really do need auto here

NOTE Confidence: 0.6382200646

00:21:35.396 --> 00:21:38.190
and not unexpected shouldn't.

NOTE Confidence: 0.6382200646

00:21:38.190 --> 00:21:39.586
Observe the return type.

NOTE Confidence: 0.6382200646

00:21:39.586 --> 00:21:42.100
Here could be our ref ref also.

NOTE Confidence: 0.6382200646

00:21:42.100 --> 00:21:44.095
Instead of Decltype auto and

NOTE Confidence: 0.6382200646

00:21:44.095 --> 00:21:46.090
then we wouldn't need the.

NOTE Confidence: 0.6382200646

00:21:46.090 --> 00:21:46.615
Thematically,

NOTE Confidence: 0.6382200646

00:21:46.615 --> 00:21:48.190
meaningful parentheses around

NOTE Confidence: 0.6382200646

00:21:48.190 --> 00:21:49.765
the return expression,

NOTE Confidence: 0.6382200646

00:21:49.770 --> 00:21:51.746
which is one of the things I hate.

NOTE Confidence: 0.6382200646

00:21:51.750 --> 00:21:54.670
In C++ we can strain.

NOTE Confidence: 0.6382200646

00:21:54.670 --> 00:21:56.278
That's an interesting question.

NOTE Confidence: 0.6382200646

00:21:56.278 --> 00:21:58.288
Go ahead should we constrain

NOTE Confidence: 0.6382200646

00:21:58.288 --> 00:22:00.360
self to actually be unexpected?

NOTE Confidence: 0.896495703684211

00:22:02.570 --> 00:22:05.244
I do not believe that is necessary

NOTE Confidence: 0.896495703684211

00:22:05.244 --> 00:22:07.586
because when we have the this

NOTE Confidence: 0.896495703684211

00:22:07.586 --> 00:22:09.824
keyboard there it is the self.

NOTE Confidence: 0.896495703684211

00:22:09.830 --> 00:22:11.990
It's got to be our class.

NOTE Confidence: 0.896495703684211

00:22:11.990 --> 00:22:15.630
That's how PA47R7 works.

NOTE Confidence: 0.896495703684211

00:22:15.630 --> 00:22:17.751
You could not just call this on

NOTE Confidence: 0.896495703684211

00:22:17.751 --> 00:22:20.015
some other random type as a free

NOTE Confidence: 0.896495703684211

00:22:20.015 --> 00:22:21.630
function or something like that.

NOTE Confidence: 0.896495703684211

00:22:21.630 --> 00:22:23.110
Really quite confusing syntax.

NOTE Confidence: 0.896495703684211

00:22:23.110 --> 00:22:26.199
I'm sure nobody else will get better wrong.

NOTE Confidence: 0.896495703684211

00:22:26.200 --> 00:22:28.615
Regarding auto ref ref that is interesting,

NOTE Confidence: 0.896495703684211

00:22:28.620 --> 00:22:31.308
I was about to think about the parentheses

NOTE Confidence: 0.896495703684211

00:22:31.308 --> 00:22:35.630
and you're right that that without that.

NOTE Confidence: 0.896495703684211

00:22:35.630 --> 00:22:36.860
Does it activate special rules?

NOTE Confidence: 0.896495703684211

00:22:36.860 --> 00:22:39.530
Because this is not naming.

NOTE Confidence: 0.896495703684211

00:22:39.530 --> 00:22:40.690
What's naming it data member?

NOTE Confidence: 0.896495703684211

00:22:40.690 --> 00:22:42.136
Is that why it would directly

NOTE Confidence: 0.896495703684211

00:22:42.136 --> 00:22:43.100
look at the type?

NOTE Confidence: 0.896495703684211

00:22:43.100 --> 00:22:45.179
Because it looks like theses need to

NOTE Confidence: 0.896495703684211

00:22:45.179 --> 00:22:47.629
be there to make this be an L value.

NOTE Confidence: 0.896495703684211

00:22:47.630 --> 00:22:48.918
Yeah yeah, that's good.

NOTE Confidence: 0.896495703684211

00:22:48.918 --> 00:22:50.528
That's instead of the declared

NOTE Confidence: 0.896495703684211

00:22:50.528 --> 00:22:52.326
type of that member. Yes, yeah.

NOTE Confidence: 0.896495703684211

00:22:52.326 --> 00:22:54.114
So what we're referring to here?

NOTE Confidence: 0.896495703684211

00:22:54.120 --> 00:22:57.389
For those who are blessedly unaware of

NOTE Confidence: 0.896495703684211

00:22:57.389 --> 00:22:59.950
the standard is the behavior of decltype,

NOTE Confidence: 0.896495703684211

00:22:59.950 --> 00:23:01.730
which does not behave as

NOTE Confidence: 0.896495703684211

00:23:01.730 --> 00:23:03.510
people would always expect it.

NOTE Confidence: 0.896495703684211

00:23:03.510 --> 00:23:05.206
It's been designed to try to do the

NOTE Confidence: 0.896495703684211

00:23:05.206 --> 00:23:06.588
right thing almost all the time,

NOTE Confidence: 0.896495703684211

00:23:06.590 --> 00:23:08.415
but in rare situations things

NOTE Confidence: 0.896495703684211

00:23:08.415 --> 00:23:09.875
like parentheses can matter.

NOTE Confidence: 0.896495703684211

00:23:09.880 --> 00:23:11.518
And this is actually one of them.

NOTE Confidence: 0.896495703684211

00:23:11.520 --> 00:23:11.750
Uh,

NOTE Confidence: 0.896495703684211

00:23:11.750 --> 00:23:13.130
let's see if I can remember

NOTE Confidence: 0.896495703684211

00:23:13.130 --> 00:23:13.820
exactly where without.

NOTE Confidence: 0.896495703684211

00:23:13.820 --> 00:23:16.116
Isn't that behavior explicitly

NOTE Confidence: 0.896495703684211

00:23:16.116 --> 00:23:19.560
opted into a decal type auto?

NOTE Confidence: 0.896495703684211

00:23:19.560 --> 00:23:20.670
It's when you say Deco type,

NOTE Confidence: 0.896495703684211

00:23:20.670 --> 00:23:22.350
so because we've said Decltype auto,

NOTE Confidence: 0.896495703684211

00:23:22.350 --> 00:23:24.566
it's going to use the Deco type rule.

NOTE Confidence: 0.896495703684211

00:23:24.570 --> 00:23:25.910
Could we not say that?

NOTE Confidence: 0.896495703684211

00:23:25.910 --> 00:23:26.172
Yeah,

NOTE Confidence: 0.896495703684211

00:23:26.172 --> 00:23:27.744
yeah and so that's what Casey

NOTE Confidence: 0.896495703684211

00:23:27.744 --> 00:23:29.634
suggests is to use auto ref and

NOTE Confidence: 0.896495703684211

00:23:29.634 --> 00:23:31.206
I think that's a good suggestion.

NOTE Confidence: 0.896495703684211

00:23:31.210 --> 00:23:33.482
I was going to look up the deck

NOTE Confidence: 0.896495703684211

00:23:33.482 --> 00:23:35.905
type rule which I'm trying to

NOTE Confidence: 0.896495703684211

00:23:35.905 --> 00:23:37.186
remember without searching.

NOTE Confidence: 0.896495703684211

00:23:37.190 --> 00:23:40.228
I know it's in my brain somewhere.

NOTE Confidence: 0.896495703684211

00:23:40.230 --> 00:23:41.043
Member, it's really,

NOTE Confidence: 0.896495703684211

00:23:41.043 --> 00:23:42.669
really hidden where the rules for

NOTE Confidence: 0.896495703684211

00:23:42.669 --> 00:23:44.756
decal type are. Don't tell me.

NOTE Confidence: 0.896495703684211

00:23:44.756 --> 00:23:47.262
I know it's here. It's not.

NOTE Confidence: 0.896495703684211

00:23:47.262 --> 00:23:48.646
It's simple type specifiers,

NOTE Confidence: 0.896495703684211

00:23:48.650 --> 00:23:50.425
even though it's not really

NOTE Confidence: 0.896495703684211

00:23:50.425 --> 00:23:52.200
what one would call simple.

NOTE Confidence: 0.896495703684211

00:23:52.200 --> 00:23:54.060
So under that here we go.

NOTE Confidence: 0.896495703684211

00:23:54.060 --> 00:23:55.916
Declaration specifiers,

NOTE Confidence: 0.896495703684211

00:23:55.916 --> 00:23:57.772
type specifiers,

NOTE Confidence: 0.896495703684211

00:23:57.772 --> 00:23:59.039
yeah, OK,

NOTE Confidence: 0.896495703684211

00:23:59.039 --> 00:24:00.734
and now they actually now

NOTE Confidence: 0.896495703684211

00:24:00.734 --> 00:24:02.090
in the latest standard.

NOTE Confidence: 0.896495703684211

00:24:02.090 --> 00:24:03.546
They actually break it out to a

NOTE Confidence: 0.896495703684211

00:24:03.546 --> 00:24:04.610
separate section for long time.

NOTE Confidence: 0.896495703684211

00:24:04.610 --> 00:24:06.297
This is hiding under simple type specifiers,

NOTE Confidence: 0.896495703684211

00:24:06.300 --> 00:24:08.508
which was somewhat confusing.

NOTE Confidence: 0.896495703684211

00:24:08.508 --> 00:24:10.985
OK, I got you with that

NOTE Confidence: 0.896495703684211

00:24:10.985 --> 00:24:12.140
searching achievement unlocked.

NOTE Confidence: 0.896495703684211

00:24:12.140 --> 00:24:13.598
So when you say deco type,

NOTE Confidence: 0.896495703684211

00:24:13.600 --> 00:24:16.696
either directly or with decltype auto,

NOTE Confidence: 0.896495703684211

00:24:16.700 --> 00:24:19.390
it runs these rules and

NOTE Confidence: 0.896495703684211

00:24:19.390 --> 00:24:21.542
this is very interesting.

NOTE Confidence: 0.896495703684211

00:24:21.550 --> 00:24:24.875
Because it does two things in one.

NOTE Confidence: 0.896495703684211

00:24:24.880 --> 00:24:25.304
Essentially,

NOTE Confidence: 0.896495703684211

00:24:25.304 --> 00:24:27.848
if you directly name the type

NOTE Confidence: 0.896495703684211

00:24:27.848 --> 00:24:31.164
of a variable or a data member,

NOTE Confidence: 0.896495703684211

00:24:31.164 --> 00:24:33.719
so that's this split here.

NOTE Confidence: 0.896495703684211

00:24:33.720 --> 00:24:36.954
If E is an unpretentious sized ID

NOTE Confidence: 0.896495703684211

00:24:36.954 --> 00:24:41.045
expression like X deco type X or

NOTE Confidence: 0.896495703684211

00:24:41.045 --> 00:24:44.210
an unpractised class member access

NOTE Confidence: 0.896495703684211

00:24:44.338 --> 00:24:48.559
like Deco Type M under score meow,

NOTE Confidence: 0.896495703684211

00:24:48.560 --> 00:24:50.756
then deco type is the type

NOTE Confidence: 0.896495703684211

00:24:50.756 --> 00:24:52.700
of the entity named by E.

NOTE Confidence: 0.896495703684211

00:24:52.700 --> 00:24:55.269
So basically, if you've got an integer.

NOTE Confidence: 0.896495703684211

00:24:55.270 --> 00:24:56.094
And you say that?

NOTE Confidence: 0.896495703684211

00:24:56.094 --> 00:24:57.710
What's the declarer type of this integer?

NOTE Confidence: 0.896495703684211

00:24:57.710 --> 00:24:59.108
Or you've got a data member?

NOTE Confidence: 0.896495703684211

00:24:59.110 --> 00:25:01.510
It will just give you the type of that thing.

NOTE Confidence: 0.896495703684211

00:25:01.510 --> 00:25:02.885
It would be very confusing

NOTE Confidence: 0.896495703684211

00:25:02.885 --> 00:25:04.260
if it put a reference

NOTE Confidence: 0.865286507727273

00:25:04.323 --> 00:25:06.213
there when you didn't make that

NOTE Confidence: 0.865286507727273

00:25:06.213 --> 00:25:08.170
variable a reference to begin with,

NOTE Confidence: 0.865286507727273

00:25:08.170 --> 00:25:09.442
so decltype does that,

NOTE Confidence: 0.865286507727273

00:25:09.442 --> 00:25:11.350
and often that's what you want.

NOTE Confidence: 0.865286507727273

00:25:11.350 --> 00:25:12.877
In other situations,

NOTE Confidence: 0.865286507727273

00:25:12.877 --> 00:25:16.440
Deco type will variously return an lvalue,

NOTE Confidence: 0.865286507727273

00:25:16.440 --> 00:25:18.630
reference, an R value reference,

NOTE Confidence: 0.865286507727273

00:25:18.630 --> 00:25:20.530
or the type itself depending

NOTE Confidence: 0.865286507727273

00:25:20.530 --> 00:25:22.050
on its value category,

NOTE Confidence: 0.865286507727273

00:25:22.050 --> 00:25:25.515
and this is desirable because you often.

NOTE Confidence: 0.865286507727273

00:25:25.520 --> 00:25:27.464
These decal type when forming things

NOTE Confidence: 0.865286507727273

00:25:27.464 --> 00:25:29.449
like return types of a function.

NOTE Confidence: 0.865286507727273

00:25:29.450 --> 00:25:32.336
If you have a function that.

NOTE Confidence: 0.865286507727273

00:25:32.340 --> 00:25:34.958
We're returns the result of another function.

NOTE Confidence: 0.865286507727273

00:25:34.960 --> 00:25:36.030
Then if that other function

NOTE Confidence: 0.865286507727273

00:25:36.030 --> 00:25:37.380
returns something like an L value,

NOTE Confidence: 0.865286507727273

00:25:37.380 --> 00:25:39.270
you want that to be reflected

NOTE Confidence: 0.865286507727273

00:25:39.270 --> 00:25:40.530
in your wrapper function,

NOTE Confidence: 0.865286507727273

00:25:40.530 --> 00:25:42.202
and the way to do that is to

NOTE Confidence: 0.865286507727273

00:25:42.202 --> 00:25:43.620
return an lvalue reference.

NOTE Confidence: 0.865286507727273

00:25:43.620 --> 00:25:43.985
Or.

NOTE Confidence: 0.865286507727273

00:25:43.985 --> 00:25:44.350
Similarly,

NOTE Confidence: 0.865286507727273

00:25:44.350 --> 00:25:46.175
if whatever you've called is

NOTE Confidence: 0.865286507727273

00:25:46.175 --> 00:25:47.910
returning our value reference,

NOTE Confidence: 0.865286507727273

00:25:47.910 --> 00:25:49.215
you yourself want to return

NOTE Confidence: 0.865286507727273

00:25:49.215 --> 00:25:50.259
an R value reference,

NOTE Confidence: 0.865286507727273

00:25:50.260 --> 00:25:52.964
or if whatever you've called is returning a

NOTE Confidence: 0.865286507727273

00:25:52.964 --> 00:25:55.279
temporary like string one plus string two,

NOTE Confidence: 0.865286507727273

00:25:55.280 --> 00:25:57.638
you want to return that temporary.

NOTE Confidence: 0.865286507727273

00:25:57.640 --> 00:25:59.000
So that's that's what these

NOTE Confidence: 0.865286507727273

00:25:59.000 --> 00:25:59.816
ballpoints are doing.

NOTE Confidence: 0.865286507727273

00:25:59.820 --> 00:26:01.620
The tension between these is,

NOTE Confidence: 0.865286507727273

00:26:01.620 --> 00:26:04.916
what if you form an expression that mentions

NOTE Confidence: 0.865286507727273

00:26:04.916 --> 00:26:08.220
a variable like a parenthesized expression.

NOTE Confidence: 0.865286507727273

00:26:08.220 --> 00:26:10.182
Then Decltype will use these rules

NOTE Confidence: 0.865286507727273

00:26:10.182 --> 00:26:12.579
that return like an lvalue reference,

NOTE Confidence: 0.865286507727273

00:26:12.580 --> 00:26:14.120
or an R value reference for L

NOTE Confidence: 0.865286507727273

00:26:14.120 --> 00:26:15.672
values and X values rather than

NOTE Confidence: 0.865286507727273

00:26:15.672 --> 00:26:17.618
just return the type of the thing.

NOTE Confidence: 0.865286507727273

00:26:17.620 --> 00:26:21.090
This is one of the cases where,

NOTE Confidence: 0.865286507727273

00:26:21.090 --> 00:26:24.721
like return RET is different

NOTE Confidence: 0.865286507727273

00:26:24.721 --> 00:26:27.469
than return parentheses rent.

NOTE Confidence: 0.865286507727273

00:26:27.470 --> 00:26:29.150
And the compiler will warn if you

NOTE Confidence: 0.865286507727273

00:26:29.150 --> 00:26:30.662
do something like try to return

NOTE Confidence: 0.865286507727273

00:26:30.662 --> 00:26:32.132
a reference to a local variable

NOTE Confidence: 0.865286507727273

00:26:32.132 --> 00:26:33.467
that's about to be destroyed.

NOTE Confidence: 0.865286507727273

00:26:33.470 --> 00:26:34.838
So in practice it doesn't cause

NOTE Confidence: 0.865286507727273

00:26:34.838 --> 00:26:35.750
a lot of headaches.

NOTE Confidence: 0.865286507727273

00:26:35.750 --> 00:26:37.647
But in this case it results in

NOTE Confidence: 0.865286507727273

00:26:37.647 --> 00:26:39.468
sort of weird looking code where

NOTE Confidence: 0.865286507727273

00:26:39.468 --> 00:26:41.043
we really do want the.

NOTE Confidence: 0.865286507727273

00:26:41.050 --> 00:26:44.794
Give me the type of this expression rather

NOTE Confidence: 0.865286507727273

00:26:44.794 --> 00:26:48.788
than give me the type of this class member,

NOTE Confidence: 0.865286507727273

00:26:48.790 --> 00:26:51.162
but to activate that,

NOTE Confidence: 0.865286507727273

00:26:51.162 --> 00:26:52.348
yeah perfect.

NOTE Confidence: 0.865286507727273

00:26:52.350 --> 00:26:52.758
Anti.

NOTE Confidence: 0.865286507727273

00:26:52.758 --> 00:26:54.798
And perfect anti forward and

NOTE Confidence: 0.865286507727273

00:26:54.798 --> 00:26:57.478
I guess is there a turn type?

NOTE Confidence: 0.865286507727273

00:26:57.480 --> 00:26:59.820
Yeah yeah it's yeah it's yeah

NOTE Confidence: 0.865286507727273

00:26:59.820 --> 00:27:01.380
perfect returning essentially and

NOTE Confidence: 0.865286507727273

00:27:01.449 --> 00:27:03.615
based on the value category itself.

NOTE Confidence: 0.865286507727273

00:27:03.620 --> 00:27:05.524
But we don't want it to give us

NOTE Confidence: 0.865286507727273

00:27:05.524 --> 00:27:06.926
the declared type of unexpected

NOTE Confidence: 0.865286507727273

00:27:06.926 --> 00:27:08.660
because we know what that is.

NOTE Confidence: 0.865286507727273

00:27:08.660 --> 00:27:10.166
So the parentheses here activate that,

NOTE Confidence: 0.865286507727273

00:27:10.170 --> 00:27:11.174
but that's really weird.

NOTE Confidence: 0.865286507727273

00:27:11.174 --> 00:27:12.978
Can we just say auto refresh auto

NOTE Confidence: 0.865286507727273

00:27:12.978 --> 00:27:14.478
refi think is a reasonable here?

NOTE Confidence: 0.865286507727273

00:27:14.480 --> 00:27:15.964
And if we can't say auto refresh,

NOTE Confidence: 0.865286507727273

00:27:15.970 --> 00:27:19.165
let's have a comment as to why we can't.

NOTE Confidence: 0.865286507727273

00:27:19.170 --> 00:27:23.538
Just none of us can figure it out.

NOTE Confidence: 0.865286507727273

00:27:23.540 --> 00:27:29.940
Although this is correct, the.

NOTE Confidence: 0.865286507727273

00:27:29.940 --> 00:27:34.820
The necessary parentheses are unusual,

NOTE Confidence: 0.865286507727273

00:27:34.820 --> 00:27:37.858
and what's the wording in the standard?

NOTE Confidence: 0.865286507727273

00:27:37.860 --> 00:27:38.048
Uh,

NOTE Confidence: 0.865286507727273

00:27:38.048 --> 00:27:39.740
the wording is what I was just planning to.

NOTE Confidence: 0.865286507727273

00:27:39.740 --> 00:27:41.372
It's this, no, no.

NOTE Confidence: 0.865286507727273

00:27:41.372 --> 00:27:43.412
Of of the function that's

NOTE Confidence: 0.865286507727273

00:27:43.412 --> 00:27:45.698
being implemented here here.

NOTE Confidence: 0.865286507727273

00:27:45.700 --> 00:27:48.720
It's depicted currently as this,

NOTE Confidence: 0.865286507727273

00:27:48.720 --> 00:27:50.212
with the four categories,

NOTE Confidence: 0.865286507727273

00:27:50.212 --> 00:27:52.077
but we're sort of applying

NOTE Confidence: 0.865286507727273

00:27:52.077 --> 00:27:53.878
as if logic and saying,

NOTE Confidence: 0.865286507727273

00:27:53.880 --> 00:27:54.220
oh,

NOTE Confidence: 0.865286507727273

00:27:54.220 --> 00:27:57.280
if we have C + 23 explicit this parameter,

NOTE Confidence: 0.865286507727273

00:27:57.280 --> 00:27:58.340
we can make this fancier,

NOTE Confidence: 0.865286507727273

00:27:58.340 --> 00:27:59.660
and eventually the standard.

NOTE Confidence: 0.865286507727273

00:27:59.660 --> 00:28:01.640
Stuff might be changed to collapse

NOTE Confidence: 0.865286507727273

00:28:01.693 --> 00:28:03.661
these into one the way that it has

NOTE Confidence: 0.865286507727273

00:28:03.661 --> 00:28:05.149
been changed for explicit rule,

NOTE Confidence: 0.865286507727273

00:28:05.150 --> 00:28:07.328
and in some cases if constexpr

NOTE Confidence: 0.766298885

00:28:07.330 --> 00:28:10.130
I don't know if I.

NOTE Confidence: 0.766298885

00:28:10.130 --> 00:28:12.908
Like doing this conditionally, but yeah.

NOTE Confidence: 0.766298885

00:28:12.910 --> 00:28:14.436
Well the alternative is to just say,

NOTE Confidence: 0.766298885

00:28:14.440 --> 00:28:15.742
well, we wouldn't do this at

NOTE Confidence: 0.766298885

00:28:15.742 --> 00:28:17.130
all like we could drop this.

NOTE Confidence: 0.766298885

00:28:17.130 --> 00:28:20.300
It would be totally conformant.

NOTE Confidence: 0.766298885

00:28:20.300 --> 00:28:22.614
The question is like. AM.

NOTE Confidence: 0.766298885

00:28:22.614 --> 00:28:24.990
Would we once we can assume C + 23

NOTE Confidence: 0.766298885

00:28:25.066 --> 00:28:27.845
everywhere and in the center we can

NOTE Confidence: 0.766298885

00:28:27.845 --> 00:28:30.219
once compiler support for this exists,

NOTE Confidence: 0.766298885

00:28:30.220 --> 00:28:31.460
should we just unconditionally

NOTE Confidence: 0.766298885

00:28:31.460 --> 00:28:33.010
collapse it to this one?

NOTE Confidence: 0.766298885

00:28:33.010 --> 00:28:34.216
Would that be better for throughput?

NOTE Confidence: 0.766298885

00:28:34.220 --> 00:28:35.796
It would be easier for users to look

NOTE Confidence: 0.766298885

00:28:35.796 --> 00:28:37.599
at or essentially what we're using.

NOTE Confidence: 0.766298885

00:28:37.600 --> 00:28:39.244
Too much high powered template machinery

NOTE Confidence: 0.766298885

00:28:39.244 --> 00:28:40.767
for something that's actually not that

NOTE Confidence: 0.766298885

00:28:40.767 --> 00:28:41.919
for those like explicit bool saves

NOTE Confidence: 0.766298885

00:28:41.919 --> 00:28:43.792
a ton of headache and I want to use

NOTE Confidence: 0.766298885

00:28:43.792 --> 00:28:45.004
unconditionally as much as possible,

NOTE Confidence: 0.766298885

00:28:45.004 --> 00:28:45.588
but here.

NOTE Confidence: 0.766298885

00:28:45.588 --> 00:28:47.830
I don't know it's I I'd love

NOTE Confidence: 0.766298885

00:28:47.830 --> 00:28:49.510
to use this unconditionally,

NOTE Confidence: 0.766298885

00:28:49.510 --> 00:28:52.006
but that's not what we're doing.

NOTE Confidence: 0.766298885

00:28:52.010 --> 00:28:54.817
Well, we're we're we're working there once

NOTE Confidence: 0.766298885

00:28:54.817 --> 00:28:57.689
I'm playing and MSVC both support this,

NOTE Confidence: 0.766298885

00:28:57.690 --> 00:28:58.746
so it's it's imminent.

NOTE Confidence: 0.766298885

00:28:58.746 --> 00:29:00.325
It's not gonna be OK, correct?

NOTE Confidence: 0.766298885

00:29:00.325 --> 00:29:00.580
Yeah,

NOTE Confidence: 0.766298885

00:29:00.580 --> 00:29:02.365
it's definitely a temporary thing right now.

NOTE Confidence: 0.766298885

00:29:02.370 --> 00:29:04.164
MSVC supports it, except in modules

NOTE Confidence: 0.766298885

00:29:04.164 --> 00:29:06.030
claim does not yet support it,

NOTE Confidence: 0.766298885

00:29:06.030 --> 00:29:07.806
but I believe it's coming soon,

NOTE Confidence: 0.766298885

00:29:07.810 --> 00:29:09.900
hopefully.

NOTE Confidence: 0.766298885

00:29:09.900 --> 00:29:11.112
Hi, it's gonna be.

NOTE Confidence: 0.766298885

00:29:11.112 --> 00:29:12.930
It's gonna be backwards support like

NOTE Confidence: 0.766298885

00:29:12.988 --> 00:29:15.109
you want it's gonna be supported in

NOTE Confidence: 0.766298885

00:29:15.109 --> 00:29:16.904
all standards modes no it will be.

NOTE Confidence: 0.766298885

00:29:16.904 --> 00:29:19.334
It will be specific to C + 23 but that

NOTE Confidence: 0.766298885

00:29:19.334 --> 00:29:21.240
doesn't matter because it's a 23 hour.

NOTE Confidence: 0.766298885

00:29:21.240 --> 00:29:25.720
Yeah great yeah OK and this suggests.

NOTE Confidence: 0.766298885

00:29:25.720 --> 00:29:27.768
Returning auto ref ref.

NOTE Confidence: 0.766298885

00:29:27.768 --> 00:29:29.816
Let's case we don't.

NOTE Confidence: 0.7559909861

00:29:33.770 --> 00:29:35.810
Interestingly, there is a difference

NOTE Confidence: 0.7559909861

00:29:35.810 --> 00:29:38.543
between returning auto ref ref and decltype

NOTE Confidence: 0.7559909861

00:29:38.543 --> 00:29:41.071
auto or there was in certain cases when

NOTE Confidence: 0.7559909861

00:29:41.139 --> 00:29:43.526
we're turning like PR values where I

NOTE Confidence: 0.7559909861

00:29:43.526 --> 00:29:45.825
think Decltype auto does not attempt

NOTE Confidence: 0.7559909861

00:29:45.825 --> 00:29:48.800
to construction and auto refresh did it

NOTE Confidence: 0.7559909861

00:29:48.883 --> 00:29:51.620
may have been become moot after the.

NOTE Confidence: 0.7559909861

00:29:51.620 --> 00:29:54.750
Serious for 17 deferred temporary

NOTE Confidence: 0.7559909861

00:29:54.750 --> 00:29:56.068
materialization so I don't actually

NOTE Confidence: 0.7559909861

00:29:56.068 --> 00:29:57.560
know if that is an actual difference,

NOTE Confidence: 0.7559909861

00:29:57.560 --> 00:29:58.856
but that's not a concern here,

NOTE Confidence: 0.7559909861

00:29:58.860 --> 00:30:01.070
cause unexpected is an actual

NOTE Confidence: 0.7559909861

00:30:01.070 --> 00:30:03.280
data member that we have.

NOTE Confidence: 0.7559909861

00:30:03.280 --> 00:30:04.640
Although this is correct,

NOTE Confidence: 0.7559909861

00:30:04.640 --> 00:30:06.000
the necessary parentheses are

NOTE Confidence: 0.7559909861

00:30:06.000 --> 00:30:07.849
unusual and potentially confusing.

NOTE Confidence: 0.7559909861

00:30:07.850 --> 00:30:10.106
C Carter suggests returning auto refresh,

NOTE Confidence: 0.7559909861

00:30:10.110 --> 00:30:12.238
in which case we don't need the parentheses.

NOTE Confidence: 0.29504082

00:30:14.280 --> 00:30:18.925
And. Since you're here. Our char

NOTE Confidence: 0.29504082

00:30:18.925 --> 00:30:21.239
char char Cras kind of stuff.

NOTE Confidence: 0.63911235

00:30:23.520 --> 00:30:27.400
Correct? I think Nicole was on the call.

NOTE Confidence: 0.63911235

00:30:27.400 --> 00:30:28.460
If she supports this,

NOTE Confidence: 0.63911235

00:30:28.460 --> 00:30:30.682
feel free to speak up and I'll add

NOTE Confidence: 0.63911235

00:30:30.682 --> 00:30:32.698
your name to the list of signatories.

NOTE Confidence: 0.63911235

00:30:32.700 --> 00:30:34.420
Yeah yeah I support it.

NOTE Confidence: 0.63911235

00:30:34.420 --> 00:30:37.132
OK she support uses the template

NOTE Confidence: 0.63911235

00:30:37.132 --> 00:30:38.940
type deduction with reference

NOTE Confidence: 0.63911235

00:30:39.014 --> 00:30:41.202
collapsing roles so do it.

NOTE Confidence: 0.63911235

00:30:41.202 --> 00:30:43.207
If there's some reason that

NOTE Confidence: 0.63911235

00:30:43.207 --> 00:30:45.629
we have not realized why.

NOTE Confidence: 0.63911235

00:30:45.630 --> 00:30:46.602
You can't do that.

NOTE Confidence: 0.63911235

00:30:46.602 --> 00:30:48.060
Then there should be a comment

NOTE Confidence: 0.63911235

00:30:48.116 --> 00:30:49.574
because none of us really able

NOTE Confidence: 0.63911235

00:30:49.574 --> 00:30:51.050
to figure out what that was.

NOTE Confidence: 0.63911235

00:30:51.050 --> 00:30:52.106
Yeah, that that would be real,

NOTE Confidence: 0.63911235

00:30:52.110 --> 00:30:52.388
surprising,

NOTE Confidence: 0.63911235

00:30:52.388 --> 00:30:54.612
and it could be like I just I

NOTE Confidence: 0.63911235

00:30:54.612 --> 00:30:56.245
never know I I like to joke,

NOTE Confidence: 0.63911235

00:30:56.250 --> 00:30:58.168
I used to know how the standard

NOTE Confidence: 0.63911235

00:30:58.168 --> 00:30:59.459
worked and then I lost.

NOTE Confidence: 0.63911235

00:30:59.460 --> 00:31:00.456
That's not completely accurate.

NOTE Confidence: 0.63911235

00:31:00.456 --> 00:31:02.295
I kind of know how this student

NOTE Confidence: 0.63911235

00:31:02.295 --> 00:31:03.665
works when they Add all these

NOTE Confidence: 0.63911235

00:31:03.665 --> 00:31:04.525
new core language features.

NOTE Confidence: 0.63911235

00:31:04.530 --> 00:31:06.546
He knows OK, what's going on here?

NOTE Confidence: 0.63911235

00:31:06.550 --> 00:31:08.076
OK, we're getting rid of constraints instead,

NOTE Confidence: 0.63911235

00:31:08.080 --> 00:31:09.178
they're becoming static,

NOTE Confidence: 0.63911235

00:31:09.178 --> 00:31:11.008
assert is swappable VA nice,

NOTE Confidence: 0.63911235

00:31:11.010 --> 00:31:11.940
human readable message.

NOTE Confidence: 0.63911235

00:31:11.940 --> 00:31:13.180
You must be swappable,

NOTE Confidence: 0.63911235

00:31:13.180 --> 00:31:16.376
that's great, this is just.

NOTE Confidence: 0.63911235

00:31:16.376 --> 00:31:17.642
Wrapping constrained swappable

NOTE Confidence: 0.63911235

00:31:17.642 --> 00:31:21.390
VE must be swappable, Yep.

NOTE Confidence: 0.63911235

00:31:21.390 --> 00:31:23.158
Making sure that we're not adding no throw,

NOTE Confidence: 0.63911235

00:31:23.160 --> 00:31:24.548
there shouldn't be OK.

NOTE Confidence: 0.63911235

00:31:24.548 --> 00:31:25.589
That's all good.

NOTE Confidence: 0.63911235

00:31:25.590 --> 00:31:27.230
Removing the constraint about

NOTE Confidence: 0.63911235

00:31:27.230 --> 00:31:28.050
equality comparable.

NOTE Confidence: 0.63911235

00:31:28.050 --> 00:31:29.451
That's all good.

NOTE Confidence: 0.63911235

00:31:29.451 --> 00:31:31.786
Love the node discard friend.

NOTE Confidence: 0.63911235

00:31:31.790 --> 00:31:33.022
And the deduction guide.

NOTE Confidence: 0.63911235

00:31:33.022 --> 00:31:33.330
Yes,

NOTE Confidence: 0.63911235

00:31:33.330 --> 00:31:36.130
I remember I noticed that this was missed

NOTE Confidence: 0.63911235

00:31:36.130 --> 00:31:39.006
and then that first line test coverage.

NOTE Confidence: 0.63911235

00:31:39.010 --> 00:31:41.970
Moving down there has exceptions.

NOTE Confidence: 0.63911235

00:31:41.970 --> 00:31:43.790
Adding in the protected.

NOTE Confidence: 0.63911235

00:31:43.790 --> 00:31:46.026
Oh yeah, I think this was this was

NOTE Confidence: 0.63911235

00:31:46.026 --> 00:31:48.050
depicted in the standard, wasn't it?

NOTE Confidence: 0.63911235

00:31:48.050 --> 00:31:49.760
Let's go back.

NOTE Confidence: 0.63911235

00:31:49.760 --> 00:31:52.400
Out of the Scary Court language

NOTE Confidence: 0.63911235

00:31:52.400 --> 00:31:54.160
into the library world,

NOTE Confidence: 0.63911235

00:31:54.160 --> 00:31:57.348
expected objects to 15

NOTE Confidence: 0.63911235

00:31:57.348 --> 00:31:59.739
separate sections here.

NOTE Confidence: 0.63911235

00:31:59.740 --> 00:32:03.619
That expected access.

NOTE Confidence: 0.63911235

00:32:03.620 --> 00:32:04.728
Why are these protected?

NOTE Confidence: 0.830640417142857

00:32:06.990 --> 00:32:08.915
Are we looking at the void mean?

NOTE Confidence: 0.830640417142857

00:32:08.920 --> 00:32:12.840
Hmm. The void one is supposed

NOTE Confidence: 0.830640417142857

00:32:12.840 --> 00:32:14.048
to have default copy.

NOTE Confidence: 0.830640417142857

00:32:14.050 --> 00:32:16.078
It's supposed to have all of

NOTE Confidence: 0.830640417142857

00:32:16.078 --> 00:32:19.910
them and the ddor. So. Uh.

NOTE Confidence: 0.772016325555556

00:32:22.360 --> 00:32:23.764
We're adding these.

NOTE Confidence: 0.772016325555556

00:32:23.764 --> 00:32:26.572
Do we have a secret constructor?

NOTE Confidence: 0.772016325555556

00:32:26.580 --> 00:32:29.100
We're making them protected.

NOTE Confidence: 0.772016325555556

00:32:29.100 --> 00:32:30.408
This is on the Void 1.

NOTE Confidence: 0.804240266875

00:32:32.430 --> 00:32:33.926
Oh, here's the protected.

NOTE Confidence: 0.804240266875

00:32:33.926 --> 00:32:36.651
The void one is supposed to have

NOTE Confidence: 0.804240266875

00:32:36.651 --> 00:32:40.930
protected all of these things. And.

NOTE Confidence: 0.804240266875

00:32:40.930 --> 00:32:42.166
They didn't exist at all before,

NOTE Confidence: 0.804240266875

00:32:42.170 --> 00:32:43.510
so they were public.

NOTE Confidence: 0.804240266875

00:32:43.510 --> 00:32:45.358
That was the issue that was

NOTE Confidence: 0.804240266875

00:32:45.358 --> 00:32:46.120
the observable difference,

NOTE Confidence: 0.804240266875

00:32:46.120 --> 00:32:49.172
and now miss is making them all

NOTE Confidence: 0.804240266875

00:32:49.172 --> 00:32:51.360
protected and defaulted excellent.

NOTE Confidence: 0.804240266875

00:32:51.360 --> 00:32:53.178
And then moving down that non

NOTE Confidence: 0.804240266875

00:32:53.178 --> 00:32:54.390
standard has exceptional stuff.

NOTE Confidence: 0.804240266875

00:32:54.390 --> 00:32:56.628
OK, that's all good. I'm bad.

NOTE Confidence: 0.804240266875

00:32:56.630 --> 00:32:58.597
Expect to access this constructor is header

NOTE Confidence: 0.804240266875

00:32:58.597 --> 00:33:01.017
only and does not need to be clear this call.

NOTE Confidence: 0.804240266875

00:33:01.020 --> 00:33:02.160
That's correct.

NOTE Confidence: 0.804240266875

00:33:02.160 --> 00:33:07.160
We comment that it's strengthened. Uhm?

NOTE Confidence: 0.804240266875

00:33:07.160 --> 00:33:10.496
We need an occurs below for the yeah.

NOTE Confidence: 0.804240266875

00:33:10.500 --> 00:33:12.090
Well, this only twice right?

NOTE Confidence: 0.804240266875

00:33:12.090 --> 00:33:14.790
Yeah, it's probably only the twice.

NOTE Confidence: 0.804240266875

00:33:14.790 --> 00:33:16.640
And then Yep auto removing

NOTE Confidence: 0.804240266875

00:33:16.640 --> 00:33:18.120
constructs because nothing here

NOTE Confidence: 0.804240266875

00:33:18.120 --> 00:33:19.949
is constexpr or otherwise.

NOTE Confidence: 0.804240266875

00:33:19.950 --> 00:33:20.758
The change is saying.

NOTE Confidence: 0.804240266875

00:33:20.758 --> 00:33:23.508
OK, that all looks good.

NOTE Confidence: 0.804240266875

00:33:23.510 --> 00:33:26.168
Change this to set occurs below.

NOTE Confidence: 0.004491687

00:33:31.630 --> 00:33:37.390
And. Uh, is that address, parentheses?

NOTE Confidence: 0.004491687

00:33:37.390 --> 00:33:41.527
And all these accessors don't need constexpr.

NOTE Confidence: 0.004491687

00:33:41.530 --> 00:33:43.126
OK, expected itself and this is

NOTE Confidence: 0.004491687

00:33:43.126 --> 00:33:45.109
getting to the point where I need

NOTE Confidence: 0.004491687

00:33:45.109 --> 00:33:46.549
to start reviewing this anyways.

NOTE Confidence: 0.004491687

00:33:46.550 --> 00:33:48.356
Unconstrained and the

NOTE Confidence: 0.004491687

00:33:48.356 --> 00:33:50.764
same with the friendship,

NOTE Confidence: 0.004491687

00:33:50.770 --> 00:33:52.120
then a bunch of stuff happening,

NOTE Confidence: 0.004491687

00:33:52.120 --> 00:33:52.980
so we'll get down there.

NOTE Confidence: 0.71478759

00:33:55.400 --> 00:34:01.283
Anything else of notes? Stable name there.

NOTE Confidence: 0.71478759

00:34:01.283 --> 00:34:05.100
This keeps recurring. Some new lines.

NOTE Confidence: 0.749930806

00:34:07.910 --> 00:34:09.750
OK, again removing the constraints.

NOTE Confidence: 0.749930806

00:34:09.750 --> 00:34:11.577
OK so just in in line with

NOTE Confidence: 0.749930806

00:34:11.577 --> 00:34:13.230
everything that we've seen elsewhere.

NOTE Confidence: 0.749930806

00:34:13.230 --> 00:34:14.970
OK, this is all looking good.

NOTE Confidence: 0.749930806

00:34:14.970 --> 00:34:16.674
OK, so now let's look at

NOTE Confidence: 0.749930806

00:34:16.674 --> 00:34:18.300
the changes as a whole.

NOTE Confidence: 0.7900685

00:34:21.380 --> 00:34:21.950
So we've caught.

NOTE Confidence: 0.838806036

00:34:24.480 --> 00:34:27.416
You make my test changes. Probably not.

NOTE Confidence: 0.838806036

00:34:27.416 --> 00:34:29.327
I did look at the test delta,

NOTE Confidence: 0.838806036

00:34:29.330 --> 00:34:31.034
but the only the only test

NOTE Confidence: 0.838806036

00:34:31.034 --> 00:34:32.630
delta was the the guide.

NOTE Confidence: 0.838806036

00:34:32.630 --> 00:34:33.876
Nothing else has changed in the test,

NOTE Confidence: 0.838806036

00:34:33.880 --> 00:34:34.804
so if you had requested changes

NOTE Confidence: 0.838806036

00:34:34.804 --> 00:34:35.860
the test they have not happened.

NOTE Confidence: 0.838806036

00:34:35.860 --> 00:34:36.864
That is complained about

NOTE Confidence: 0.838806036

00:34:36.864 --> 00:34:37.868
the enum class thing,

NOTE Confidence: 0.838806036

00:34:37.870 --> 00:34:40.566
but nobody agrees with me on that so.

NOTE Confidence: 0.838806036

00:34:40.570 --> 00:34:42.418
There's a resolution Charlie is weird.

NOTE Confidence: 0.51470325

00:34:45.900 --> 00:34:49.980
OK, so you know, Clarksburg.

NOTE Confidence: 0.51470325

00:34:49.980 --> 00:34:52.200
I guess we can take a look at where was it?

NOTE Confidence: 0.51470325

00:34:52.200 --> 00:34:53.420
It's in the test,

NOTE Confidence: 0.51470325

00:34:53.420 --> 00:34:55.644
it's it's in the template with a

NOTE Confidence: 0.51470325

00:34:55.644 --> 00:34:57.624
bunch of non type template parameter

NOTE Confidence: 0.51470325

00:34:57.624 --> 00:34:59.975
like you know class like all these.

NOTE Confidence: 0.51470325

00:34:59.975 --> 00:35:02.840
So a bunch of a bunch of enum

NOTE Confidence: 0.51470325

00:35:02.840 --> 00:35:05.350
classes that are actually bools.

NOTE Confidence: 0.51470325

00:35:05.350 --> 00:35:08.198
And I'm just like.

NOTE Confidence: 0.51470325

00:35:08.200 --> 00:35:10.828
Making them normal enums.

NOTE Confidence: 0.51470325

00:35:10.828 --> 00:35:14.252
And having the NTP's be actual

NOTE Confidence: 0.51470325

00:35:14.252 --> 00:35:16.741
pools would be easier. Umm?

NOTE Confidence: 0.51470325

00:35:16.741 --> 00:35:20.047
Honestly, I disagree like I like,

NOTE Confidence: 0.51470325

00:35:20.050 --> 00:35:21.890
even though it's highly verbose,

NOTE Confidence: 0.51470325

00:35:21.890 --> 00:35:22.934
this avoids confusion.

NOTE Confidence: 0.51470325

00:35:22.934 --> 00:35:25.722
The problem with if everybody's a bool then

NOTE Confidence: 0.51470325

00:35:25.722 --> 00:35:28.010
your confusion is very easily as I know,

NOTE Confidence: 0.51470325

00:35:28.010 --> 00:35:31.066
yeah, but this way it can't be confused.

NOTE Confidence: 0.51470325

00:35:31.070 --> 00:35:33.110
And it's consistent with the pattern used in,

NOTE Confidence: 0.51470325

00:35:33.110 --> 00:35:34.542
like the ranges test,

NOTE Confidence: 0.51470325

00:35:34.542 --> 00:35:37.330
where there's like is common range whatever,

NOTE Confidence: 0.51470325

00:35:37.330 --> 00:35:38.345
right?

NOTE Confidence: 0.51470325

00:35:38.345 --> 00:35:40.840
Yeah, here's a case where like,

NOTE Confidence: 0.51470325

00:35:40.840 --> 00:35:42.142
like the lazy thing is absolutely

NOTE Confidence: 0.51470325

00:35:42.142 --> 00:35:43.588
to use bowls and we actually

NOTE Confidence: 0.51470325

00:35:43.588 --> 00:35:44.656
have been lazy elsewhere.

NOTE Confidence: 0.51470325

00:35:44.660 --> 00:35:45.490
This is like the more

NOTE Confidence: 0.51470325

00:35:45.490 --> 00:35:46.154
disciplined thing to do.

NOTE Confidence: 0.51470325

00:35:46.160 --> 00:35:49.716
Yeah, it's so, so I think it.

NOTE Confidence: 0.51470325

00:35:49.720 --> 00:35:52.478
Doing it with rules makes the task

NOTE Confidence: 0.51470325

00:35:52.478 --> 00:35:57.390
easier to read, and it makes them it.

NOTE Confidence: 0.51470325

00:35:57.390 --> 00:35:59.819
Adds a way to screw operating them.

NOTE Confidence: 0.51470325

00:35:59.820 --> 00:36:00.118
Hmm,

NOTE Confidence: 0.51470325

00:36:00.118 --> 00:36:01.906
but would your concern be addressed

NOTE Confidence: 0.51470325

00:36:01.906 --> 00:36:04.127
if there were shorter names for this?

NOTE Confidence: 0.51470325

00:36:04.130 --> 00:36:04.842
Not really,

NOTE Confidence: 0.51470325

00:36:04.842 --> 00:36:05.198
no.

NOTE Confidence: 0.8462492575

00:36:08.770 --> 00:36:12.110
It's yeah, it's like.

NOTE Confidence: 0.8462492575

00:36:12.110 --> 00:36:14.030
And also, that's kind of

NOTE Confidence: 0.8462492575

00:36:14.030 --> 00:36:16.270
weird to have these kind of.

NOTE Confidence: 0.8462492575

00:36:16.270 --> 00:36:18.370
School you know class thing?

NOTE Confidence: 0.8462492575

00:36:18.370 --> 00:36:19.588
They're just sort of like strongly

NOTE Confidence: 0.8462492575

00:36:19.588 --> 00:36:20.748
typed bulls, but yeah, I mean,

NOTE Confidence: 0.8462492575

00:36:20.748 --> 00:36:22.884
you know it is a sort of personal preference

NOTE Confidence: 0.8462492575

00:36:22.884 --> 00:36:24.804
like you're entitled to your opinion.

NOTE Confidence: 0.8462492575

00:36:24.810 --> 00:36:28.130
Others are entitled to disagree.

NOTE Confidence: 0.8462492575

00:36:28.130 --> 00:36:30.202
And in test code I will say I

NOTE Confidence: 0.8462492575

00:36:30.202 --> 00:36:32.700
care less to care much more about.

NOTE Confidence: 0.8462492575

00:36:32.700 --> 00:36:33.820
Not getting confused about

NOTE Confidence: 0.8462492575

00:36:33.820 --> 00:36:34.940
what things are fine.

NOTE Confidence: 0.8462492575

00:36:34.940 --> 00:36:36.488
I'm fine for everybody taking orange.

NOTE Confidence: 0.9436724

00:36:38.760 --> 00:36:42.480
OK, sounds good, expected maybe I

NOTE Confidence: 0.9436724

00:36:42.480 --> 00:36:44.814
should this this screen that I'm

NOTE Confidence: 0.9436724

00:36:44.814 --> 00:36:47.026
presenting on is not quite big enough

NOTE Confidence: 0.9436724

00:36:47.026 --> 00:36:49.698
to do side by side. The last time

NOTE Confidence: 0.9436724

00:36:49.698 --> 00:36:52.260
I tried it was very very narrow.

NOTE Confidence: 0.9436724

00:36:52.260 --> 00:36:53.320
Yeah, it's a little annoying.

NOTE Confidence: 0.9436724

00:36:53.320 --> 00:36:55.900
I'll just flip through as necessary.

NOTE Confidence: 0.9436724

00:36:55.900 --> 00:36:57.124
OK, so for expected,

NOTE Confidence: 0.9436724

00:36:57.124 --> 00:36:58.654
we've got some type defs.

NOTE Confidence: 0.842916622

00:37:00.910 --> 00:37:03.322
And it doesn't even offer like

NOTE Confidence: 0.842916622

00:37:03.322 --> 00:37:07.470
2/3 and 1/3 OK. We get down here.

NOTE Confidence: 0.842916622

00:37:07.470 --> 00:37:09.066
So here's my highlighter,

NOTE Confidence: 0.842916622

00:37:09.066 --> 00:37:11.460
so we've got template on class

NOTE Confidence: 0.842916622

00:37:11.536 --> 00:37:13.888
tie and class air class expected.

NOTE Confidence: 0.842916622

00:37:13.890 --> 00:37:15.334
We can declare friendship

NOTE Confidence: 0.842916622

00:37:15.334 --> 00:37:16.778
without an access specifier,

NOTE Confidence: 0.842916622

00:37:16.780 --> 00:37:18.580
because access doesn't matter there.

NOTE Confidence: 0.842916622

00:37:18.580 --> 00:37:20.980
We grant friendship to ourselves,

NOTE Confidence: 0.842916622

00:37:20.980 --> 00:37:23.230
so every expected can access

NOTE Confidence: 0.842916622

00:37:23.230 --> 00:37:24.580
every other expected.

NOTE Confidence: 0.842916622

00:37:24.580 --> 00:37:25.768
That seems reasonable.

NOTE Confidence: 0.842916622

00:37:25.768 --> 00:37:28.540
Probably need that for like the conversion.

NOTE Confidence: 0.842916622

00:37:28.540 --> 00:37:29.728
And then in the public region,

NOTE Confidence: 0.842916622

00:37:29.730 --> 00:37:32.103
we've got using value type as T

NOTE Confidence: 0.842916622

00:37:32.103 --> 00:37:34.518
using error type as east using

NOTE Confidence: 0.842916622

00:37:34.518 --> 00:37:36.723
unexpected type as unexpected error.

NOTE Confidence: 0.842916622

00:37:36.730 --> 00:37:38.944
We've got a rebind template on

NOTE Confidence: 0.842916622

00:37:38.944 --> 00:37:41.150
Utah using rebind as expected.

NOTE Confidence: 0.842916622

00:37:41.150 --> 00:37:43.760
You error type. That's all good.

NOTE Confidence: 0.842916622

00:37:43.760 --> 00:37:46.830
And we've got some constructors.

NOTE Confidence: 0.842916622

00:37:46.830 --> 00:37:48.258
OK, I'm gonna check those stable lines

NOTE Confidence: 0.842916622

00:37:48.258 --> 00:37:49.838
because we had issues with them before.

NOTE Confidence: 0.842916622

00:37:49.840 --> 00:37:52.116
Expected object ctor, yes?

NOTE Confidence: 0.842916622

00:37:52.116 --> 00:37:55.530
So we've got a constexpr expected.

NOTE Confidence: 0.842916622

00:37:55.530 --> 00:37:59.009
That is being strengthened is no throw,

NOTE Confidence: 0.842916622

00:37:59.010 --> 00:38:00.573
default constructible tie

NOTE Confidence: 0.842916622

00:38:00.573 --> 00:38:03.178
cause this one does have.

NOTE Confidence: 0.765751923333333

00:38:06.130 --> 00:38:08.740
System does have a value OK.

NOTE Confidence: 0.765751923333333

00:38:08.740 --> 00:38:10.132
And then this one actually does

NOTE Confidence: 0.765751923333333

00:38:10.132 --> 00:38:11.060
have a standard constraint,

NOTE Confidence: 0.765751923333333

00:38:11.060 --> 00:38:13.610
so requires this correct to see

NOTE Confidence: 0.765751923333333

00:38:13.610 --> 00:38:15.393
here is default constructible.

NOTE Confidence: 0.765751923333333

00:38:15.393 --> 00:38:17.197
Vt must be true.

NOTE Confidence: 0.765751923333333

00:38:17.200 --> 00:38:18.536
We value initialize Val.

NOTE Confidence: 0.765751923333333

00:38:18.536 --> 00:38:20.540
We said has value to be

NOTE Confidence: 0.765751923333333

00:38:20.609 --> 00:38:22.139
true and we can throw,

NOTE Confidence: 0.765751923333333

00:38:22.140 --> 00:38:23.580
but we've strengthened the

NOTE Confidence: 0.765751923333333

00:38:23.580 --> 00:38:24.660
exception specification correctly,

NOTE Confidence: 0.765751923333333

00:38:24.660 --> 00:38:26.092
so that's all good.

NOTE Confidence: 0.765751923333333

00:38:26.092 --> 00:38:28.240
Now we're going to suppress claim

NOTE Confidence: 0.765751923333333

00:38:28.313 --> 00:38:30.419
form it off because Clang format

NOTE Confidence: 0.765751923333333

00:38:30.419 --> 00:38:32.240
does not handle the complicated

NOTE Confidence: 0.765751923333333

00:38:32.240 --> 00:38:33.880
requires costs very nicely,

NOTE Confidence: 0.765751923333333

00:38:33.880 --> 00:38:36.640
yet I really hope that that will improve.

NOTE Confidence: 0.847094305555556

00:38:38.920 --> 00:38:40.092
Which one is this?

NOTE Confidence: 0.847094305555556

00:38:40.092 --> 00:38:41.557
Looks like a copy constructor.

NOTE Confidence: 0.847094305555556

00:38:41.560 --> 00:38:45.160
OK, there's a copy,

NOTE Confidence: 0.847094305555556

00:38:45.160 --> 00:38:46.960
sometimes explicit.

NOTE Confidence: 0.847094305555556

00:38:46.960 --> 00:38:49.355
It's very interesting to see

NOTE Confidence: 0.847094305555556

00:38:49.355 --> 00:38:51.750
conditional explicit on a copy.

NOTE Confidence: 0.847094305555556

00:38:51.750 --> 00:38:53.070
What is going on here?

NOTE Confidence: 0.847094305555556

00:38:53.070 --> 00:38:56.410
I especially it's differently constrained.

NOTE Confidence: 0.847094305555556

00:38:56.410 --> 00:38:59.210
Yeah, just how far something going on.

NOTE Confidence: 0.847094305555556

00:38:59.210 --> 00:39:00.400
OK so.

NOTE Confidence: 0.78556787

00:39:02.730 --> 00:39:05.080
You're OK, here we go.

NOTE Confidence: 0.78556787

00:39:05.080 --> 00:39:06.688
Is defined as deleted.

NOTE Confidence: 0.78556787

00:39:06.688 --> 00:39:07.894
The constructors trivial.

NOTE Confidence: 0.801335707142857

00:39:10.980 --> 00:39:13.228
These are the conditionally

NOTE Confidence: 0.801335707142857

00:39:13.228 --> 00:39:14.914
explicit converting constructors.

NOTE Confidence: 0.801335707142857

00:39:14.920 --> 00:39:17.740
What about the copy constructor?

NOTE Confidence: 0.801335707142857

00:39:17.740 --> 00:39:18.652
That's weird.

NOTE Confidence: 0.801335707142857

00:39:18.652 --> 00:39:21.844
OK, so the standard depicts this explicitly

NOTE Confidence: 0.801335707142857

00:39:21.844 --> 00:39:25.125
below for expecting account expected UG RAF.

NOTE Confidence: 0.801335707142857

00:39:25.130 --> 00:39:26.649
But none of that cflow stuff were

NOTE Confidence: 0.801335707142857

00:39:26.649 --> 00:39:27.990
just the plain copy and move.

NOTE Confidence: 0.801335707142857

00:39:27.990 --> 00:39:30.166
Is this just a mistake in the synopsis,

NOTE Confidence: 0.801335707142857

00:39:30.170 --> 00:39:31.373
the class definition?

NOTE Confidence: 0.801335707142857

00:39:31.373 --> 00:39:33.779
That must be a mistake from

NOTE Confidence: 0.801335707142857

00:39:33.779 --> 00:39:35.687
the Ingress Paper. Yeah,

NOTE Confidence: 0.801335707142857

00:39:35.687 --> 00:39:38.256
I would swear I remember telling Jonathan

NOTE Confidence: 0.801335707142857

00:39:38.256 --> 00:39:41.504
to fix this during one of the code reviews,

NOTE Confidence: 0.801335707142857

00:39:41.510 --> 00:39:43.825
and I'm guessing he fixed

NOTE Confidence: 0.801335707142857

00:39:43.825 --> 00:39:46.140
the details but not the.

NOTE Confidence: 0.801335707142857

00:39:46.140 --> 00:39:47.283
Synopsis declarations yeah,

NOTE Confidence: 0.801335707142857

00:39:47.283 --> 00:39:48.807
these should be submitted

NOTE Confidence: 0.801335707142857

00:39:48.807 --> 00:39:50.340
as an editorial issue?

NOTE Confidence: 0.801335707142857

00:39:50.340 --> 00:39:53.040
Yeah, I'll submit it and add fix for this.

NOTE Confidence: 0.801335707142857

00:39:53.040 --> 00:39:54.440
OK, you are awesome Casey.

NOTE Confidence: 0.801335707142857

00:39:54.440 --> 00:39:56.480
Thank you.

NOTE Confidence: 0.801335707142857

00:39:56.480 --> 00:39:57.152
Uh, OK,

NOTE Confidence: 0.801335707142857

00:39:57.152 --> 00:39:58.832
so that's good because copy

NOTE Confidence: 0.801335707142857

00:39:58.832 --> 00:40:00.267
constructors in the standard

NOTE Confidence: 0.801335707142857

00:40:00.267 --> 00:40:02.415
are not supposed to be explicit.

NOTE Confidence: 0.801335707142857

00:40:02.420 --> 00:40:03.384
So let's ignore that.

NOTE Confidence: 0.801335707142857

00:40:03.384 --> 00:40:04.830
Let's just look at the definition.

NOTE Confidence: 0.72437186

00:40:07.040 --> 00:40:09.310
OK, yeah, the difference there.

NOTE Confidence: 0.72437186

00:40:09.310 --> 00:40:11.098
There was actually a since this.

NOTE Confidence: 0.72437186

00:40:11.100 --> 00:40:13.053
I saw it come up on a forum thread.

NOTE Confidence: 0.72437186

00:40:13.060 --> 00:40:14.448
An explicit copy constructor

NOTE Confidence: 0.72437186

00:40:14.448 --> 00:40:16.900
seems real tempting to a lot of

NOTE Confidence: 0.72437186

00:40:16.900 --> 00:40:18.813
people for some reason to be OK,

NOTE Confidence: 0.72437186

00:40:18.813 --> 00:40:20.430
let's be clear about like when we're

NOTE Confidence: 0.72437186

00:40:20.486 --> 00:40:22.544
accidentally going to copy values or not.

NOTE Confidence: 0.72437186

00:40:22.550 --> 00:40:25.406
The problem is that the standard if you

NOTE Confidence: 0.72437186

00:40:25.406 --> 00:40:28.115
give types to the standard library when

NOTE Confidence: 0.72437186

00:40:28.115 --> 00:40:30.040
it expects them to be copy constructible,

NOTE Confidence: 0.72437186

00:40:30.040 --> 00:40:32.100
it expects them to be

NOTE Confidence: 0.72437186

00:40:32.100 --> 00:40:33.336
implicitly copy constructible.

NOTE Confidence: 0.72437186

00:40:33.340 --> 00:40:37.050
Meaning that expressions like T.

NOTE Confidence: 0.72437186

00:40:37.050 --> 00:40:40.056
Equal B where you use copy list in it

NOTE Confidence: 0.72437186

00:40:40.056 --> 00:40:42.774
that needs to work and if it doesn't,

NOTE Confidence: 0.72437186

00:40:42.774 --> 00:40:44.354
then the standard is free

NOTE Confidence: 0.72437186

00:40:44.354 --> 00:40:46.290
to maybe reject your code.

NOTE Confidence: 0.72437186

00:40:46.290 --> 00:40:47.150
Maybe maybe it won't,

NOTE Confidence: 0.72437186

00:40:47.150 --> 00:40:48.690
maybe maybe it will accept your code.

NOTE Confidence: 0.72437186

00:40:48.690 --> 00:40:51.098
It's possible, and apparently it does happen,

NOTE Confidence: 0.72437186

00:40:51.100 --> 00:40:52.189
but you shouldn't.

NOTE Confidence: 0.72437186

00:40:52.189 --> 00:40:54.004
You know violate the requirements

NOTE Confidence: 0.72437186

00:40:54.004 --> 00:40:56.210
of the standard for no reason,

NOTE Confidence: 0.72437186

00:40:56.210 --> 00:40:58.514
so types really should not have

NOTE Confidence: 0.72437186

00:40:58.514 --> 00:40:59.666
explicit copy constructors.

NOTE Confidence: 0.72437186

00:40:59.670 --> 00:41:00.990
The vast majority of the time,

NOTE Confidence: 0.72437186

00:41:00.990 --> 00:41:02.325
and that's why we originally

NOTE Confidence: 0.72437186

00:41:02.325 --> 00:41:03.990
confused to see the explicit there.

NOTE Confidence: 0.72437186

00:41:03.990 --> 00:41:06.564
And I'm glad to see it is not actually

NOTE Confidence: 0.72437186

00:41:06.564 --> 00:41:09.273
in the standard. So we've got.

NOTE Confidence: 0.72437186

00:41:09.273 --> 00:41:12.159
There is a second overload here

NOTE Confidence: 0.72437186

00:41:12.159 --> 00:41:15.138
that's for this triviality stuff.

NOTE Confidence: 0.72437186

00:41:15.140 --> 00:41:17.380
So.

NOTE Confidence: 0.72437186

00:41:17.380 --> 00:41:21.594
Let's get all this check so expected

NOTE Confidence: 0.72437186

00:41:21.600 --> 00:41:23.178
cost expected ref other we don't

NOTE Confidence: 0.72437186

00:41:23.178 --> 00:41:24.995
need to name the parameter when

NOTE Confidence: 0.72437186

00:41:24.995 --> 00:41:26.467
we were defaulting requires.

NOTE Confidence: 0.72437186

00:41:26.467 --> 00:41:28.909
So when is trivially copy constructible

NOTE Confidence: 0.72437186

00:41:28.909 --> 00:41:31.975
V tie and is trivially copy constructible

NOTE Confidence: 0.72437186

00:41:31.975 --> 00:41:34.627
of error when they're both true,

NOTE Confidence: 0.72437186

00:41:34.630 --> 00:41:35.980
then the constructor can be trivial,

NOTE Confidence: 0.72437186

00:41:35.980 --> 00:41:37.640
and we default all thing.

NOTE Confidence: 0.72437186

00:41:37.640 --> 00:41:38.864
So this is good,

NOTE Confidence: 0.72437186

00:41:38.864 --> 00:41:41.309
except that the parameter need not be named.

NOTE Confidence: 0.837797383571429

00:41:43.790 --> 00:41:45.686
Maybe I'll comment on both lines so you

NOTE Confidence: 0.837797383571429

00:41:45.686 --> 00:41:47.258
can actually see the equals default.

NOTE Confidence: 0.697826785

00:41:49.640 --> 00:41:57.190
When? Equals default ING. Umm?

NOTE Confidence: 0.697826785

00:41:57.190 --> 00:42:04.200
We conventionally don't bother naming.

NOTE Confidence: 0.697826785

00:42:04.200 --> 00:42:05.730
The function parameter.

NOTE Confidence: 0.842319444444444

00:42:07.840 --> 00:42:10.171
The idea behind here is that default

NOTE Confidence: 0.842319444444444

00:42:10.171 --> 00:42:12.095
says hey, just go generate with the

NOTE Confidence: 0.842319444444444

00:42:12.095 --> 00:42:13.371
compiler generate, so that assumes

NOTE Confidence: 0.842319444444444

00:42:13.371 --> 00:42:14.913
that you have an understanding of

NOTE Confidence: 0.842319444444444

00:42:14.913 --> 00:42:16.560
what the compiler would generate,

NOTE Confidence: 0.842319444444444

00:42:16.560 --> 00:42:18.290
and so naming the template

NOTE Confidence: 0.842319444444444

00:42:18.290 --> 00:42:20.020
parameter is not really useful.

NOTE Confidence: 0.842319444444444

00:42:20.020 --> 00:42:21.916
That applies to, like the constructor,

NOTE Confidence: 0.842319444444444

00:42:21.920 --> 00:42:22.988
A defaulted spaceship

NOTE Confidence: 0.842319444444444

00:42:22.988 --> 00:42:24.056
comparison operator like.

NOTE Confidence: 0.842319444444444

00:42:24.060 --> 00:42:26.076
We know they're going to take left and right,

NOTE Confidence: 0.842319444444444

00:42:26.080 --> 00:42:27.424
so there's really no point in

NOTE Confidence: 0.842319444444444

00:42:27.424 --> 00:42:28.320
naming the function parameter.

NOTE Confidence: 0.9546593

00:42:30.480 --> 00:42:34.030
OK. Ohh, let's see.

NOTE Confidence: 0.9546593

00:42:34.030 --> 00:42:36.850
So let's that's the trivial bit.

NOTE Confidence: 0.9546593

00:42:36.850 --> 00:42:39.070
This one then needs to be

NOTE Confidence: 0.9546593

00:42:39.070 --> 00:42:40.550
constrained the other way.

NOTE Confidence: 0.9546593

00:42:40.550 --> 00:42:42.735
So, so here's an interesting

NOTE Confidence: 0.9546593

00:42:42.735 --> 00:42:44.920
case where you can see.

NOTE Confidence: 0.9546593

00:42:44.920 --> 00:42:46.160
The library is doing something

NOTE Confidence: 0.9546593

00:42:46.160 --> 00:42:48.064
that is verbose and a lot of people

NOTE Confidence: 0.9546593

00:42:48.064 --> 00:42:49.499
will look at it and with some

NOTE Confidence: 0.9546593

00:42:49.549 --> 00:42:50.977
justification they'll say ohh,

NOTE Confidence: 0.9546593

00:42:50.980 --> 00:42:51.912
look at how complicated

NOTE Confidence: 0.9546593

00:42:51.912 --> 00:42:53.077
C Plus has become like.

NOTE Confidence: 0.9546593

00:42:53.080 --> 00:42:54.406
Look, look at all these requires

NOTE Confidence: 0.9546593

00:42:54.406 --> 00:42:55.807
that you gotta add and there's

NOTE Confidence: 0.9546593

00:42:55.807 --> 00:42:56.977
there's some error to that

NOTE Confidence: 0.9546593

00:42:56.977 --> 00:42:58.380
claim like this is complicated,

NOTE Confidence: 0.9546593

00:42:58.380 --> 00:43:01.107
but you can also view it as the

NOTE Confidence: 0.9546593

00:43:01.107 --> 00:43:03.342
library is trying to express

NOTE Confidence: 0.9546593

00:43:03.342 --> 00:43:05.713
something that is actually quite

NOTE Confidence: 0.9546593

00:43:05.713 --> 00:43:08.238
convenient and intuitive to users.

NOTE Confidence: 0.9546593

00:43:08.240 --> 00:43:10.140
Like saying this constructor exists

NOTE Confidence: 0.9546593

00:43:10.140 --> 00:43:12.410
only if you can actually copy

NOTE Confidence: 0.9546593

00:43:12.410 --> 00:43:14.517
both the type and the error type,

NOTE Confidence: 0.9546593

00:43:14.520 --> 00:43:15.856
and that it's trivial.

NOTE Confidence: 0.9546593

00:43:15.856 --> 00:43:17.526
I think it doesn't generate

NOTE Confidence: 0.9546593

00:43:17.526 --> 00:43:19.530
you know interesting code Gen.

NOTE Confidence: 0.9546593

00:43:19.530 --> 00:43:21.242
If the type in the error are just

NOTE Confidence: 0.9546593

00:43:21.242 --> 00:43:22.340
trivially copy constructible,

NOTE Confidence: 0.9546593

00:43:22.340 --> 00:43:24.770
like they're just integers or something.

NOTE Confidence: 0.9546593

00:43:24.770 --> 00:43:26.522
So saying that the constructor is

NOTE Confidence: 0.9546593

00:43:26.522 --> 00:43:28.291
sort of transparent in some way

NOTE Confidence: 0.9546593

00:43:28.291 --> 00:43:30.188
that you get what it would generate

NOTE Confidence: 0.9546593

00:43:30.188 --> 00:43:32.140
without extra library machinery on top.

NOTE Confidence: 0.9546593

00:43:32.140 --> 00:43:33.772
That would make it non trivial

NOTE Confidence: 0.9546593

00:43:33.772 --> 00:43:35.450
or always present or something,

NOTE Confidence: 0.9546593

00:43:35.450 --> 00:43:38.570
so these constraints are all good.

NOTE Confidence: 0.9546593

00:43:38.570 --> 00:43:40.245
This makes the type behave

NOTE Confidence: 0.9546593

00:43:40.245 --> 00:43:41.250
in predictable ways,

NOTE Confidence: 0.9546593

00:43:41.250 --> 00:43:42.750
but currently we don't have

NOTE Confidence: 0.9546593

00:43:42.750 --> 00:43:44.705
a super direct way to express

NOTE Confidence: 0.9546593

00:43:44.705 --> 00:43:46.360
this in the core language.

NOTE Confidence: 0.9546593

00:43:46.360 --> 00:43:48.502
So we manually construct it using

NOTE Confidence: 0.9546593

00:43:48.502 --> 00:43:50.920
the system of two constructors,

NOTE Confidence: 0.9546593

00:43:50.920 --> 00:43:52.020
one of which is defaulted,

NOTE Confidence: 0.9546593

00:43:52.020 --> 00:43:53.500
one of which is implemented,

NOTE Confidence: 0.9546593

00:43:53.500 --> 00:43:54.961
and they're constrained

NOTE Confidence: 0.9546593

00:43:54.961 --> 00:43:56.909
in mostly opposite ways.

NOTE Confidence: 0.9546593

00:43:56.910 --> 00:43:59.820
But this one also requires

NOTE Confidence: 0.9546593

00:43:59.820 --> 00:44:00.984
copy constructibility.

NOTE Confidence: 0.9546593

00:44:00.990 --> 00:44:02.360
Because if it's not trivially

NOTE Confidence: 0.9546593

00:44:02.360 --> 00:44:02.908
copy constructible,

NOTE Confidence: 0.9546593

00:44:02.910 --> 00:44:06.116
maybe it's not copy constructible at all.

NOTE Confidence: 0.9546593

00:44:06.120 --> 00:44:06.461
And.

NOTE Confidence: 0.9546593

00:44:06.461 --> 00:44:09.189
There's currently no better way to do this.

NOTE Confidence: 0.9546593

00:44:09.190 --> 00:44:10.730
Maybe there will be in the future.

NOTE Confidence: 0.9546593

00:44:10.730 --> 00:44:12.571
We've seen time and time again over

NOTE Confidence: 0.9546593

00:44:12.571 --> 00:44:14.328
the long history of the standard

NOTE Confidence: 0.9546593

00:44:14.328 --> 00:44:16.152
that when the libraries do very

NOTE Confidence: 0.9546593

00:44:16.152 --> 00:44:17.420
mechanically repetitive things,

NOTE Confidence: 0.9546593

00:44:17.420 --> 00:44:19.175
we're trying to express something

NOTE Confidence: 0.9546593

00:44:19.175 --> 00:44:19.877
really elegant.

NOTE Confidence: 0.9546593

00:44:19.880 --> 00:44:20.165
Actually,

NOTE Confidence: 0.9546593

00:44:20.165 --> 00:44:22.445
a lot of this stuff is stuff where

NOTE Confidence: 0.9546593

00:44:22.445 --> 00:44:24.736
if you deleted all the constraints,

NOTE Confidence: 0.9546593

00:44:24.740 --> 00:44:26.476
there is also be kind of the same,

NOTE Confidence: 0.9546593

00:44:26.480 --> 00:44:29.119
except that you get a failure from

NOTE Confidence: 0.9546593

00:44:29.119 --> 00:44:31.500
kind of deep within the library.

NOTE Confidence: 0.9546593

00:44:31.500 --> 00:44:33.200
Yes, that's actually good point.

NOTE Confidence: 0.9546593

00:44:33.200 --> 00:44:34.600
You're just sort of pulling

NOTE Confidence: 0.9546593

00:44:34.600 --> 00:44:36.000
that up into the constructors,

NOTE Confidence: 0.9546593

00:44:36.000 --> 00:44:38.270
so the IT happens immediately.

NOTE Confidence: 0.9546593

00:44:38.270 --> 00:44:38.530
Yes,

NOTE Confidence: 0.9546593

00:44:38.530 --> 00:44:39.570
this is essentially what

NOTE Confidence: 0.9546593

00:44:39.570 --> 00:44:40.870
happened for like a pair.

NOTE Confidence: 0.9546593

00:44:40.870 --> 00:44:42.463
If you had just like a pair of T&amp;amp;E,

NOTE Confidence: 0.9546593

00:44:42.470 --> 00:44:44.210
you would get this triviality.

NOTE Confidence: 0.9546593

00:44:44.210 --> 00:44:45.210
You would get the.

NOTE Confidence: 0.9546593

00:44:45.210 --> 00:44:46.710
I'm not copyable if my data

NOTE Confidence: 0.9546593

00:44:46.765 --> 00:44:48.070
members aren't copyable,

NOTE Confidence: 0.9546593

00:44:48.070 --> 00:44:49.696
it's just you wouldn't get the

NOTE Confidence: 0.9546593

00:44:49.696 --> 00:44:51.249
functionality of looking at as value,

NOTE Confidence: 0.9546593

00:44:51.250 --> 00:44:52.498
which we obviously need.

NOTE Confidence: 0.9546593

00:44:52.498 --> 00:44:52.810
Also,

NOTE Confidence: 0.9546593

00:44:52.810 --> 00:44:55.522
the the thing that would generate

NOTE Confidence: 0.9546593

00:44:55.522 --> 00:44:57.840
code like that would like.

NOTE Confidence: 0.9546593

00:44:57.840 --> 00:45:00.768
Trigger some template that instantiation was

NOTE Confidence: 0.9546593

00:45:00.768 --> 00:45:04.927
bogus was like in one of the base classes of.

NOTE Confidence: 0.9546593

00:45:04.930 --> 00:45:05.432
You know,

NOTE Confidence: 0.9546593

00:45:05.432 --> 00:45:07.440
like in some base class of hair or

NOTE Confidence: 0.9546593

00:45:07.504 --> 00:45:09.618
something that you had no idea about.

NOTE Confidence: 0.9546593

00:45:09.620 --> 00:45:10.044
Yeah, yeah,

NOTE Confidence: 0.9546593

00:45:10.044 --> 00:45:10.468
so yeah,

NOTE Confidence: 0.9546593

00:45:10.468 --> 00:45:11.740
you do need control over all

NOTE Confidence: 0.9546593

00:45:11.787 --> 00:45:12.997
your base classes and stuff.

NOTE Confidence: 0.9546593

00:45:13.000 --> 00:45:14.110
In this case we're not patching

NOTE Confidence: 0.9546593

00:45:14.110 --> 00:45:15.340
over weirdness in the base classes,

NOTE Confidence: 0.9546593

00:45:15.340 --> 00:45:16.996
but we are trying to restore

NOTE Confidence: 0.9546593

00:45:16.996 --> 00:45:18.100
what the compiler would

NOTE Confidence: 0.858051618

00:45:18.160 --> 00:45:19.675
do while preserving this extra

NOTE Confidence: 0.858051618

00:45:19.675 --> 00:45:21.550
logic that we need because having

NOTE Confidence: 0.858051618

00:45:21.550 --> 00:45:23.368
this means that the constructor is

NOTE Confidence: 0.858051618

00:45:23.368 --> 00:45:25.450
not trivial and will always exist.

NOTE Confidence: 0.858051618

00:45:25.450 --> 00:45:28.792
So we sort of have to repair what the

NOTE Confidence: 0.858051618

00:45:28.792 --> 00:45:30.934
compiler would have done in the absence

NOTE Confidence: 0.858051618

00:45:30.934 --> 00:45:32.968
of this in the future, there may be

NOTE Confidence: 0.858051618

00:45:32.968 --> 00:45:34.200
a more convenient way to do this,

NOTE Confidence: 0.858051618

00:45:34.200 --> 00:45:36.744
like I was saying there was a we seen

NOTE Confidence: 0.858051618

00:45:36.744 --> 00:45:39.558
with like variadic templates and in fact.

NOTE Confidence: 0.858051618

00:45:39.560 --> 00:45:41.690
Bring back to default default constructors.

NOTE Confidence: 0.858051618

00:45:41.690 --> 00:45:43.062
Things like explicit operator

NOTE Confidence: 0.858051618

00:45:43.062 --> 00:45:45.120
bool every single or an explicit

NOTE Confidence: 0.858051618

00:45:45.181 --> 00:45:46.841
bool like the conditional explicit

NOTE Confidence: 0.858051618

00:45:46.841 --> 00:45:48.950
every single one of these things.

NOTE Confidence: 0.858051618

00:45:48.950 --> 00:45:50.690
The library imitated for years because

NOTE Confidence: 0.858051618

00:45:50.690 --> 00:45:53.029
we were trying to reach into the future

NOTE Confidence: 0.858051618

00:45:53.029 --> 00:45:55.080
and do cool advanced things with a

NOTE Confidence: 0.858051618

00:45:55.080 --> 00:45:56.660
more primitive core language then

NOTE Confidence: 0.858051618

00:45:56.660 --> 00:45:58.332
the core language finally caught up.

NOTE Confidence: 0.858051618

00:45:58.332 --> 00:45:59.940
I sort of get the sense here with

NOTE Confidence: 0.858051618

00:45:59.989 --> 00:46:01.683
these constraints that this might be a

NOTE Confidence: 0.858051618

00:46:01.683 --> 00:46:03.575
case where the core language will make

NOTE Confidence: 0.858051618

00:46:03.575 --> 00:46:05.249
things more convenient in the future,

NOTE Confidence: 0.858051618

00:46:05.250 --> 00:46:05.730
maybe not.

NOTE Confidence: 0.858051618

00:46:05.730 --> 00:46:09.100
Maybe this is too obscure, but possible.

NOTE Confidence: 0.858051618

00:46:09.100 --> 00:46:10.780
So this is not as horrible as

NOTE Confidence: 0.858051618

00:46:10.780 --> 00:46:12.458
it might look at first glance.

NOTE Confidence: 0.858051618

00:46:12.460 --> 00:46:13.284
I mean,

NOTE Confidence: 0.858051618

00:46:13.284 --> 00:46:15.756
we could write the constraints as

NOTE Confidence: 0.858051618

00:46:15.756 --> 00:46:18.528
as as a concept and and just use

NOTE Confidence: 0.858051618

00:46:18.528 --> 00:46:19.863
that in the abbreviated syntax

NOTE Confidence: 0.858051618

00:46:19.863 --> 00:46:21.258
if we really wanted to.

NOTE Confidence: 0.858051618

00:46:21.260 --> 00:46:23.325
Yeah, and this is actually just occur

NOTE Confidence: 0.858051618

00:46:23.325 --> 00:46:25.837
often enough that we might factor it out.

NOTE Confidence: 0.858051618

00:46:25.837 --> 00:46:27.353
Currently it doesn't occur

NOTE Confidence: 0.858051618

00:46:27.353 --> 00:46:28.959
quite often for us to.

NOTE Confidence: 0.858051618

00:46:28.960 --> 00:46:30.540
Factored out like tuple needs

NOTE Confidence: 0.858051618

00:46:30.540 --> 00:46:32.120
very similar stuff to this,

NOTE Confidence: 0.858051618

00:46:32.120 --> 00:46:33.398
but it needs to work with

NOTE Confidence: 0.858051618

00:46:33.398 --> 00:46:34.037
like arbitrarily many,

NOTE Confidence: 0.858051618

00:46:34.040 --> 00:46:34.950
so we ended up cancelling

NOTE Confidence: 0.858051618

00:46:34.950 --> 00:46:35.860
a lot of stuff right?

NOTE Confidence: 0.858051618

00:46:35.860 --> 00:46:36.875
This one's a little bit

NOTE Confidence: 0.858051618

00:46:36.875 --> 00:46:37.484
different from people,

NOTE Confidence: 0.858051618

00:46:37.490 --> 00:46:39.596
but there is the potential as

NOTE Confidence: 0.858051618

00:46:39.596 --> 00:46:41.500
being more peer like types,

NOTE Confidence: 0.858051618

00:46:41.500 --> 00:46:43.985
not to mention if it's not factored

NOTE Confidence: 0.858051618

00:46:43.985 --> 00:46:46.119
out inside the standard then.

NOTE Confidence: 0.858051618

00:46:46.120 --> 00:46:47.630
The reason why argument for

NOTE Confidence: 0.858051618

00:46:47.630 --> 00:46:48.536
not factoring out?

NOTE Confidence: 0.858051618

00:46:48.540 --> 00:46:49.980
Yeah here either yeah.

NOTE Confidence: 0.858051618

00:46:49.980 --> 00:46:52.140
Then the standard usually does factor

NOTE Confidence: 0.858051618

00:46:52.200 --> 00:46:54.475
things out if it gets real repetitive.

NOTE Confidence: 0.858051618

00:46:54.480 --> 00:46:55.560
Well, that's interesting.

NOTE Confidence: 0.858051618

00:46:55.560 --> 00:46:58.450
This might be where that Unex came from.

NOTE Confidence: 0.858051618

00:46:58.450 --> 00:46:58.695
Why?

NOTE Confidence: 0.858051618

00:46:58.695 --> 00:47:00.165
Why is the the standard he's

NOTE Confidence: 0.858051618

00:47:00.165 --> 00:47:01.190
talking about next year?

NOTE Confidence: 0.858051618

00:47:01.190 --> 00:47:02.786
When I thought it was Val,

NOTE Confidence: 0.858051618

00:47:02.790 --> 00:47:06.126
is that the first here is unex interesting.

NOTE Confidence: 0.858051618

00:47:06.130 --> 00:47:08.992
On X is the data member of the E

NOTE Confidence: 0.858051618

00:47:08.992 --> 00:47:11.729
data member of the expected OOH.

NOTE Confidence: 0.858051618

00:47:11.730 --> 00:47:13.290
Notice that does that mean?

NOTE Confidence: 0.858051618

00:47:13.290 --> 00:47:15.075
I think that means one of my

NOTE Confidence: 0.858051618

00:47:15.075 --> 00:47:16.190
visualizer comments was wrong.

NOTE Confidence: 0.858051618

00:47:16.190 --> 00:47:17.715
It's only the expected that

NOTE Confidence: 0.858051618

00:47:17.715 --> 00:47:19.650
has on X Now it's fine,

NOTE Confidence: 0.858051618

00:47:19.650 --> 00:47:22.428
but it's the bad expected access

NOTE Confidence: 0.858051618

00:47:22.430 --> 00:47:25.839
and the unexpected that is just Val.

NOTE Confidence: 0.858051618

00:47:25.840 --> 00:47:27.000
Oh, but those might.

NOTE Confidence: 0.858051618

00:47:27.000 --> 00:47:28.890
Those might get editorially changed on X.

NOTE Confidence: 0.777848250833333

00:47:31.480 --> 00:47:34.144
And actually, it's Val as far as the

NOTE Confidence: 0.777848250833333

00:47:34.144 --> 00:47:36.896
as far as the unexpected is concerned,

NOTE Confidence: 0.777848250833333

00:47:36.896 --> 00:47:39.570
but it's it's unax as far as the

NOTE Confidence: 0.777848250833333

00:47:39.570 --> 00:47:41.344
expected is concerned. Yeah, arguably,

NOTE Confidence: 0.777848250833333

00:47:41.344 --> 00:47:44.648
if that one paper that has been.

NOTE Confidence: 0.777848250833333

00:47:44.650 --> 00:47:45.790
Preliminarily blessed by

NOTE Confidence: 0.777848250833333

00:47:45.790 --> 00:47:46.930
the library evolution?

NOTE Confidence: 0.777848250833333

00:47:46.930 --> 00:47:48.013
Uh, working group.

NOTE Confidence: 0.777848250833333

00:47:48.013 --> 00:47:50.179
If that renames value to error,

NOTE Confidence: 0.777848250833333

00:47:50.180 --> 00:47:52.455
there's an argument for changing this veil

NOTE Confidence: 0.777848250833333

00:47:52.455 --> 00:47:55.354
to unx or error or something bad expected

NOTE Confidence: 0.777848250833333

00:47:55.354 --> 00:47:58.250
X is already has an accessory and error.

NOTE Confidence: 0.777848250833333

00:47:58.250 --> 00:48:01.895
Calling them all on X is actually not wrong.

NOTE Confidence: 0.777848250833333

00:48:01.900 --> 00:48:03.799
It's a. It was a little unexpected for me.

NOTE Confidence: 0.777848250833333

00:48:03.800 --> 00:48:05.676
Yeah joke but you know I'm gonna

NOTE Confidence: 0.777848250833333

00:48:05.676 --> 00:48:07.539
go get rid of that comment.

NOTE Confidence: 0.777848250833333

00:48:07.540 --> 00:48:08.208
I think it's fine.

NOTE Confidence: 0.858037846363636

00:48:10.740 --> 00:48:12.354
Users can always file a bug

NOTE Confidence: 0.858037846363636

00:48:12.354 --> 00:48:13.850
if they think it's weird.

NOTE Confidence: 0.858037846363636

00:48:13.850 --> 00:48:14.722
Yeah, this is fine,

NOTE Confidence: 0.858037846363636

00:48:14.722 --> 00:48:16.331
but do you wanna say that, UM?

NOTE Confidence: 0.858037846363636

00:48:16.331 --> 00:48:18.438
Because I'm about to get off the

NOTE Confidence: 0.858037846363636

00:48:18.438 --> 00:48:20.388
bus and therefore will not be

NOTE Confidence: 0.858037846363636

00:48:20.388 --> 00:48:22.350
on the meeting in a bit, but.

NOTE Confidence: 0.424614163333333

00:48:25.150 --> 00:48:26.338
And what's that?

NOTE Confidence: 0.78470111

00:48:28.500 --> 00:48:29.600
Requirements on.

NOTE Confidence: 0.722050018

00:48:34.670 --> 00:48:36.068
Yeah, I think you broke up.

NOTE Confidence: 0.722050018

00:48:36.070 --> 00:48:38.406
I didn't quite catch what you were saying.

NOTE Confidence: 0.722050018

00:48:38.410 --> 00:48:42.428
I did yeah, sorry the requirements on

NOTE Confidence: 0.722050018

00:48:42.428 --> 00:48:46.109
the non trivial copy constructor. Yes.

NOTE Confidence: 0.853313666666667

00:48:49.580 --> 00:48:50.180
What about them?

NOTE Confidence: 0.915943825714286

00:48:57.580 --> 00:48:58.996
I'm not hearing anything.

NOTE Confidence: 0.915943825714286

00:48:58.996 --> 00:49:02.100
If you're talking UM.

NOTE Confidence: 0.915943825714286

00:49:02.100 --> 00:49:04.705
The requirements on the non

NOTE Confidence: 0.915943825714286

00:49:04.705 --> 00:49:06.268
trivial copy constructor.

NOTE Confidence: 0.915943825714286

00:49:06.270 --> 00:49:07.791
That's this thing.

NOTE Confidence: 0.915943825714286

00:49:07.791 --> 00:49:09.819
If you're not trivial,

NOTE Confidence: 0.915943825714286

00:49:09.820 --> 00:49:12.490
that's these two.

NOTE Confidence: 0.915943825714286

00:49:12.490 --> 00:49:14.650
OK, I'll take a close look at that

NOTE Confidence: 0.915943825714286

00:49:14.650 --> 00:49:15.830
if you could connectivity again,

NOTE Confidence: 0.915943825714286

00:49:15.830 --> 00:49:16.718
please let us know.

NOTE Confidence: 0.910126243333333

00:49:19.110 --> 00:49:21.468
OK so I was going to.

NOTE Confidence: 0.910126243333333

00:49:21.470 --> 00:49:23.672
I just switched to a different

NOTE Confidence: 0.910126243333333

00:49:23.672 --> 00:49:26.266
network OK and the requirements on

NOTE Confidence: 0.910126243333333

00:49:26.266 --> 00:49:29.410
the non trivial copy constructor are

NOTE Confidence: 0.910126243333333

00:49:29.410 --> 00:49:31.737
incorrect because what it says is.

NOTE Confidence: 0.910126243333333

00:49:31.740 --> 00:49:34.968
Not trivial copy, constructible T and

NOTE Confidence: 0.910126243333333

00:49:34.968 --> 00:49:37.653
not trivially copy constructible air.

NOTE Confidence: 0.910126243333333

00:49:37.653 --> 00:49:43.060
And what we want is good .1 or like either.

NOTE Confidence: 0.910126243333333

00:49:43.060 --> 00:49:45.202
Yeah, the the the they need to be Morgan.

NOTE Confidence: 0.910126243333333

00:49:45.210 --> 00:49:46.225
Ohh I didn't even look at that.

NOTE Confidence: 0.910126243333333

00:49:46.230 --> 00:49:52.660
Yeah, let's take a look. OK. It's uh.

NOTE Confidence: 0.910126243333333

00:49:52.660 --> 00:49:55.252
Requires not that and not that, yeah,

NOTE Confidence: 0.910126243333333

00:49:55.252 --> 00:49:57.768
that that is not. That's that's wrong.

NOTE Confidence: 0.910126243333333

00:49:57.768 --> 00:49:59.488
Excellent catch it doesn't.

NOTE Confidence: 0.910126243333333

00:49:59.488 --> 00:50:00.640
Yeah, this is.

NOTE Confidence: 0.910126243333333

00:50:00.640 --> 00:50:05.797
This is fine, but this is not right OK?

NOTE Confidence: 0.910126243333333

00:50:05.800 --> 00:50:08.240
OK yeah, well what I what I mentioned

NOTE Confidence: 0.910126243333333

00:50:08.240 --> 00:50:10.641
there was am a demogorgon's law which

NOTE Confidence: 0.910126243333333

00:50:10.641 --> 00:50:14.050
is the Boolean logic law about negating

NOTE Confidence: 0.910126243333333

00:50:14.134 --> 00:50:15.895
conditions that I think is possibly

NOTE Confidence: 0.910126243333333

00:50:15.895 --> 00:50:17.857
one of the few things I would say that

NOTE Confidence: 0.910126243333333

00:50:17.857 --> 00:50:19.261
every programmer needs to know because

NOTE Confidence: 0.910126243333333

00:50:19.306 --> 00:50:21.074
it comes up so often more than negate

NOTE Confidence: 0.910126243333333

00:50:21.074 --> 00:50:23.638
the conditions for requires causes.

NOTE Confidence: 0.910126243333333

00:50:23.638 --> 00:50:26.398
I mean, it's it's a general

NOTE Confidence: 0.910126243333333

00:50:26.398 --> 00:50:28.083
thing like nobody can change.

NOTE Confidence: 0.910126243333333

00:50:28.090 --> 00:50:31.016
It's like not A and the change

NOTE Confidence: 0.910126243333333

00:50:31.016 --> 00:50:33.462
the partial order I think.

NOTE Confidence: 0.910126243333333

00:50:33.462 --> 00:50:35.250
What partial order?

NOTE Confidence: 0.910126243333333

00:50:35.250 --> 00:50:39.338
The the the one used for subsumption rules?

NOTE Confidence: 0.910126243333333

00:50:39.338 --> 00:50:42.166
Ohh, you mean for concepts not Morgan.

NOTE Confidence: 0.910126243333333

00:50:42.170 --> 00:50:44.978
Ohh that's interesting.

NOTE Confidence: 0.910126243333333

00:50:44.980 --> 00:50:46.960
I think I would have to defer to Casey there.

NOTE Confidence: 0.910126243333333

00:50:46.960 --> 00:50:47.730
I don't know how though.

NOTE Confidence: 0.910126243333333

00:50:47.730 --> 00:50:49.286
Those assumption rules work.

NOTE Confidence: 0.910126243333333

00:50:49.286 --> 00:50:52.210
I don't think that matters here because.

NOTE Confidence: 0.910126243333333

00:50:52.210 --> 00:50:53.950
You don't have multiple overloads.

NOTE Confidence: 0.910126243333333

00:50:53.950 --> 00:50:54.920
OK, yeah, we've just got.

NOTE Confidence: 0.910126243333333

00:50:54.920 --> 00:50:59.804
We've just got the two. It's the OK.

NOTE Confidence: 0.910126243333333

00:50:59.804 --> 00:51:03.432
Let's see credit call because she

NOTE Confidence: 0.910126243333333

00:51:03.432 --> 00:51:10.650
noticed this noticed that. The.

NOTE Confidence: 0.910126243333333

00:51:10.650 --> 00:51:14.400
He is truly comparable constructible V.

NOTE Confidence: 0.910126243333333

00:51:14.400 --> 00:51:20.628
Requirements here are incorrectly.

NOTE Confidence: 0.910126243333333

00:51:20.630 --> 00:51:21.520
I'm not.

NOTE Confidence: 0.74867383

00:51:23.690 --> 00:51:25.272
I was forget exactly how to spell

NOTE Confidence: 0.74867383

00:51:25.272 --> 00:51:26.669
the Morgan's name is lowercase D.

NOTE Confidence: 0.74867383

00:51:26.670 --> 00:51:28.579
Is it a capital DI? Think that's right.

NOTE Confidence: 0.74867383

00:51:28.579 --> 00:51:30.194
I think it's not camelcase.

NOTE Confidence: 0.64568109

00:51:33.190 --> 00:51:35.018
The trivial ones French,

NOTE Confidence: 0.64568109

00:51:35.018 --> 00:51:38.419
we can just we can just make

NOTE Confidence: 0.64568109

00:51:38.419 --> 00:51:41.199
something up because it's not.

NOTE Confidence: 0.64568109

00:51:41.200 --> 00:51:43.508
I forget his nationality.

NOTE Confidence: 0.790979959

00:51:46.370 --> 00:51:50.020
Now let's see X is true and Y is true, yes.

NOTE Confidence: 0.612717039

00:51:52.300 --> 00:51:59.080
Trivial A and let me say T trivial T and.

NOTE Confidence: 0.612717039

00:51:59.080 --> 00:52:02.635
Trivial E, so the implication

NOTE Confidence: 0.612717039

00:52:02.635 --> 00:52:06.619
of that should be. Not.

NOTE Confidence: 0.595433966666667

00:52:11.780 --> 00:52:14.288
Or not trivial.

NOTE Confidence: 0.5015977125

00:52:19.160 --> 00:52:23.308
And the. Additional. Constraints.

NOTE Confidence: 0.8591778

00:52:29.190 --> 00:52:31.110
Excellent catch and that

NOTE Confidence: 0.8591778

00:52:31.110 --> 00:52:32.382
is this is excellent.

NOTE Confidence: 0.8591778

00:52:32.382 --> 00:52:33.966
This is an excellent example of

NOTE Confidence: 0.8591778

00:52:33.966 --> 00:52:35.606
how code review can catch bugs.

NOTE Confidence: 0.8591778

00:52:35.610 --> 00:52:38.556
Because this bug is very subtle,

NOTE Confidence: 0.8591778

00:52:38.560 --> 00:52:40.738
you'll only find it in certain

NOTE Confidence: 0.8591778

00:52:40.738 --> 00:52:43.430
cases where the types don't quite

NOTE Confidence: 0.8591778

00:52:43.430 --> 00:52:47.205
don't produce the same results and.

NOTE Confidence: 0.8591778

00:52:47.205 --> 00:52:50.911
Even in the case where like,

NOTE Confidence: 0.8591778

00:52:50.911 --> 00:52:51.904
yeah, it depends.

NOTE Confidence: 0.8591778

00:52:51.904 --> 00:52:53.559
Like exactly you know which

NOTE Confidence: 0.8591778

00:52:53.559 --> 00:52:54.520
constructors are viable.

NOTE Confidence: 0.8591778

00:52:54.520 --> 00:52:56.380
It's possible there could be ambiguity.

NOTE Confidence: 0.8591778

00:52:56.380 --> 00:52:57.755
It's possible we could get

NOTE Confidence: 0.8591778

00:52:57.755 --> 00:52:58.855
a constructor that compiles,

NOTE Confidence: 0.8591778

00:52:58.860 --> 00:53:00.380
just happens to be nontrivial,

NOTE Confidence: 0.8591778

00:53:00.380 --> 00:53:02.666
which is very difficult to detect.

NOTE Confidence: 0.8591778

00:53:02.670 --> 00:53:03.474
It has observable effects,

NOTE Confidence: 0.8591778

00:53:03.474 --> 00:53:04.680
which is why we do this,

NOTE Confidence: 0.8591778

00:53:04.680 --> 00:53:06.836
but that's a good example of like

NOTE Confidence: 0.8591778

00:53:06.836 --> 00:53:08.710
how code review can find bugs.

NOTE Confidence: 0.8591778

00:53:08.710 --> 00:53:09.757
So thank you,

NOTE Confidence: 0.8591778

00:53:09.757 --> 00:53:11.502
Nicole Nicole noticed that the

NOTE Confidence: 0.8591778

00:53:11.502 --> 00:53:13.120
is trivially constructible.

NOTE Confidence: 0.8591778

00:53:13.120 --> 00:53:14.044
View requirements here are

NOTE Confidence: 0.8591778

00:53:14.044 --> 00:53:14.737
incorrectly to Morgan,

NOTE Confidence: 0.8591778

00:53:14.740 --> 00:53:16.075
the trivial 1 requires triviality

NOTE Confidence: 0.8591778

00:53:16.075 --> 00:53:16.876
and trivially E.

NOTE Confidence: 0.8591778

00:53:16.880 --> 00:53:18.656
So the negation of that should be, not.

NOTE Confidence: 0.8591778

00:53:18.656 --> 00:53:21.036
Triviality or not trivial ease,

NOTE Confidence: 0.8591778

00:53:21.040 --> 00:53:22.980
and then the additional constraint

NOTE Confidence: 0.8591778

00:53:22.980 --> 00:53:25.190
should be added to that OK.

NOTE Confidence: 0.8591778

00:53:25.190 --> 00:53:28.326
OK, uh, this also occurs on line 205.

NOTE Confidence: 0.8591778

00:53:28.330 --> 00:53:30.170
Added to that comment.

NOTE Confidence: 0.8591778

00:53:30.170 --> 00:53:32.278
Good point. Yeah, the move, yeah.

NOTE Confidence: 0.113006175

00:53:38.350 --> 00:53:41.830
You're also, you know that's that,

NOTE Confidence: 0.113006175

00:53:41.830 --> 00:53:44.300
that's for sure there's task.

NOTE Confidence: 0.569599559545454

00:53:56.510 --> 00:53:57.986
Trivial, oh, we can detect triviality

NOTE Confidence: 0.569599559545454

00:53:57.986 --> 00:53:59.570
with this trivially copy constructible.

NOTE Confidence: 0.569599559545454

00:53:59.570 --> 00:54:01.506
We don't need to like carefully look at

NOTE Confidence: 0.569599559545454

00:54:01.506 --> 00:54:03.406
the code media asked the type traits

NOTE Confidence: 0.569599559545454

00:54:03.410 --> 00:54:06.206
test coverage, just asked 40 days.

NOTE Confidence: 0.06984168

00:54:08.620 --> 00:54:12.480
Just. Is generally.

NOTE Confidence: 0.637803402777778

00:54:14.790 --> 00:54:19.476
Let's start with all etcetera to

NOTE Confidence: 0.637803402777778

00:54:19.476 --> 00:54:23.772
inspect the existence and triviality.

NOTE Confidence: 0.637803402777778

00:54:23.772 --> 00:54:29.060
Reality for all, and we do have similar.

NOTE Confidence: 0.637803402777778

00:54:29.060 --> 00:54:30.880
We do similar test coverage for this,

NOTE Confidence: 0.637803402777778

00:54:30.880 --> 00:54:33.057
where I think pair, pair and tuple.

NOTE Confidence: 0.637803402777778

00:54:33.060 --> 00:54:35.400
I remember having a non trivial,

NOTE Confidence: 0.637803402777778

00:54:35.400 --> 00:54:36.556
trivial or implicitly constructible,

NOTE Confidence: 0.637803402777778

00:54:36.556 --> 00:54:38.290
at least for the implicity constructible.

NOTE Confidence: 0.637803402777778

00:54:38.290 --> 00:54:40.748
Sure we have that we have for all the

NOTE Confidence: 0.637803402777778

00:54:40.748 --> 00:54:42.470
new functions here that have kind of.

NOTE Confidence: 0.765352435

00:54:45.010 --> 00:54:49.280
No no. Non trivial if you will.

NOTE Confidence: 0.765352435

00:54:49.280 --> 00:54:51.560
This is such a rich source of funds.

NOTE Confidence: 0.765352435

00:54:51.560 --> 00:54:55.599
Uh, OK. Casey also knows the next.

NOTE Confidence: 0.765352435

00:54:55.600 --> 00:54:58.368
Ohh go ahead this has he checked how

NOTE Confidence: 0.765352435

00:54:58.368 --> 00:55:01.611
this interacts with the cling bug

NOTE Confidence: 0.765352435

00:55:01.611 --> 00:55:04.559
with conditionally trial constructors?

NOTE Confidence: 0.765352435

00:55:04.560 --> 00:55:07.224
That one about the order dependency

NOTE Confidence: 0.765352435

00:55:07.224 --> 00:55:09.000
coding doesn't actually implement

NOTE Confidence: 0.765352435

00:55:09.068 --> 00:55:10.742
conditionally trivial constructors,

NOTE Confidence: 0.765352435

00:55:10.742 --> 00:55:12.996
and it just picks the first one.

NOTE Confidence: 0.765352435

00:55:13.000 --> 00:55:15.853
You knows, it just picks the first one when

NOTE Confidence: 0.765352435

00:55:15.853 --> 00:55:18.559
it's disabled by the constraints or not.

NOTE Confidence: 0.765352435

00:55:18.560 --> 00:55:20.930
Or what happens.

NOTE Confidence: 0.765352435

00:55:20.930 --> 00:55:23.534
My my reaction to that is wolf.

NOTE Confidence: 0.765352435

00:55:23.540 --> 00:55:24.560
Yeah what what?

NOTE Confidence: 0.765352435

00:55:24.560 --> 00:55:27.654
What header did that affect I can find once

NOTE Confidence: 0.765352435

00:55:27.654 --> 00:55:30.700
I know which header it was still not fixed.

NOTE Confidence: 0.765352435

00:55:30.700 --> 00:55:33.508
It's still not fixed last week just of them

NOTE Confidence: 0.765352435

00:55:33.508 --> 00:55:36.163
were in ranges I think was it ranges OK.

NOTE Confidence: 0.765352435

00:55:36.170 --> 00:55:38.426
Because there was like destructor order

NOTE Confidence: 0.765352435

00:55:38.426 --> 00:55:40.550
is intentional or something like that.

NOTE Confidence: 0.765352435

00:55:40.550 --> 00:55:42.560
Yeah.

NOTE Confidence: 0.765352435

00:55:42.560 --> 00:55:44.320
Yeah, cleaning is ignoring constraints

NOTE Confidence: 0.765352435

00:55:44.320 --> 00:55:46.080
on when there's multiple destructors,

NOTE Confidence: 0.765352435

00:55:46.080 --> 00:55:47.376
it just takes the first one.

NOTE Confidence: 0.765352435

00:55:47.380 --> 00:55:48.680
So yeah, we have.

NOTE Confidence: 0.765352435

00:55:48.680 --> 00:55:50.630
The destructor order is significant comment.

NOTE Confidence: 0.84772285

00:55:53.190 --> 00:55:54.852
He he does have the ordering

NOTE Confidence: 0.84772285

00:55:54.852 --> 00:55:56.300
correct, but these are.

NOTE Confidence: 0.84772285

00:55:56.300 --> 00:55:58.640
But this case is slightly different

NOTE Confidence: 0.84772285

00:55:58.640 --> 00:56:01.259
because the non trivial destructor is

NOTE Confidence: 0.84772285

00:56:01.259 --> 00:56:03.885
also disabled by constraints which wasn't

NOTE Confidence: 0.84772285

00:56:03.885 --> 00:56:06.309
the case for our other occurrences.

NOTE Confidence: 0.84772285

00:56:06.310 --> 00:56:09.798
OK, I will add a separate comment for

NOTE Confidence: 0.84772285

00:56:09.798 --> 00:56:12.509
that because that is so much fun.

NOTE Confidence: 0.84772285

00:56:12.510 --> 00:56:13.994
It's gonna be really hard to describe.

NOTE Confidence: 0.84772285

00:56:14.000 --> 00:56:15.416
Yeah yeah, I come with the

NOTE Confidence: 0.84772285

00:56:15.416 --> 00:56:16.990
destructor of the copy constructor.

NOTE Confidence: 0.832484219444445

00:56:20.880 --> 00:56:22.338
I assume it affects the copy

NOTE Confidence: 0.832484219444445

00:56:22.338 --> 00:56:23.630
constructor and the move constructor

NOTE Confidence: 0.832484219444445

00:56:23.630 --> 00:56:25.513
the same as it does the destructor.

NOTE Confidence: 0.832484219444445

00:56:25.520 --> 00:56:27.968
OK, since they're all special member

NOTE Confidence: 0.832484219444445

00:56:27.968 --> 00:56:30.940
functions, that might be mistaken.

NOTE Confidence: 0.832484219444445

00:56:30.940 --> 00:56:36.220
And did ask about the planning bug,

NOTE Confidence: 0.832484219444445

00:56:36.220 --> 00:56:40.810
where the order of special

NOTE Confidence: 0.832484219444445

00:56:40.810 --> 00:56:44.482
member functions is significant.

NOTE Confidence: 0.832484219444445

00:56:44.490 --> 00:56:49.410
When they are constrained and.

NOTE Confidence: 0.832484219444445

00:56:49.410 --> 00:56:50.344
Sometimes trivial,

NOTE Confidence: 0.832484219444445

00:56:50.344 --> 00:56:53.464
is that a good well description I

NOTE Confidence: 0.832484219444445

00:56:53.464 --> 00:56:55.348
could see it being just destructor,

NOTE Confidence: 0.832484219444445

00:56:55.350 --> 00:56:58.010
yes, but it might be just destructors

NOTE Confidence: 0.832484219444445

00:56:58.010 --> 00:57:00.395
because beforehand like you could

NOTE Confidence: 0.832484219444445

00:57:00.395 --> 00:57:02.626
always have multiple constructors.

NOTE Confidence: 0.832484219444445

00:57:02.626 --> 00:57:05.178
That was always fine.

NOTE Confidence: 0.832484219444445

00:57:05.180 --> 00:57:06.356
Yeah, multiple constructors

NOTE Confidence: 0.832484219444445

00:57:06.356 --> 00:57:08.316
is a very new thing.

NOTE Confidence: 0.832484219444445

00:57:08.320 --> 00:57:09.340
Yeah, this does say this does

NOTE Confidence: 0.832484219444445

00:57:09.340 --> 00:57:10.499
have them in the right order,

NOTE Confidence: 0.832484219444445

00:57:10.500 --> 00:57:12.798
so the destructor won't be affected.

NOTE Confidence: 0.832484219444445

00:57:12.800 --> 00:57:14.882
OK, so basically if he's got

NOTE Confidence: 0.832484219444445

00:57:14.882 --> 00:57:16.734
client coverage of the copy

NOTE Confidence: 0.832484219444445

00:57:16.734 --> 00:57:18.704
constructor and the move constructor

NOTE Confidence: 0.832484219444445

00:57:18.704 --> 00:57:20.969
and the test and I assume.

NOTE Confidence: 0.832484219444445

00:57:20.970 --> 00:57:22.595
That's present then we probably

NOTE Confidence: 0.832484219444445

00:57:22.595 --> 00:57:24.570
don't need to worry about this.

NOTE Confidence: 0.832484219444445

00:57:24.570 --> 00:57:26.674
It does seem to be specific to destructor.

NOTE Confidence: 0.822478486666667

00:57:32.220 --> 00:57:35.172
I'm so glad that you can get help now.

NOTE Confidence: 0.822478486666667

00:57:35.180 --> 00:57:36.220
Coming on the destructor.

NOTE Confidence: 0.822478486666667

00:57:36.220 --> 00:57:38.122
At a minimum we should have test

NOTE Confidence: 0.822478486666667

00:57:38.122 --> 00:57:39.844
coverage and maybe this comment too.

NOTE Confidence: 0.822478486666667

00:57:39.850 --> 00:57:43.306
Even if he's got the right order right now.

NOTE Confidence: 0.822478486666667

00:57:43.310 --> 00:57:44.790
If it's doing the same sort of thing,

NOTE Confidence: 0.822478486666667

00:57:44.790 --> 00:57:46.344
yeah, yeah. I would like to have

NOTE Confidence: 0.822478486666667

00:57:46.344 --> 00:57:47.730
the comment on the disruptor.

NOTE Confidence: 0.822478486666667

00:57:47.730 --> 00:57:49.950
OK, that's just a reminder,

NOTE Confidence: 0.822478486666667

00:57:49.950 --> 00:57:55.040
but he's reading ahead. Uh.

NOTE Confidence: 0.822478486666667

00:57:55.040 --> 00:57:56.432
No special member functions.

NOTE Confidence: 0.822478486666667

00:57:56.432 --> 00:57:59.990
OK, here we go. I am.

NOTE Confidence: 0.822478486666667

00:57:59.990 --> 00:58:03.266
Should I comment on the whole thing?

NOTE Confidence: 0.822478486666667

00:58:03.270 --> 00:58:04.770
We were just the first one.

NOTE Confidence: 0.822478486666667

00:58:04.770 --> 00:58:12.390
OK, Casey reminded us of the.

NOTE Confidence: 0.822478486666667

00:58:12.390 --> 00:58:16.550
Complicate the clean bug.

NOTE Confidence: 0.822478486666667

00:58:16.550 --> 00:58:21.975
Where the order of constrained

NOTE Confidence: 0.822478486666667

00:58:21.975 --> 00:58:25.190
structures is, CF Kent.

NOTE Confidence: 0.874077042

00:58:27.710 --> 00:58:31.370
The order you have here

NOTE Confidence: 0.874077042

00:58:31.370 --> 00:58:33.750
here is to be correct,

NOTE Confidence: 0.874077042

00:58:33.750 --> 00:58:38.538
but one I believe we should have

NOTE Confidence: 0.874077042

00:58:38.538 --> 00:58:43.540
the same comment here as this.

NOTE Confidence: 0.874077042

00:58:43.540 --> 00:58:45.334
Is equally affected.

NOTE Confidence: 0.874077042

00:58:45.334 --> 00:58:49.950
Should we ask for test coverage too or?

NOTE Confidence: 0.634169058333333

00:58:52.730 --> 00:58:54.446
This coverage for is trivially destructible.

NOTE Confidence: 0.634169058333333

00:58:54.450 --> 00:58:56.940
Should get this right. Yes.

NOTE Confidence: 0.537051776

00:58:59.490 --> 00:59:05.440
3rd we have is trivially destructible.

NOTE Confidence: 0.69359124

00:59:07.500 --> 00:59:11.391
Bridge. OK. Casey reminded us

NOTE Confidence: 0.69359124

00:59:11.391 --> 00:59:12.700
of the Clean bug where the order

NOTE Confidence: 0.69359124

00:59:12.744 --> 00:59:14.168
constraint destructors is significant.

NOTE Confidence: 0.69359124

00:59:14.170 --> 00:59:15.286
Transition elvian block destructor

NOTE Confidence: 0.69359124

00:59:15.286 --> 00:59:16.681
order significant the order you

NOTE Confidence: 0.69359124

00:59:16.681 --> 00:59:18.066
have here appears to be correct,

NOTE Confidence: 0.69359124

00:59:18.070 --> 00:59:19.442
but one I believe we should have

NOTE Confidence: 0.69359124

00:59:19.442 --> 00:59:20.962
the same common here as this code

NOTE Confidence: 0.69359124

00:59:20.962 --> 00:59:22.288
pattern is equally affected and two,

NOTE Confidence: 0.69359124

00:59:22.290 --> 00:59:24.880
we should ensure that we have is

NOTE Confidence: 0.69359124

00:59:24.880 --> 00:59:26.610
trivially destructible test coverage.

NOTE Confidence: 0.69359124

00:59:26.610 --> 00:59:28.122
OK in our never ending quest

NOTE Confidence: 0.69359124

00:59:28.122 --> 00:59:29.610
to provide a more conformant

NOTE Confidence: 0.69359124

00:59:29.610 --> 00:59:31.695
experience than the compilers are

NOTE Confidence: 0.69359124

00:59:31.695 --> 00:59:33.363
capable of currently providing.

NOTE Confidence: 0.71794494

00:59:35.850 --> 00:59:37.402
OK, Where was I?

NOTE Confidence: 0.71794494

00:59:37.402 --> 00:59:39.342
I was at these constructors.

NOTE Confidence: 0.71794494

00:59:39.350 --> 00:59:43.110
OK so we got through the default constructor.

NOTE Confidence: 0.71794494

00:59:43.110 --> 00:59:45.534
Now the copy constructor.

NOTE Confidence: 0.71794494

00:59:45.534 --> 00:59:48.564
We've commented on the morning.

NOTE Confidence: 0.71794494

00:59:48.570 --> 00:59:50.550
I did not quite look at

NOTE Confidence: 0.71794494

00:59:50.550 --> 00:59:51.870
the no except condition,

NOTE Confidence: 0.71794494

00:59:51.870 --> 00:59:55.545
so we have a constexpr copy constructor

NOTE Confidence: 0.71794494

00:59:55.550 --> 00:59:57.438
that is no except when is no throw

NOTE Confidence: 0.71794494

00:59:57.438 --> 00:59:59.114
copy construct will be high and is

NOTE Confidence: 0.71794494

00:59:59.114 --> 01:00:00.624
no throw copy construct with the

NOTE Confidence: 0.71794494

01:00:00.624 --> 01:00:02.149
error that is indeed strengthened.

NOTE Confidence: 0.71794494

01:00:02.150 --> 01:00:04.838
Requires that were correctly to Morgan,

NOTE Confidence: 0.71794494

01:00:04.840 --> 01:00:07.750
that would be good. And.

NOTE Confidence: 0.71794494

01:00:07.750 --> 01:00:09.808
Move to these have to be copy

NOTE Confidence: 0.71794494

01:00:09.808 --> 01:00:11.165
constructible and copy constructible

NOTE Confidence: 0.71794494

01:00:11.165 --> 01:00:13.240
T and copy constructible East.

NOTE Confidence: 0.71794494

01:00:13.240 --> 01:00:15.100
OK, that's correct.

NOTE Confidence: 0.71794494

01:00:15.100 --> 01:00:18.200
So that's the this bit.

NOTE Confidence: 0.71794494

01:00:18.200 --> 01:00:21.038
Here and then, if it's true,

NOTE Confidence: 0.71794494

01:00:21.040 --> 01:00:22.508
direct non list initializes

NOTE Confidence: 0.71794494

01:00:22.508 --> 01:00:23.976
Val with DFR tests.

NOTE Confidence: 0.71794494

01:00:23.980 --> 01:00:26.184
Otherwise direct non list

NOTE Confidence: 0.71794494

01:00:26.184 --> 01:00:27.837
initializes unexpected error.

NOTE Confidence: 0.71794494

01:00:27.840 --> 01:00:31.296
OK, so copy over our has

NOTE Confidence: 0.71794494

01:00:31.296 --> 01:00:33.600
value restore claim format.

NOTE Confidence: 0.71794494

01:00:33.600 --> 01:00:35.595
If has value stood construct

NOTE Confidence: 0.71794494

01:00:35.595 --> 01:00:38.252
at the address of value with

NOTE Confidence: 0.71794494

01:00:38.252 --> 01:00:40.556
other value otherwise unexpected

NOTE Confidence: 0.71794494

01:00:40.556 --> 01:00:42.284
with other unexpected.

NOTE Confidence: 0.71794494

01:00:42.290 --> 01:00:42.860
OK.

NOTE Confidence: 0.653379237142857

01:00:46.520 --> 01:00:48.900
And I was mentally thinking does construct

NOTE Confidence: 0.653379237142857

01:00:48.900 --> 01:00:51.600
that achieve the direct non list initializes?

NOTE Confidence: 0.653379237142857

01:00:51.600 --> 01:00:56.017
Yes, it does. So that is good.

NOTE Confidence: 0.653379237142857

01:00:56.020 --> 01:00:58.960
OK then, here's the trivial one.

NOTE Confidence: 0.653379237142857

01:00:58.960 --> 01:01:02.598
This one was right. Yes, OK then the

NOTE Confidence: 0.653379237142857

01:01:02.598 --> 01:01:04.740
move is going to be pretty similar.

NOTE Confidence: 0.653379237142857

01:01:04.740 --> 01:01:10.818
Umm? Interesting that the move.

NOTE Confidence: 0.653379237142857

01:01:10.820 --> 01:01:12.290
I guess move is a little

NOTE Confidence: 0.653379237142857

01:01:12.290 --> 01:01:13.160
bit different constraints.

NOTE Confidence: 0.653379237142857

01:01:13.160 --> 01:01:15.820
Both of them got to be movable,

NOTE Confidence: 0.653379237142857

01:01:15.820 --> 01:01:18.354
OK, trivial, OK, same sort of deal.

NOTE Confidence: 0.653379237142857

01:01:18.360 --> 01:01:21.048
Here's the 205 Casey mentioned move

NOTE Confidence: 0.653379237142857

01:01:21.048 --> 01:01:23.724
seed or conditional accept here I'm

NOTE Confidence: 0.653379237142857

01:01:23.724 --> 01:01:25.997
checking for copy paste errors because

NOTE Confidence: 0.653379237142857

01:01:25.997 --> 01:01:28.053
it's very tempting to copy and paste the

NOTE Confidence: 0.653379237142857

01:01:28.053 --> 01:01:30.118
copy constructor to the move constructor.

NOTE Confidence: 0.653379237142857

01:01:30.120 --> 01:01:31.394
But then if anything was not updated,

NOTE Confidence: 0.653379237142857

01:01:31.400 --> 01:01:32.351
that's a bug.

NOTE Confidence: 0.653379237142857

01:01:32.351 --> 01:01:34.253
So is no throwing move constructible

NOTE Confidence: 0.653379237142857

01:01:34.253 --> 01:01:36.776
T and is no throw move constructable.

NOTE Confidence: 0.653379237142857

01:01:36.780 --> 01:01:38.676
E OK strengthened again.

NOTE Confidence: 0.653379237142857

01:01:38.676 --> 01:01:41.046
Got it correctly to Morgan.

NOTE Confidence: 0.653379237142857

01:01:41.050 --> 01:01:43.205
And his move constructible T

NOTE Confidence: 0.653379237142857

01:01:43.205 --> 01:01:45.473
and is move constructible? OK,

NOTE Confidence: 0.653379237142857

01:01:45.473 --> 01:01:49.817
that's good copy of the load step required.

NOTE Confidence: 0.653379237142857

01:01:49.820 --> 01:01:52.112
Is the notebook required?

NOTE Confidence: 0.653379237142857

01:01:52.112 --> 01:01:55.240
It is, yes, it is good point.

NOTE Confidence: 0.653379237142857

01:01:55.240 --> 01:01:56.312
Good catch.

NOTE Confidence: 0.653379237142857

01:01:56.312 --> 01:01:58.456
It is not strengthen.

NOTE Confidence: 0.653379237142857

01:01:58.460 --> 01:02:00.356
This one is required because no

NOTE Confidence: 0.653379237142857

01:02:00.356 --> 01:02:02.374
except on move constructors is more

NOTE Confidence: 0.653379237142857

01:02:02.374 --> 01:02:05.390
important than on constructors, so.

NOTE Confidence: 0.653379237142857

01:02:05.390 --> 01:02:07.848
OK, let's see.

NOTE Confidence: 0.653379237142857

01:02:07.848 --> 01:02:11.450
That's an excellent catch and I missed it I.

NOTE Confidence: 0.653379237142857

01:02:11.450 --> 01:02:12.770
Just look right past it.

NOTE Confidence: 0.653379237142857

01:02:12.770 --> 01:02:15.188
So I'm very glad you caught.

NOTE Confidence: 0.653379237142857

01:02:15.190 --> 01:02:19.984
Easy Carter noticed that this

NOTE Confidence: 0.653379237142857

01:02:19.984 --> 01:02:23.656
exception specification is mandated

NOTE Confidence: 0.653379237142857

01:02:23.656 --> 01:02:28.918
by the standard and therefore should

NOTE Confidence: 0.653379237142857

01:02:28.918 --> 01:02:33.098
not be commented as strengthened.

NOTE Confidence: 0.84585757

01:02:39.580 --> 01:02:40.942
I'm like man, I'm I'm clearly

NOTE Confidence: 0.84585757

01:02:40.942 --> 01:02:42.320
slipping if I'm not noticing.

NOTE Confidence: 0.84585757

01:02:42.320 --> 01:02:43.874
Like you know, the one incorrect

NOTE Confidence: 0.84585757

01:02:43.874 --> 01:02:45.980
comment in a sea of repetitive code.

NOTE Confidence: 0.84585757

01:02:45.980 --> 01:02:48.776
What's happening to me? Thank you.

NOTE Confidence: 0.84585757

01:02:48.780 --> 01:02:50.495
OK, so you don't make one pass

NOTE Confidence: 0.84585757

01:02:50.495 --> 01:02:51.630
through this and instantly

NOTE Confidence: 0.84585757

01:02:51.630 --> 01:02:53.330
see every single thing wrong.

NOTE Confidence: 0.931352764

01:02:56.550 --> 01:02:59.030
OK, so if it's true,

NOTE Confidence: 0.931352764

01:02:59.030 --> 01:03:01.508
direct non initialized with stud move,

NOTE Confidence: 0.931352764

01:03:01.510 --> 01:03:03.568
otherwise did move and then post conditions.

NOTE Confidence: 0.931352764

01:03:03.570 --> 01:03:06.055
The write has value is unchanged so

NOTE Confidence: 0.931352764

01:03:06.055 --> 01:03:09.249
we do not clear out the right value.

NOTE Confidence: 0.931352764

01:03:09.250 --> 01:03:11.410
We just move from its guts.

NOTE Confidence: 0.931352764

01:03:11.410 --> 01:03:14.523
So copying has value is correct and

NOTE Confidence: 0.931352764

01:03:14.523 --> 01:03:16.521
then we stood construct that stood

NOTE Confidence: 0.931352764

01:03:16.521 --> 01:03:18.708
address the value or unexpected stood

NOTE Confidence: 0.931352764

01:03:18.708 --> 01:03:20.964
move other value or other unexpected.

NOTE Confidence: 0.931352764

01:03:20.970 --> 01:03:22.146
OK that's all good.

NOTE Confidence: 0.931352764

01:03:22.146 --> 01:03:23.910
We've got a semi colon there

NOTE Confidence: 0.931352764

01:03:23.971 --> 01:03:25.376
though and that is not.

NOTE Confidence: 0.931352764

01:03:25.380 --> 01:03:27.400
Correct or not necessary and

NOTE Confidence: 0.931352764

01:03:27.400 --> 01:03:29.016
is not correct elsewhere,

NOTE Confidence: 0.931352764

01:03:29.020 --> 01:03:31.617
so I will get the single character

NOTE Confidence: 0.931352764

01:03:31.617 --> 01:03:35.150
typo before anybody else notices it.

NOTE Confidence: 0.931352764

01:03:35.150 --> 01:03:38.590
This semi colon is unnecessary.

NOTE Confidence: 0.931352764

01:03:38.590 --> 01:03:41.202
I still got it. OK,

NOTE Confidence: 0.931352764

01:03:41.202 --> 01:03:43.386
hopefully I can find more significant bugs.

NOTE Confidence: 0.931352764

01:03:43.390 --> 01:03:45.538
Yeah, that unnecessary select.

NOTE Confidence: 0.931352764

01:03:45.538 --> 01:03:48.760
Then the move seed or turning

NOTE Confidence: 0.931352764

01:03:48.857 --> 01:03:50.378
off cling format.

NOTE Confidence: 0.931352764

01:03:50.380 --> 01:03:51.100
It's interesting,

NOTE Confidence: 0.931352764

01:03:51.100 --> 01:03:52.540
I'm OK with that,

NOTE Confidence: 0.931352764

01:03:52.540 --> 01:03:54.940
not naming it, which is good.

NOTE Confidence: 0.931352764

01:03:54.940 --> 01:03:57.202
We've got the requires trivially move

NOTE Confidence: 0.931352764

01:03:57.202 --> 01:03:59.819
T and trivially move error defaulted,

NOTE Confidence: 0.931352764

01:03:59.820 --> 01:04:01.520
that's fine.

NOTE Confidence: 0.783461674444444

01:04:03.590 --> 01:04:06.164
Yes, and that's going to copy over the value,

NOTE Confidence: 0.783461674444444

01:04:06.170 --> 01:04:07.466
move all that it's not going to try

NOTE Confidence: 0.783461674444444

01:04:07.466 --> 01:04:08.809
to zero out the value or anything,

NOTE Confidence: 0.783461674444444

01:04:08.810 --> 01:04:11.753
so that's so good. OK, wow, then we

NOTE Confidence: 0.783461674444444

01:04:11.753 --> 01:04:14.860
got a big set of conversions or tasks.

NOTE Confidence: 0.783461674444444

01:04:14.860 --> 01:04:16.720
That's all this, so it's just

NOTE Confidence: 0.783461674444444

01:04:16.720 --> 01:04:18.290
mirroring what the standard says.

NOTE Confidence: 0.783461674444444

01:04:18.290 --> 01:04:24.040
This is fun. OK, so this is the

NOTE Confidence: 0.783461674444444

01:04:24.040 --> 01:04:26.236
conditionally explicit converting

NOTE Confidence: 0.783461674444444

01:04:26.236 --> 01:04:29.366
copy and converting move constructor.

NOTE Confidence: 0.783461674444444

01:04:29.370 --> 01:04:30.578
Let's see if we can read the standards

NOTE Confidence: 0.783461674444444

01:04:30.578 --> 01:04:31.669
and see what it's trying to do.

NOTE Confidence: 0.783461674444444

01:04:31.670 --> 01:04:33.270
I think it's going to be a little

NOTE Confidence: 0.783461674444444

01:04:33.270 --> 01:04:34.418
more natural than it appears.

NOTE Confidence: 0.783461674444444

01:04:34.420 --> 01:04:37.096
So if you are converting from

NOTE Confidence: 0.783461674444444

01:04:37.096 --> 01:04:39.477
an unexpected of different value

NOTE Confidence: 0.783461674444444

01:04:39.477 --> 01:04:41.517
type different error type.

NOTE Confidence: 0.783461674444444

01:04:41.520 --> 01:04:44.080
Then for the first overload,

NOTE Confidence: 0.783461674444444

01:04:44.080 --> 01:04:47.232
let you off because you ref or just

NOTE Confidence: 0.783461674444444

01:04:47.232 --> 01:04:50.675
you let GF be constant GF or just G.

NOTE Confidence: 0.783461674444444

01:04:50.680 --> 01:04:55.386
OK so you got these things exist when my

NOTE Confidence: 0.783461674444444

01:04:55.386 --> 01:04:59.142
value is constructible from the value

NOTE Confidence: 0.783461674444444

01:04:59.142 --> 01:05:01.459
of the right as viewed through either

NOTE Confidence: 0.783461674444444

01:05:01.459 --> 01:05:03.878
the consciousness or the move Ness.

NOTE Confidence: 0.783461674444444

01:05:03.880 --> 01:05:06.010
That's what this is doing and.

NOTE Confidence: 0.808611045555556

01:05:08.750 --> 01:05:11.828
The thing itself had better not

NOTE Confidence: 0.808611045555556

01:05:11.828 --> 01:05:14.657
be an expected. Why is that?

NOTE Confidence: 0.808611045555556

01:05:14.657 --> 01:05:16.373
Because expected is constructible

NOTE Confidence: 0.808611045555556

01:05:16.373 --> 01:05:18.409
from at directly yeah here,

NOTE Confidence: 0.808611045555556

01:05:18.410 --> 01:05:22.316
so we don't want this to ever compete with.

NOTE Confidence: 0.725387444285714

01:05:24.560 --> 01:05:28.704
Is this handling like expected of expected?

NOTE Confidence: 0.725387444285714

01:05:28.710 --> 01:05:30.606
Tea had better not be or

NOTE Confidence: 0.725387444285714

01:05:30.606 --> 01:05:31.870
no can't be conversions.

NOTE Confidence: 0.725387444285714

01:05:31.870 --> 01:05:33.622
T had better not be constructible

NOTE Confidence: 0.725387444285714

01:05:33.622 --> 01:05:35.545
from expected, because if it were we

NOTE Confidence: 0.725387444285714

01:05:35.545 --> 01:05:37.630
don't want to convert the whole thing.

NOTE Confidence: 0.725387444285714

01:05:37.630 --> 01:05:40.550
We want to redirect essentially to this one.

NOTE Confidence: 0.725387444285714

01:05:40.550 --> 01:05:42.820
OK, so this is essentially

NOTE Confidence: 0.725387444285714

01:05:42.820 --> 01:05:43.728
preventing ambiguity.

NOTE Confidence: 0.725387444285714

01:05:43.730 --> 01:05:45.365
Honestly, as complicated as the

NOTE Confidence: 0.725387444285714

01:05:45.365 --> 01:05:47.230
set of constraints seems to be,

NOTE Confidence: 0.725387444285714

01:05:47.230 --> 01:05:50.488
I am so happy that WG 21 is paying

NOTE Confidence: 0.725387444285714

01:05:50.488 --> 01:05:53.290
attention to the constraints needed

NOTE Confidence: 0.725387444285714

01:05:53.290 --> 01:05:55.730
for highly templated constructors.

NOTE Confidence: 0.725387444285714

01:05:55.730 --> 01:05:58.660
Because stood tuple which has.

NOTE Confidence: 0.725387444285714

01:05:58.660 --> 01:06:01.348
Very complicated overload set

NOTE Confidence: 0.725387444285714

01:06:01.348 --> 01:06:03.364
had tremendously ambiguous.

NOTE Confidence: 0.725387444285714

01:06:03.370 --> 01:06:05.666
Constructor is back in the TR1 era and

NOTE Confidence: 0.725387444285714

01:06:05.666 --> 01:06:08.083
it took many years of cleanup before

NOTE Confidence: 0.725387444285714

01:06:08.083 --> 01:06:09.496
they became completely unambiguous.

NOTE Confidence: 0.725387444285714

01:06:09.496 --> 01:06:12.280
I think even now there's a couple LW

NOTE Confidence: 0.725387444285714

01:06:12.342 --> 01:06:14.490
issues that are still being resolved.

NOTE Confidence: 0.725387444285714

01:06:14.490 --> 01:06:16.394
I'm very happy to see that expected.

NOTE Confidence: 0.725387444285714

01:06:16.400 --> 01:06:18.500
It is getting all this right

NOTE Confidence: 0.725387444285714

01:06:18.500 --> 01:06:20.620
as of the first version,

NOTE Confidence: 0.725387444285714

01:06:20.620 --> 01:06:22.864
so it had better not be

NOTE Confidence: 0.725387444285714

01:06:22.864 --> 01:06:24.360
constructible from expected either.

NOTE Confidence: 0.725387444285714

01:06:24.360 --> 01:06:27.559
L value R value counts or modifiable.

NOTE Confidence: 0.725387444285714

01:06:27.560 --> 01:06:29.018
It had better not be implicitly.

NOTE Confidence: 0.725387444285714

01:06:29.020 --> 01:06:30.640
Convertible, OK.

NOTE Confidence: 0.766241070909091

01:06:32.700 --> 01:06:34.345
The ref ref here on the left

NOTE Confidence: 0.766241070909091

01:06:34.345 --> 01:06:35.840
I think is unnecessary.

NOTE Confidence: 0.766241070909091

01:06:35.840 --> 01:06:37.088
Look like an expect.

NOTE Confidence: 0.766241070909091

01:06:37.088 --> 01:06:38.632
Yeah, I don't wanna see you at all

NOTE Confidence: 0.766241070909091

01:06:38.632 --> 01:06:40.594
if you're on unexpended, expect.

NOTE Confidence: 0.766241070909091

01:06:40.594 --> 01:06:44.250
And then similarly here.

NOTE Confidence: 0.766241070909091

01:06:44.250 --> 01:06:48.044
Unexpected of E had better not be

NOTE Confidence: 0.766241070909091

01:06:48.044 --> 01:06:50.670
constructible from expected of you and G.

NOTE Confidence: 0.766241070909091

01:06:50.670 --> 01:06:51.585
Why is this?

NOTE Confidence: 0.766241070909091

01:06:51.585 --> 01:06:53.110
Don't we control these classes?

NOTE Confidence: 0.838848003333333

01:06:55.210 --> 01:06:58.876
That is strange. Where are these?

NOTE Confidence: 0.838848003333333

01:06:58.880 --> 01:07:00.428
Is that for like, an unexpected,

NOTE Confidence: 0.838848003333333

01:07:00.430 --> 01:07:02.718
unexpected and then yeah,

NOTE Confidence: 0.838848003333333

01:07:02.718 --> 01:07:08.310
yeah it might be because yeah, I don't see.

NOTE Confidence: 0.838848003333333

01:07:08.310 --> 01:07:09.890
There's no like direct conversions,

NOTE Confidence: 0.838848003333333

01:07:09.890 --> 01:07:12.394
but I think that is what it's defending

NOTE Confidence: 0.838848003333333

01:07:12.394 --> 01:07:13.886
against unexpected of expected,

NOTE Confidence: 0.838848003333333

01:07:13.886 --> 01:07:15.846
which would be very confusing.

NOTE Confidence: 0.838848003333333

01:07:15.850 --> 01:07:17.320
OK yeah, but I think it might

NOTE Confidence: 0.838848003333333

01:07:17.320 --> 01:07:18.778
actually be able to come up right?

NOTE Confidence: 0.838848003333333

01:07:18.780 --> 01:07:21.398
Hmm? Because you have.

NOTE Confidence: 0.852172615

01:07:24.280 --> 01:07:26.020
Well, it's kind of an error

NOTE Confidence: 0.852172615

01:07:26.020 --> 01:07:26.910
success situation, isn't it?

NOTE Confidence: 0.819126422727273

01:07:29.070 --> 01:07:30.316
And this is where you want to

NOTE Confidence: 0.819126422727273

01:07:30.316 --> 01:07:31.290
initialize with the unexpected.

NOTE Confidence: 0.819126422727273

01:07:31.290 --> 01:07:32.470
OK, in any event,

NOTE Confidence: 0.819126422727273

01:07:32.470 --> 01:07:34.212
the the standard list these requirements,

NOTE Confidence: 0.819126422727273

01:07:34.212 --> 01:07:35.784
we just need to implement them.

NOTE Confidence: 0.819126422727273

01:07:35.790 --> 01:07:36.996
I'm convinced that they were trying.

NOTE Confidence: 0.819126422727273

01:07:37.000 --> 01:07:38.425
Like library evolution will talk

NOTE Confidence: 0.819126422727273

01:07:38.425 --> 01:07:39.850
extensively and actually library classic

NOTE Confidence: 0.819126422727273

01:07:39.889 --> 01:07:41.485
would have talked extensively about this.

NOTE Confidence: 0.819126422727273

01:07:41.490 --> 01:07:45.855
So if all of these conditions are met then.

NOTE Confidence: 0.819126422727273

01:07:45.860 --> 01:07:48.260
Forward the value otherwise

NOTE Confidence: 0.819126422727273

01:07:48.260 --> 01:07:50.060
forward the error.

NOTE Confidence: 0.819126422727273

01:07:50.060 --> 01:07:52.260
UM, aren't just as unchanged.

NOTE Confidence: 0.819126422727273

01:07:52.260 --> 01:07:55.044
There was expressions and then the

NOTE Confidence: 0.819126422727273

01:07:55.044 --> 01:07:57.488
expression site explicit is equivalent

NOTE Confidence: 0.819126422727273

01:07:57.488 --> 01:08:01.016
to not convertible or not convertible.

NOTE Confidence: 0.819126422727273

01:08:01.020 --> 01:08:02.840
OK, so if either of these are

NOTE Confidence: 0.819126422727273

01:08:02.840 --> 01:08:03.620
not implicitly convertible,

NOTE Confidence: 0.819126422727273

01:08:03.620 --> 01:08:05.476
then the whole thing needs to be explicit.

NOTE Confidence: 0.819126422727273

01:08:05.480 --> 01:08:06.860
OK, this is really nice.

NOTE Confidence: 0.819126422727273

01:08:06.860 --> 01:08:09.065
This is an example of why conditional

NOTE Confidence: 0.819126422727273

01:08:09.065 --> 01:08:10.616
explicit just dramatically minimizes the

NOTE Confidence: 0.819126422727273

01:08:10.616 --> 01:08:12.562
amount of code and standards we need.

NOTE Confidence: 0.819126422727273

01:08:12.570 --> 01:08:14.130
Otherwise we would need to

NOTE Confidence: 0.819126422727273

01:08:14.130 --> 01:08:15.690
replicate all this nonsense twice.

NOTE Confidence: 0.819126422727273

01:08:15.690 --> 01:08:17.226
For both explicit and non explicit,

NOTE Confidence: 0.819126422727273

01:08:17.230 --> 01:08:18.978
and have additional constraints,

NOTE Confidence: 0.819126422727273

01:08:18.978 --> 01:08:20.726
which would be awful.

NOTE Confidence: 0.819126422727273

01:08:20.730 --> 01:08:23.772
OK, so Misco is extracting all

NOTE Confidence: 0.819126422727273

01:08:23.772 --> 01:08:26.391
of this lovely standard ease

NOTE Confidence: 0.819126422727273

01:08:26.391 --> 01:08:29.367
into a long set of requirements.

NOTE Confidence: 0.819126422727273

01:08:29.370 --> 01:08:32.760
He's calling. It is not convertible.

NOTE Confidence: 0.819126422727273

01:08:32.760 --> 01:08:35.706
But this is a static constexpr

NOTE Confidence: 0.819126422727273

01:08:35.706 --> 01:08:37.670
ruled within expected itself,

NOTE Confidence: 0.819126422727273

01:08:37.670 --> 01:08:40.154
so I'm OK with having a fairly terse name.

NOTE Confidence: 0.819126422727273

01:08:40.160 --> 01:08:41.260
If this were top level,

NOTE Confidence: 0.819126422727273

01:08:41.260 --> 01:08:43.006
I would really want that name

NOTE Confidence: 0.819126422727273

01:08:43.006 --> 01:08:44.810
to be longer because it sounds.

NOTE Confidence: 0.846546095454546

01:08:48.280 --> 01:08:49.594
Doesn't sound like it has anything

NOTE Confidence: 0.846546095454546

01:08:49.594 --> 01:08:50.800
to do with expected itself,

NOTE Confidence: 0.846546095454546

01:08:50.800 --> 01:08:53.120
but because it is specific to expect it.

NOTE Confidence: 0.846546095454546

01:08:53.120 --> 01:08:55.178
I think I'm OK with this.

NOTE Confidence: 0.846546095454546

01:08:55.180 --> 01:08:58.033
OK, so it's templated on Utah and new error,

NOTE Confidence: 0.846546095454546

01:08:58.040 --> 01:09:01.256
which are the you and G.

NOTE Confidence: 0.846546095454546

01:09:01.260 --> 01:09:03.060
Instead, constable equals and

NOTE Confidence: 0.846546095454546

01:09:03.060 --> 01:09:06.330
then we expect all this to match.

NOTE Confidence: 0.846546095454546

01:09:06.330 --> 01:09:08.670
Let's see if this is cracked.

NOTE Confidence: 0.846546095454546

01:09:08.670 --> 01:09:10.242
Here's an highlighting.

NOTE Confidence: 0.846546095454546

01:09:10.242 --> 01:09:13.790
OK, so we start off with. I am.

NOTE Confidence: 0.85769564

01:09:19.460 --> 01:09:23.444
T&amp;amp;UF no those UF ones must be specific

NOTE Confidence: 0.85769564

01:09:23.444 --> 01:09:25.011
to the constructors because it

NOTE Confidence: 0.85769564

01:09:25.011 --> 01:09:27.097
varies between the copy of the move,

NOTE Confidence: 0.85769564

01:09:27.100 --> 01:09:29.236
so it's just the common stuff.

NOTE Confidence: 0.85769564

01:09:29.240 --> 01:09:31.590
Here OK here we go.

NOTE Confidence: 0.85769564

01:09:31.590 --> 01:09:33.486
So all these things need to

NOTE Confidence: 0.85769564

01:09:33.486 --> 01:09:35.780
be let me erase this garbage.

NOTE Confidence: 0.88640959

01:09:38.170 --> 01:09:39.808
All these need to be false.

NOTE Confidence: 0.88640959

01:09:39.810 --> 01:09:42.066
Every single one's gotta be false,

NOTE Confidence: 0.88640959

01:09:42.070 --> 01:09:44.822
so that's why all these need to be

NOTE Confidence: 0.88640959

01:09:44.822 --> 01:09:49.208
not and OK. So we're looking for.

NOTE Confidence: 0.88640959

01:09:49.210 --> 01:09:50.558
Use constructible V for

NOTE Confidence: 0.88640959

01:09:50.558 --> 01:09:52.243
the first set of four.

NOTE Confidence: 0.88640959

01:09:52.250 --> 01:09:56.246
The T from either expected of you and G,

NOTE Confidence: 0.88640959

01:09:56.250 --> 01:09:58.535
which is UD&amp;amp;U error ref

NOTE Confidence: 0.88640959

01:09:58.535 --> 01:10:00.820
or the non ref version.

NOTE Confidence: 0.88640959

01:10:00.820 --> 01:10:04.397
Or the constraints or the constar value?

NOTE Confidence: 0.88640959

01:10:04.400 --> 01:10:06.824
And then the next set is is convertible,

NOTE Confidence: 0.88640959

01:10:06.830 --> 01:10:10.270
which confusingly reverses the parameters.

NOTE Confidence: 0.88640959

01:10:10.270 --> 01:10:12.158
So the sense is different, so that's

NOTE Confidence: 0.88640959

01:10:12.158 --> 01:10:14.830
why the time now appears on the right.

NOTE Confidence: 0.88640959

01:10:14.830 --> 01:10:18.316
So you get expected L Ruff.

NOTE Confidence: 0.88640959

01:10:18.320 --> 01:10:20.476
RF there, this exactly matches the standard,

NOTE Confidence: 0.88640959

01:10:20.480 --> 01:10:21.992
even though I claim that this RF

NOTE Confidence: 0.88640959

01:10:21.992 --> 01:10:23.380
should not appear in the standard,

NOTE Confidence: 0.88640959

01:10:23.380 --> 01:10:26.050
I'm OK with mirroring what the

NOTE Confidence: 0.88640959

01:10:26.050 --> 01:10:28.350
standard says in this case.

NOTE Confidence: 0.88640959

01:10:28.350 --> 01:10:30.816
We we have asked previously to

NOTE Confidence: 0.88640959

01:10:30.816 --> 01:10:33.076
omit the RIFRAFF in other cases,

NOTE Confidence: 0.88640959

01:10:33.076 --> 01:10:35.470
but these set of constraints is so

NOTE Confidence: 0.88640959

01:10:35.539 --> 01:10:37.753
complicated I'm inclined to say let's

NOTE Confidence: 0.88640959

01:10:37.753 --> 01:10:42.540
just do what the standard says. OK.

NOTE Confidence: 0.88640959

01:10:42.540 --> 01:10:44.070
If we were simpler, I'd be like, yeah,

NOTE Confidence: 0.88640959

01:10:44.070 --> 01:10:46.446
let's be a little inventive there.

NOTE Confidence: 0.88640959

01:10:46.446 --> 01:10:48.402
The rationale there is when type

NOTE Confidence: 0.88640959

01:10:48.402 --> 01:10:50.578
traits are specified in terms of Deco Val.

NOTE Confidence: 0.88640959

01:10:50.580 --> 01:10:51.216
Ref ref.

NOTE Confidence: 0.88640959

01:10:51.216 --> 01:10:52.806
Is not necessary because Deco

NOTE Confidence: 0.88640959

01:10:52.806 --> 01:10:54.200
Val will implicitly add it.

NOTE Confidence: 0.88640959

01:10:54.200 --> 01:10:56.034
And here we know decals added on

NOTE Confidence: 0.88640959

01:10:56.034 --> 01:10:58.558
the right and on the left right of

NOTE Confidence: 0.88640959

01:10:58.558 --> 01:11:00.238
constructible and left of convertible.

NOTE Confidence: 0.88640959

01:11:00.240 --> 01:11:03.278
But if the standard did it work?

NOTE Confidence: 0.88640959

01:11:03.280 --> 01:11:04.231
Again, UU error.

NOTE Confidence: 0.88640959

01:11:04.231 --> 01:11:06.133
This is all good and then

NOTE Confidence: 0.88640959

01:11:06.133 --> 01:11:07.529
finally unexpected of E.

NOTE Confidence: 0.88640959

01:11:07.530 --> 01:11:10.405
That's our error versus expected

NOTE Confidence: 0.88640959

01:11:10.405 --> 01:11:11.824
of UD&amp;amp;U error.

NOTE Confidence: 0.88640959

01:11:11.824 --> 01:11:15.200
Either ref or not constant ref or not.

NOTE Confidence: 0.88640959

01:11:15.200 --> 01:11:19.220
OK exactly mirrors the standard wonderful.

NOTE Confidence: 0.88640959

01:11:19.220 --> 01:11:20.916
OK, this is depicted.

NOTE Confidence: 0.88640959

01:11:20.916 --> 01:11:23.036
The one thing I noticed.

NOTE Confidence: 0.88640959

01:11:23.040 --> 01:11:25.672
This is depicted in terms of a

NOTE Confidence: 0.88640959

01:11:25.672 --> 01:11:28.510
long chain of variable templates.

NOTE Confidence: 0.88640959

01:11:28.510 --> 01:11:32.774
We could in theory convert this to a

NOTE Confidence: 0.88640959

01:11:32.774 --> 01:11:36.630
conjunction of negation of is constructible,

NOTE Confidence: 0.88640959

01:11:36.630 --> 01:11:38.250
which would be more verbose.

NOTE Confidence: 0.88640959

01:11:38.250 --> 01:11:40.446
Admittedly, it could potentially

NOTE Confidence: 0.88640959

01:11:40.446 --> 01:11:43.740
allow the compiler to short circuit.

NOTE Confidence: 0.88640959

01:11:43.740 --> 01:11:45.900
However, I don't know if that would really

NOTE Confidence: 0.88640959

01:11:45.900 --> 01:11:48.356
buy a lot of throughput compiler speed,

NOTE Confidence: 0.88640959

01:11:48.360 --> 01:11:50.154
because if it doesn't short circuit

NOTE Confidence: 0.88640959

01:11:50.154 --> 01:11:52.318
the sort of ultimate time is the same.

NOTE Confidence: 0.88640959

01:11:52.320 --> 01:11:54.460
The short circuiting only

NOTE Confidence: 0.88640959

01:11:54.460 --> 01:11:56.065
happens when considering.

NOTE Confidence: 0.88640959

01:11:56.070 --> 01:11:58.836
This thing which looks like it

NOTE Confidence: 0.88640959

01:11:58.836 --> 01:12:01.010
converting constructor and wanting

NOTE Confidence: 0.88640959

01:12:01.010 --> 01:12:04.760
it to defer to another constructor.

NOTE Confidence: 0.88640959

01:12:04.760 --> 01:12:07.328
Which seems uncommon.

NOTE Confidence: 0.88640959

01:12:07.330 --> 01:12:08.965
When Ty is actually constructible

NOTE Confidence: 0.88640959

01:12:08.965 --> 01:12:10.600
from expected and so forth.

NOTE Confidence: 0.88640959

01:12:10.600 --> 01:12:13.138
Like all these conditions are possible,

NOTE Confidence: 0.88640959

01:12:13.140 --> 01:12:15.360
but they're pretty whacky coda,

NOTE Confidence: 0.88640959

01:12:15.360 --> 01:12:15.992
I think,

NOTE Confidence: 0.88640959

01:12:15.992 --> 01:12:17.572
has to be pretty pathological

NOTE Confidence: 0.88640959

01:12:17.572 --> 01:12:19.937
for any of these to be relevant,

NOTE Confidence: 0.88640959

01:12:19.940 --> 01:12:21.404
which argues in favor of just

NOTE Confidence: 0.88640959

01:12:21.404 --> 01:12:22.136
directly writing it,

NOTE Confidence: 0.88640959

01:12:22.140 --> 01:12:23.064
like Misco has,

NOTE Confidence: 0.88640959

01:12:23.064 --> 01:12:24.604
rather than writing the more

NOTE Confidence: 0.88640959

01:12:24.604 --> 01:12:26.234
convoluted but potentially faster

NOTE Confidence: 0.88640959

01:12:26.234 --> 01:12:28.150
throughput version with conjunction.

NOTE Confidence: 0.88640959

01:12:28.150 --> 01:12:31.278
I'm OK with this. I strongly prefer this.

NOTE Confidence: 0.88640959

01:12:31.280 --> 01:12:31.494
OK,

NOTE Confidence: 0.88640959

01:12:31.494 --> 01:12:33.420
if it ever turns out to be through problem,

NOTE Confidence: 0.88640959

01:12:33.420 --> 01:12:35.040
we can revisit with conjunction.

NOTE Confidence: 0.88640959

01:12:35.040 --> 01:12:36.774
Otherwise sounds good.

NOTE Confidence: 0.88640959

01:12:36.774 --> 01:12:38.508
OK, thanks Charlie.

NOTE Confidence: 0.88640959

01:12:38.510 --> 01:12:40.990
OK, so with that,

NOTE Confidence: 0.88640959

01:12:40.990 --> 01:12:44.090
let's take a look here.

NOTE Confidence: 0.88640959

01:12:44.090 --> 01:12:44.513
OK,

NOTE Confidence: 0.88640959

01:12:44.513 --> 01:12:47.474
so now we're going to see the

NOTE Confidence: 0.88640959

01:12:47.474 --> 01:12:48.320
remaining constraints.

NOTE Confidence: 0.88640959

01:12:48.320 --> 01:12:49.488
It's a little narrow.

NOTE Confidence: 0.85927287

01:12:51.650 --> 01:12:54.026
OK, so we've got template on

NOTE Confidence: 0.85927287

01:12:54.026 --> 01:12:55.919
Utah and new error requires.

NOTE Confidence: 0.85927287

01:12:55.919 --> 01:12:57.155
So here's these first

NOTE Confidence: 0.85927287

01:12:57.155 --> 01:12:58.970
constraints that we want to see.

NOTE Confidence: 0.85927287

01:12:58.970 --> 01:13:01.819
Our time needs to be constructible from

NOTE Confidence: 0.85927287

01:13:01.819 --> 01:13:05.007
Conce Utah ref because this is the copy.

NOTE Confidence: 0.85927287

01:13:05.010 --> 01:13:09.506
Yeah you ref. And error needs to be

NOTE Confidence: 0.85927287

01:13:09.506 --> 01:13:13.240
constructible from constitute error ref OK.

NOTE Confidence: 0.85927287

01:13:13.240 --> 01:13:14.944
And, uh, we should not be

NOTE Confidence: 0.85927287

01:13:14.944 --> 01:13:16.700
convertible from Utah and new error.

NOTE Confidence: 0.85927287

01:13:16.700 --> 01:13:19.300
OK, that's very nice then.

NOTE Confidence: 0.85927287

01:13:19.300 --> 01:13:21.508
Context for conditional, explicit

NOTE Confidence: 0.85927287

01:13:21.508 --> 01:13:24.820
and then the conditional explicit is.

NOTE Confidence: 0.85927287

01:13:24.820 --> 01:13:29.155
We should see not convertible

NOTE Confidence: 0.85927287

01:13:29.155 --> 01:13:33.734
UFT or not convertible GFE's OK.

NOTE Confidence: 0.85927287

01:13:33.734 --> 01:13:35.942
Not convertible from Consulte

NOTE Confidence: 0.85927287

01:13:35.942 --> 01:13:38.899
RAF to Thai correct or not.

NOTE Confidence: 0.85927287

01:13:38.900 --> 01:13:41.600
Convertible consume erft error correct.

NOTE Confidence: 0.85927287

01:13:41.600 --> 01:13:44.092
OK this is the copy constructor converting

NOTE Confidence: 0.85927287

01:13:44.092 --> 01:13:46.429
copy from other or conditionally no

NOTE Confidence: 0.85927287

01:13:46.429 --> 01:13:48.967
except when is no throw constructible

NOTE Confidence: 0.85927287

01:13:48.967 --> 01:13:52.379
V tie from construed ref and is no

NOTE Confidence: 0.85927287

01:13:52.379 --> 01:13:54.780
throw constructible error from consu ref.

NOTE Confidence: 0.85927287

01:13:54.780 --> 01:13:56.804
The copy is strengthened

NOTE Confidence: 0.85927287

01:13:56.804 --> 01:13:59.334
and so will the move,

NOTE Confidence: 0.85927287

01:13:59.340 --> 01:14:02.070
cause it's not an actual move constructor.

NOTE Confidence: 0.85927287

01:14:02.070 --> 01:14:04.026
OK, copy over the has value.

NOTE Confidence: 0.85927287

01:14:04.030 --> 01:14:05.646
If has value then do the construct add.

NOTE Confidence: 0.85927287

01:14:05.650 --> 01:14:08.940
Otherwise do the unexpected construct add OK,

NOTE Confidence: 0.85927287

01:14:08.940 --> 01:14:09.612
that's good.

NOTE Confidence: 0.85927287

01:14:09.612 --> 01:14:11.628
OK, going a little faster now.

NOTE Confidence: 0.85927287

01:14:11.630 --> 01:14:15.180
Your error OK here we want to see not the

NOTE Confidence: 0.85927287

01:14:15.275 --> 01:14:18.915
counts draff but just the plain type Utah.

NOTE Confidence: 0.85927287

01:14:18.920 --> 01:14:21.960
And constructible error you error and

NOTE Confidence: 0.85927287

01:14:21.960 --> 01:14:25.440
not convertible Utah you error good

NOTE Confidence: 0.85927287

01:14:25.440 --> 01:14:28.840
constexpr simplicit not convertible from.

NOTE Confidence: 0.85927287

01:14:28.840 --> 01:14:31.160
Let's see where that tier.

NOTE Confidence: 0.85927287

01:14:31.160 --> 01:14:35.955
OK yeah, we get the UU first so U Thai

NOTE Confidence: 0.85927287

01:14:35.955 --> 01:14:39.070
Thai or not convertible ur error.

NOTE Confidence: 0.85927287

01:14:39.070 --> 01:14:40.753
OK, that's correct.

NOTE Confidence: 0.85927287

01:14:40.753 --> 01:14:43.558
Converting move constructor conditional no,

NOTE Confidence: 0.85927287

01:14:43.560 --> 01:14:46.224
except that strengthened time needs to

NOTE Confidence: 0.85927287

01:14:46.224 --> 01:14:48.400
be nothrow constructible from Utah.

NOTE Confidence: 0.85927287

01:14:48.400 --> 01:14:51.406
No construct and no throw constructible

NOTE Confidence: 0.85927287

01:14:51.406 --> 01:14:54.080
error from you error correct

NOTE Confidence: 0.85927287

01:14:54.080 --> 01:14:58.196
copy that has value, but then.

NOTE Confidence: 0.85927287

01:14:58.200 --> 01:15:01.920
Forward, not move forward.

NOTE Confidence: 0.85927287

01:15:01.920 --> 01:15:04.560
That's this year.

NOTE Confidence: 0.85927287

01:15:04.560 --> 01:15:08.540
Utai and you error excellent.

NOTE Confidence: 0.85927287

01:15:08.540 --> 01:15:10.766
OK, that's the converting copy move.

NOTE Confidence: 0.85927287

01:15:10.770 --> 01:15:14.438
Now we have the Utah reference struct.

NOTE Confidence: 0.85927287

01:15:14.440 --> 01:15:16.700
OK, just a little simpler.

NOTE Confidence: 0.85927287

01:15:16.700 --> 01:15:18.394
Can we back up for a second?

NOTE Confidence: 0.85927287

01:15:18.400 --> 01:15:20.775
Ohh sure you should forward

NOTE Confidence: 0.85927287

01:15:20.775 --> 01:15:22.675
instead of move here.

NOTE Confidence: 0.85927287

01:15:22.680 --> 01:15:27.776
Yeah, that's uhm to these be reference types.

NOTE Confidence: 0.85927287

01:15:27.780 --> 01:15:29.268
That's a good question.

NOTE Confidence: 0.85927287

01:15:29.268 --> 01:15:31.500
The standard uses for when they

NOTE Confidence: 0.85927287

01:15:31.574 --> 01:15:33.724
could be reference types has

NOTE Confidence: 0.85927287

01:15:33.724 --> 01:15:35.820
expected forbidden reference types.

NOTE Confidence: 0.85927287

01:15:35.820 --> 01:15:37.966
I think it required object types, didn't it?

NOTE Confidence: 0.85927287

01:15:37.966 --> 01:15:43.228
I thought so, yeah, but I'm not seeing it.

NOTE Confidence: 0.85927287

01:15:43.230 --> 01:15:45.552
There there were all the the

NOTE Confidence: 0.85927287

01:15:45.552 --> 01:15:46.824
static assertions unexpected.

NOTE Confidence: 0.85927287

01:15:46.824 --> 01:15:50.540
I thought they would be here year ago.

NOTE Confidence: 0.85927287

01:15:50.540 --> 01:15:52.415
My program that instantiates the

NOTE Confidence: 0.85927287

01:15:52.415 --> 01:15:54.753
definition of template expected TE for a

NOTE Confidence: 0.85927287

01:15:54.753 --> 01:15:56.950
reference type or blah blah blah is bad,

NOTE Confidence: 0.85927287

01:15:56.950 --> 01:15:59.000
so we've already enforced that.

NOTE Confidence: 0.85927287

01:15:59.000 --> 01:15:59.394
It's good,

NOTE Confidence: 0.85927287

01:15:59.394 --> 01:16:00.773
that's a good point if we don't

NOTE Confidence: 0.85927287

01:16:00.773 --> 01:16:01.918
worry about reference types,

NOTE Confidence: 0.85927287

01:16:01.920 --> 01:16:03.220
then forward buys us nothing.

NOTE Confidence: 0.85927287

01:16:03.220 --> 01:16:04.830
It should be moved in the standard.

NOTE Confidence: 0.712018234923077

01:16:08.180 --> 01:16:09.492
There's yeah, only lvalue

NOTE Confidence: 0.712018234923077

01:16:09.492 --> 01:16:10.804
references and rvalue references

NOTE Confidence: 0.712018234923077

01:16:10.804 --> 01:16:12.590
could make that a problem, but.

NOTE Confidence: 0.93766046

01:16:15.830 --> 01:16:18.640
It's not a problem here.

NOTE Confidence: 0.93766046

01:16:18.640 --> 01:16:20.335
And that buying that's binding

NOTE Confidence: 0.93766046

01:16:20.335 --> 01:16:22.770
on both the type and the error.

NOTE Confidence: 0.93766046

01:16:22.770 --> 01:16:24.510
So unless they were trying to

NOTE Confidence: 0.93766046

01:16:24.510 --> 01:16:26.340
like reserve space for the future,

NOTE Confidence: 0.93766046

01:16:26.340 --> 01:16:27.045
that's not necessary.

NOTE Confidence: 0.93766046

01:16:27.045 --> 01:16:28.220
I'm OK with doing what

NOTE Confidence: 0.93766046

01:16:28.220 --> 01:16:29.149
the standard says here,

NOTE Confidence: 0.93766046

01:16:29.150 --> 01:16:31.075
but it does seem that there should

NOTE Confidence: 0.93766046

01:16:31.075 --> 01:16:32.930
be an editorial issue about.

NOTE Confidence: 0.91420481625

01:16:35.330 --> 01:16:36.350
In this case,

NOTE Confidence: 0.91420481625

01:16:36.350 --> 01:16:38.050
because it is within expected,

NOTE Confidence: 0.91420481625

01:16:38.050 --> 01:16:40.660
it's not some arbitrary here.

NOTE Confidence: 0.91420481625

01:16:40.660 --> 01:16:43.440
These could just be moved.

NOTE Confidence: 0.91420481625

01:16:43.440 --> 01:16:45.258
If we switch them ohh I

NOTE Confidence: 0.91420481625

01:16:45.258 --> 01:16:47.250
see I see right to doing.

NOTE Confidence: 0.91420481625

01:16:47.250 --> 01:16:49.010
It's the specification shortcut.

NOTE Confidence: 0.712004615

01:16:51.130 --> 01:16:53.445
Here, they're specifying both the

NOTE Confidence: 0.712004615

01:16:53.445 --> 01:16:56.085
copy and the converting move by

NOTE Confidence: 0.712004615

01:16:56.085 --> 01:16:58.590
condensing them in terms of UF.

NOTE Confidence: 0.712004615

01:16:58.590 --> 01:16:59.934
So if you're going to do this,

NOTE Confidence: 0.712004615

01:16:59.940 --> 01:17:02.058
you do need forward to add

NOTE Confidence: 0.712004615

01:17:02.058 --> 01:17:03.470
the cost you roughness.

NOTE Confidence: 0.712004615

01:17:03.470 --> 01:17:05.774
Otherwise just get you,

NOTE Confidence: 0.712004615

01:17:05.774 --> 01:17:08.604
but if they split this out and said

NOTE Confidence: 0.712004615

01:17:08.604 --> 01:17:10.826
just access RHS dot Val or move

NOTE Confidence: 0.712004615

01:17:10.826 --> 01:17:13.386
stood move from RHS dot Val then you

NOTE Confidence: 0.712004615

01:17:13.386 --> 01:17:15.546
wouldn't need to see the forward,

NOTE Confidence: 0.712004615

01:17:15.550 --> 01:17:17.094
but because they've specified

NOTE Confidence: 0.712004615

01:17:17.094 --> 01:17:19.024
things in terms of UF,

NOTE Confidence: 0.712004615

01:17:19.030 --> 01:17:21.014
forward is the correct way to handle it.

NOTE Confidence: 0.78432470625

01:17:23.130 --> 01:17:24.805
In the implementation, it could

NOTE Confidence: 0.78432470625

01:17:24.805 --> 01:17:26.620
be a move. That's interesting.

NOTE Confidence: 0.906847017142857

01:17:29.390 --> 01:17:32.169
Should we ask for a move there?

NOTE Confidence: 0.906847017142857

01:17:32.170 --> 01:17:34.378
This more closely mirrors the standardise,

NOTE Confidence: 0.906847017142857

01:17:34.380 --> 01:17:36.176
and it's not wrong.

NOTE Confidence: 0.906847017142857

01:17:36.176 --> 01:17:38.421
It's not doing exactly what

NOTE Confidence: 0.906847017142857

01:17:38.421 --> 01:17:40.819
the standard is doing so.

NOTE Confidence: 0.906847017142857

01:17:40.820 --> 01:17:42.850
You know that mirroring the

NOTE Confidence: 0.906847017142857

01:17:42.850 --> 01:17:45.155
standards is a great argument. Yeah,

NOTE Confidence: 0.906847017142857

01:17:45.155 --> 01:17:47.355
I think I think move is reasonable here.

NOTE Confidence: 0.906847017142857

01:17:47.360 --> 01:17:50.800
I I would kind of like a move here, OK?

NOTE Confidence: 0.906847017142857

01:17:50.800 --> 01:17:52.277
Just to make it clear that this

NOTE Confidence: 0.906847017142857

01:17:52.277 --> 01:17:53.559
is always a move always,

NOTE Confidence: 0.906847017142857

01:17:53.560 --> 01:17:55.910
effectively move.

NOTE Confidence: 0.906847017142857

01:17:55.910 --> 01:17:58.010
OK, let's see.

NOTE Confidence: 0.770555321818182

01:18:02.560 --> 01:18:03.970
If you want to replace all

NOTE Confidence: 0.770555321818182

01:18:03.970 --> 01:18:05.270
of them with static casts.

NOTE Confidence: 0.7961499544375

01:18:07.300 --> 01:18:09.540
The difference between moving

NOTE Confidence: 0.7961499544375

01:18:09.540 --> 01:18:11.780
forward is very important.

NOTE Confidence: 0.7961499544375

01:18:11.780 --> 01:18:15.845
Notes that although this technically

NOTE Confidence: 0.7961499544375

01:18:15.845 --> 01:18:19.097
mirrors the standard ease,

NOTE Confidence: 0.7961499544375

01:18:19.100 --> 01:18:24.356
the standard is taking a shortcut

NOTE Confidence: 0.7961499544375

01:18:24.360 --> 01:18:28.885
by specifying the converting copy

NOTE Confidence: 0.7961499544375

01:18:28.885 --> 01:18:33.410
and converting move ctors together

NOTE Confidence: 0.7961499544375

01:18:33.550 --> 01:18:37.050
with whatever they called UF&amp;amp;GF.

NOTE Confidence: 0.43243419

01:18:39.800 --> 01:18:50.290
Command chief. Umm? The. It's packed.

NOTE Confidence: 0.43243419

01:18:50.290 --> 01:18:56.040
Has already forbidden reference type

NOTE Confidence: 0.43243419

01:18:56.040 --> 01:19:01.092
reference types. So when you know.

NOTE Confidence: 0.43243419

01:19:01.092 --> 01:19:03.164
We're implementing the converting.

NOTE Confidence: 0.43243419

01:19:03.164 --> 01:19:05.593
I'm trying to be careful here because

NOTE Confidence: 0.43243419

01:19:05.593 --> 01:19:07.780
the converting move sedor is not

NOTE Confidence: 0.43243419

01:19:07.780 --> 01:19:09.942
an actual move constructor as far

NOTE Confidence: 0.43243419

01:19:09.942 --> 01:19:11.928
as the core language is concerned.

NOTE Confidence: 0.43243419

01:19:11.930 --> 01:19:13.322
So when we know we're implementing

NOTE Confidence: 0.43243419

01:19:13.322 --> 01:19:14.250
the converting move seed,

NOTE Confidence: 0.43243419

01:19:14.250 --> 01:19:22.657
or we can simply say stood move.

NOTE Confidence: 0.43243419

01:19:22.660 --> 01:19:26.652
The. Reserve on all,

NOTE Confidence: 0.43243419

01:19:26.652 --> 01:19:29.646
say congratulations conventionally.

NOTE Confidence: 0.43243419

01:19:29.650 --> 01:19:34.800
Reserve stood forward in the

NOTE Confidence: 0.43243419

01:19:34.800 --> 01:19:39.214
implementation only for perfect forwarding.

NOTE Confidence: 0.43243419

01:19:39.214 --> 01:19:44.950
Or situations like hair. Where?

NOTE Confidence: 0.43243419

01:19:44.950 --> 01:19:49.442
Handling reference types is.

NOTE Confidence: 0.43243419

01:19:49.442 --> 01:19:52.730
Necessary OK, how does that sound?

NOTE Confidence: 0.43243419

01:19:52.730 --> 01:19:54.030
Casey notes that although this

NOTE Confidence: 0.43243419

01:19:54.030 --> 01:19:55.210
technically mirrors the standard,

NOTE Confidence: 0.43243419

01:19:55.210 --> 01:19:56.694
is the standard is taking a shortcut

NOTE Confidence: 0.43243419

01:19:56.694 --> 01:19:57.906
by specifying the converting copy

NOTE Confidence: 0.43243419

01:19:57.906 --> 01:19:58.962
and converting Moors together

NOTE Confidence: 0.43243419

01:19:58.962 --> 01:20:00.394
with Ugf expected has already

NOTE Confidence: 0.43243419

01:20:00.394 --> 01:20:01.399
forbidden reference types,

NOTE Confidence: 0.43243419

01:20:01.400 --> 01:20:02.918
so when we know we're implementing

NOTE Confidence: 0.43243419

01:20:02.918 --> 01:20:04.192
the converting moved or we

NOTE Confidence: 0.43243419

01:20:04.192 --> 01:20:05.247
can simply say stood move.

NOTE Confidence: 0.43243419

01:20:05.250 --> 01:20:06.730
We conventionally reserve stood forward

NOTE Confidence: 0.43243419

01:20:06.730 --> 01:20:08.555
in the implementation only for perfect

NOTE Confidence: 0.43243419

01:20:08.555 --> 01:20:10.070
forwarding or situations like pair.

NOTE Confidence: 0.43243419

01:20:10.070 --> 01:20:11.750
We're handling reference types as necessary.

NOTE Confidence: 0.7738135825

01:20:15.520 --> 01:20:16.888
Cool, if somebody wanted

NOTE Confidence: 0.7738135825

01:20:16.888 --> 01:20:18.256
to use the mirroring.

NOTE Confidence: 0.7738135825

01:20:18.260 --> 01:20:19.160
The standard wording argument.

NOTE Confidence: 0.7738135825

01:20:19.160 --> 01:20:20.822
I would point out that they didn't

NOTE Confidence: 0.7738135825

01:20:20.822 --> 01:20:21.906
mirror the standard wording.

NOTE Confidence: 0.7738135825

01:20:21.910 --> 01:20:26.968
Empty constructor above the copy converting.

NOTE Confidence: 0.7738135825

01:20:26.970 --> 01:20:31.386
Yeah, they're hard. So good point.

NOTE Confidence: 0.7738135825

01:20:31.390 --> 01:20:33.706
I like it. OK, let's see.

NOTE Confidence: 0.7738135825

01:20:33.710 --> 01:20:34.676
I think we have time to look

NOTE Confidence: 0.7738135825

01:20:34.676 --> 01:20:35.550
at one more constructor,

NOTE Confidence: 0.7738135825

01:20:35.550 --> 01:20:38.748
which is this ulefone. OK so.

NOTE Confidence: 0.7738135825

01:20:38.750 --> 01:20:42.246
Claim form it off on because we've got

NOTE Confidence: 0.7738135825

01:20:42.246 --> 01:20:45.162
the requires there template on class

NOTE Confidence: 0.7738135825

01:20:45.162 --> 01:20:49.590
U = T and then we got the constraints.

NOTE Confidence: 0.7738135825

01:20:49.590 --> 01:20:51.460
So these constraints here are

NOTE Confidence: 0.7738135825

01:20:51.460 --> 01:20:53.972
a little involved so if I can

NOTE Confidence: 0.7738135825

01:20:53.972 --> 01:20:55.664
get them on the same page.

NOTE Confidence: 0.7738135825

01:20:55.670 --> 01:20:57.330
This has to be false,

NOTE Confidence: 0.7738135825

01:20:57.330 --> 01:20:58.842
not the same V.

NOTE Confidence: 0.7738135825

01:20:58.842 --> 01:21:01.896
Remove CVF tuty in place T better not

NOTE Confidence: 0.7738135825

01:21:01.896 --> 01:21:05.390
be an in place T and not the same V.

NOTE Confidence: 0.737201316666667

01:21:08.070 --> 01:21:10.110
OK, he's swapping the sides here,

NOTE Confidence: 0.737201316666667

01:21:10.110 --> 01:21:14.800
but that's OK. Uhm, expected of us,

NOTE Confidence: 0.737201316666667

01:21:14.800 --> 01:21:16.308
so that's just expected.

NOTE Confidence: 0.737201316666667

01:21:16.308 --> 01:21:18.792
The injected class name as remove

NOTE Confidence: 0.737201316666667

01:21:18.792 --> 01:21:22.868
CV ref to fu. OK, that's good and.

NOTE Confidence: 0.737201316666667

01:21:22.868 --> 01:21:26.250
Uh, because we know, is Sandia symmetric.

NOTE Confidence: 0.737201316666667

01:21:26.250 --> 01:21:29.869
Remove CVT of you is not a

NOTE Confidence: 0.737201316666667

01:21:29.869 --> 01:21:31.420
specialization of unexpected.

NOTE Confidence: 0.737201316666667

01:21:31.420 --> 01:21:33.640
This really should be a standard

NOTE Confidence: 0.737201316666667

01:21:33.640 --> 01:21:35.975
trait and is constructable.

NOTE Confidence: 0.737201316666667

01:21:35.975 --> 01:21:37.940
Vtu is true.

NOTE Confidence: 0.737201316666667

01:21:37.940 --> 01:21:40.884
OK that's good and the requires is good.

NOTE Confidence: 0.737201316666667

01:21:40.890 --> 01:21:42.642
Is that an empty comment that's

NOTE Confidence: 0.737201316666667

01:21:42.642 --> 01:21:44.680
wrapping it is that is not necessary

NOTE Confidence: 0.737201316666667

01:21:44.680 --> 01:21:46.563
in a claim form and off block.

NOTE Confidence: 0.737201316666667

01:21:46.570 --> 01:21:49.294
Umm the?

NOTE Confidence: 0.737201316666667

01:21:49.294 --> 01:21:53.950
Empty comment is unnecessary.

NOTE Confidence: 0.795190023333333

01:21:56.890 --> 01:21:58.600
In fact, I once failed the

NOTE Confidence: 0.795190023333333

01:21:58.600 --> 01:22:00.193
spelling because I couldn't spell

NOTE Confidence: 0.795190023333333

01:22:00.193 --> 01:22:03.650
necessary is unnecessary in this

NOTE Confidence: 0.795190023333333

01:22:03.650 --> 01:22:07.930
playing format all block. OK.

NOTE Confidence: 0.4831774115

01:22:12.460 --> 01:22:14.190
And continuing.

NOTE Confidence: 0.588275981

01:22:16.490 --> 01:22:19.229
OK, constexpr explicit.

NOTE Confidence: 0.798845928

01:22:21.530 --> 01:22:23.790
Yet we are explicit when

NOTE Confidence: 0.798845928

01:22:23.790 --> 01:22:26.286
not is convertible V.

NOTE Confidence: 0.798845928

01:22:26.286 --> 01:22:30.710
You to T OK expected construct from

NOTE Confidence: 0.798845928

01:22:30.710 --> 01:22:33.678
UDF other and then we're strengthening.

NOTE Confidence: 0.798845928

01:22:33.678 --> 01:22:36.355
He is no through constructiv tie.

NOTE Confidence: 0.798845928

01:22:36.355 --> 01:22:38.180
That's our tie from Udy.

NOTE Confidence: 0.798845928

01:22:38.180 --> 01:22:41.588
OK, that's good. So then we direct

NOTE Confidence: 0.798845928

01:22:41.588 --> 01:22:45.078
non initialize Val the value.

NOTE Confidence: 0.798845928

01:22:45.080 --> 01:22:46.076
And we always have a value,

NOTE Confidence: 0.798845928

01:22:46.080 --> 01:22:48.096
so we can just mention it in the

NOTE Confidence: 0.798845928

01:22:48.096 --> 01:22:49.920
list with stood forward to you.

NOTE Confidence: 0.798845928

01:22:49.920 --> 01:22:51.080
OK, so it has value.

NOTE Confidence: 0.798845928

01:22:51.080 --> 01:22:53.752
True, that looks good.

NOTE Confidence: 0.798845928

01:22:53.752 --> 01:22:55.650
Uh, is that the correct order?

NOTE Confidence: 0.799014234615385

01:22:58.470 --> 01:23:00.402
I'm gonna check, I know we've got

NOTE Confidence: 0.799014234615385

01:23:00.402 --> 01:23:02.090
compiler warnings now about the order.

NOTE Confidence: 0.799014234615385

01:23:02.090 --> 01:23:03.618
I'm surprised that has

NOTE Confidence: 0.799014234615385

01:23:03.618 --> 01:23:05.146
value would occur last.

NOTE Confidence: 0.799014234615385

01:23:05.150 --> 01:23:06.990
Where is the data member?

NOTE Confidence: 0.799014234615385

01:23:06.990 --> 01:23:09.046
Oht is it is last we've got the

NOTE Confidence: 0.799014234615385

01:23:09.046 --> 01:23:10.819
Union and then the has value.

NOTE Confidence: 0.799014234615385

01:23:10.820 --> 01:23:11.639
OK, that's good.

NOTE Confidence: 0.871553893333333

01:23:16.380 --> 01:23:22.230
And we were. Here. OK, and then we've got.

NOTE Confidence: 0.694433122857143

01:23:24.270 --> 01:23:27.539
Constructors for unexpected OK and pull up.

NOTE Confidence: 0.694433122857143

01:23:27.540 --> 01:23:31.950
OK so I will copy this to

NOTE Confidence: 0.694433122857143

01:23:31.950 --> 01:23:34.680
remind myself where I am.

NOTE Confidence: 0.694433122857143

01:23:34.680 --> 01:23:37.616
OK, it looks like we have gotten through

NOTE Confidence: 0.694433122857143

01:23:37.620 --> 01:23:40.259
maybe about 100 lines of class expected.

NOTE Confidence: 0.694433122857143

01:23:40.260 --> 01:23:41.495
I will have to continue

NOTE Confidence: 0.694433122857143

01:23:41.495 --> 01:23:42.236
reviewing this offline,

NOTE Confidence: 0.694433122857143

01:23:42.240 --> 01:23:44.337
but we saw a lot of great stuff today.

NOTE Confidence: 0.694433122857143

01:23:44.340 --> 01:23:46.096
Great catches from everyone.

NOTE Confidence: 0.694433122857143

01:23:46.096 --> 01:23:49.660
Thank you for finding all of this stuff.

NOTE Confidence: 0.694433122857143

01:23:49.660 --> 01:23:52.700
I will go ahead and submit these comments.

NOTE Confidence: 0.694433122857143

01:23:52.700 --> 01:23:54.902
I guess I am requesting changes

NOTE Confidence: 0.694433122857143

01:23:54.902 --> 01:23:57.760
so I will say request changes.

NOTE Confidence: 0.694433122857143

01:23:57.760 --> 01:23:58.810
And I'll submit a comment

NOTE Confidence: 0.694433122857143

01:23:58.810 --> 01:24:00.180
so I can collapse it later.

NOTE Confidence: 0.694433122857143

01:24:00.180 --> 01:24:01.962
GitHub does not let you collapse

NOTE Confidence: 0.694433122857143

01:24:01.962 --> 01:24:03.527
things that are submitted within

NOTE Confidence: 0.694433122857143

01:24:03.527 --> 01:24:04.487
the review itself.

NOTE Confidence: 0.694433122857143

01:24:04.490 --> 01:24:05.160
OK.

NOTE Confidence: 0.855338038

01:24:07.930 --> 01:24:09.570
I thought I deleted this.

NOTE Confidence: 0.855338038

01:24:09.570 --> 01:24:10.836
Did I not delete this comment?

NOTE Confidence: 0.849745127777778

01:24:13.090 --> 01:24:14.722
I think it might not have

NOTE Confidence: 0.849745127777778

01:24:14.722 --> 01:24:16.270
deleted it oopsie. Umm?

NOTE Confidence: 0.686678882222222

01:24:19.130 --> 01:24:21.380
I'll comment on this. This is the Annex 1.

NOTE Confidence: 0.949216543333333

01:24:24.070 --> 01:24:29.018
Never mind here, on X is

NOTE Confidence: 0.949216543333333

01:24:29.018 --> 01:24:33.434
displayed as a data member of.

NOTE Confidence: 0.949216543333333

01:24:33.440 --> 01:24:36.110
Expected and although

NOTE Confidence: 0.949216543333333

01:24:36.110 --> 01:24:41.450
it's not the name of the.

NOTE Confidence: 0.949216543333333

01:24:41.450 --> 01:24:46.550
Exposition only numbers or

NOTE Confidence: 0.949216543333333

01:24:46.550 --> 01:24:51.240
what was that? Unexpected.

NOTE Confidence: 0.57671615

01:24:53.370 --> 01:24:57.830
And bad. Expected access

NOTE Confidence: 0.57671615

01:24:57.830 --> 01:25:01.010
that seems clear enough.

NOTE Confidence: 0.615226046

01:25:04.310 --> 01:25:06.990
OK think about ax, yeah,

NOTE Confidence: 0.615226046

01:25:06.990 --> 01:25:08.222
never mind here on X is latest

NOTE Confidence: 0.615226046

01:25:08.222 --> 01:25:09.463
date member of expected and that's

NOTE Confidence: 0.615226046

01:25:09.463 --> 01:25:10.795
not the name of the expedition.

NOTE Confidence: 0.615226046

01:25:10.800 --> 01:25:12.190
Only members for unexpecting bad

NOTE Confidence: 0.615226046

01:25:12.190 --> 01:25:15.030
expect access. It seems clear. OK.

NOTE Confidence: 0.533512749

01:25:18.040 --> 01:25:20.280
We've got the easiness pistol,

NOTE Confidence: 0.533512749

01:25:20.280 --> 01:25:24.584
the auto, the can we use auto rifraf.

NOTE Confidence: 0.533512749

01:25:24.590 --> 01:25:26.610
I don't name the parameter.

NOTE Confidence: 0.533512749

01:25:26.610 --> 01:25:31.489
The Morgan and extra currents and test

NOTE Confidence: 0.533512749

01:25:31.490 --> 01:25:35.246
and comment about the destructive order.

NOTE Confidence: 0.533512749

01:25:35.250 --> 01:25:39.289
This one is standard and this semi

NOTE Confidence: 0.533512749

01:25:39.289 --> 01:25:43.828
colon forwarding empty comment OK.

NOTE Confidence: 0.533512749

01:25:43.830 --> 01:25:44.940
Note to self.

NOTE Confidence: 0.15794134

01:25:48.370 --> 01:25:52.450
Partially previewed.

NOTE Confidence: 0.15794134

01:25:52.450 --> 01:25:53.582
I keep typing expected.

NOTE Confidence: 0.15794134

01:25:53.582 --> 01:25:54.714
It's gonna keep happening.

NOTE Confidence: 0.45073167

01:25:57.330 --> 01:26:02.289
To including this.

NOTE Confidence: 0.45073167

01:26:02.290 --> 01:26:07.300
So let me see review this.

NOTE Confidence: 0.45073167

01:26:07.300 --> 01:26:10.388
Progress is monotonically nondecreasing.

NOTE Confidence: 0.45073167

01:26:10.388 --> 01:26:12.024
OK, partially you had expected

NOTE Confidence: 0.45073167

01:26:12.024 --> 01:26:13.104
up to and including expected

NOTE Confidence: 0.45073167

01:26:13.104 --> 01:26:13.978
you to refer further.

NOTE Confidence: 0.45073167

01:26:13.980 --> 01:26:16.476
Still need to review test mention

NOTE Confidence: 0.45073167

01:26:16.476 --> 01:26:17.656
that it's a video review.

NOTE Confidence: 0.885015498571429

01:26:23.280 --> 01:26:25.680
OK, there we go.

NOTE Confidence: 0.885015498571429

01:26:25.680 --> 01:26:27.480
Comments are submitted.

NOTE Confidence: 0.885015498571429

01:26:27.480 --> 01:26:29.000
Let's see, have there been

NOTE Confidence: 0.885015498571429

01:26:29.000 --> 01:26:30.520
any questions in the chat?

NOTE Confidence: 0.885015498571429

01:26:30.520 --> 01:26:34.000
I will stop sharing my screen.

NOTE Confidence: 0.885015498571429

01:26:34.000 --> 01:26:37.087
And check. OK, Cameron jokes.

NOTE Confidence: 0.885015498571429

01:26:37.087 --> 01:26:39.798
I think it's fair to say that this

NOTE Confidence: 0.885015498571429

01:26:39.798 --> 01:26:42.246
review has taken longer than expected.

NOTE Confidence: 0.885015498571429

01:26:42.250 --> 01:26:44.840
Nice one.

NOTE Confidence: 0.885015498571429

01:26:44.840 --> 01:26:47.366
Uh, OK Casey's got some comments

NOTE Confidence: 0.885015498571429

01:26:47.366 --> 01:26:49.407
about traveling Meow concepts that

NOTE Confidence: 0.885015498571429

01:26:49.407 --> 01:26:51.192
would be nice because concepts

NOTE Confidence: 0.885015498571429

01:26:51.192 --> 01:26:52.584
have that subsumption thing,

NOTE Confidence: 0.885015498571429

01:26:52.584 --> 01:26:54.468
where if you constrain with a

NOTE Confidence: 0.885015498571429

01:26:54.468 --> 01:26:56.795
concept that the compiler can see is

NOTE Confidence: 0.885015498571429

01:26:56.795 --> 01:26:58.781
stricter in some sense than another,

NOTE Confidence: 0.885015498571429

01:26:58.790 --> 01:27:00.530
it's considered to subsume

NOTE Confidence: 0.885015498571429

01:27:00.530 --> 01:27:01.835
the smaller concept,

NOTE Confidence: 0.885015498571429

01:27:01.840 --> 01:27:04.370
and overload resolution recognizes that,

NOTE Confidence: 0.885015498571429

01:27:04.370 --> 01:27:05.345
which is awesome.

NOTE Confidence: 0.885015498571429

01:27:05.345 --> 01:27:06.645
That's something that's fine,

NOTE Confidence: 0.885015498571429

01:27:06.650 --> 01:27:07.690
does not get sphene,

NOTE Confidence: 0.885015498571429

01:27:07.690 --> 01:27:08.724
is just like, oh,

NOTE Confidence: 0.885015498571429

01:27:08.724 --> 01:27:10.248
you're throwing a bunch of tools

NOTE Confidence: 0.885015498571429

01:27:10.248 --> 01:27:11.912
at the compiler and you need

NOTE Confidence: 0.885015498571429

01:27:11.912 --> 01:27:13.044
to very carefully construct

NOTE Confidence: 0.885015498571429

01:27:13.044 --> 01:27:14.339
your overload set so that.

NOTE Confidence: 0.885015498571429

01:27:14.340 --> 01:27:16.100
Exactly one of those overloads

NOTE Confidence: 0.885015498571429

01:27:16.100 --> 01:27:18.451
lights up and the rest are disabled

NOTE Confidence: 0.885015498571429

01:27:18.451 --> 01:27:20.056
by the Phoenix with concepts

NOTE Confidence: 0.885015498571429

01:27:20.056 --> 01:27:21.610
you just constrain them all,

NOTE Confidence: 0.885015498571429

01:27:21.610 --> 01:27:23.314
and then as long as the

NOTE Confidence: 0.885015498571429

01:27:23.314 --> 01:27:24.450
concepts are arranged properly,

NOTE Confidence: 0.885015498571429

01:27:24.450 --> 01:27:26.438
the compiler can see in a process

NOTE Confidence: 0.885015498571429

01:27:26.438 --> 01:27:28.528
that is either partial ordering or

NOTE Confidence: 0.885015498571429

01:27:28.528 --> 01:27:30.488
very similar to partial ordering.

NOTE Confidence: 0.885015498571429

01:27:30.490 --> 01:27:30.825
That,

NOTE Confidence: 0.885015498571429

01:27:30.825 --> 01:27:31.160
oh,

NOTE Confidence: 0.885015498571429

01:27:31.160 --> 01:27:33.840
this one is the most specific because it

NOTE Confidence: 0.885015498571429

01:27:33.910 --> 01:27:36.120
wants is trivially fancy constructible

NOTE Confidence: 0.885015498571429

01:27:36.120 --> 01:27:38.670
now rather than just Disney now,

NOTE Confidence: 0.885015498571429

01:27:38.670 --> 01:27:41.226
so it'll select the better one.

NOTE Confidence: 0.885015498571429

01:27:41.230 --> 01:27:44.350
Much like having a more template.

NOTE Confidence: 0.885015498571429

01:27:44.350 --> 01:27:46.450
Or if you've got a bunch of

NOTE Confidence: 0.885015498571429

01:27:46.450 --> 01:27:48.438
overloads like pair of TU pair of T,

NOTE Confidence: 0.885015498571429

01:27:48.440 --> 01:27:51.383
star T star pair of in Star double star,

NOTE Confidence: 0.885015498571429

01:27:51.390 --> 01:27:52.920
the compiler will select the most

NOTE Confidence: 0.885015498571429

01:27:52.920 --> 01:27:54.293
specific one that's always been

NOTE Confidence: 0.885015498571429

01:27:54.293 --> 01:27:55.517
baked into overload resolution.

NOTE Confidence: 0.885015498571429

01:27:55.520 --> 01:27:57.116
Having that in concepts is very nice.

NOTE Confidence: 0.885015498571429

01:27:57.120 --> 01:27:57.942
So yeah,

NOTE Confidence: 0.885015498571429

01:27:57.942 --> 01:27:59.997
I agree that having concepts.

NOTE Confidence: 0.885015498571429

01:28:00.000 --> 01:28:01.450
That sort of supersede the

NOTE Confidence: 0.885015498571429

01:28:01.450 --> 01:28:03.240
type traits that would be good.

NOTE Confidence: 0.885015498571429

01:28:03.240 --> 01:28:05.060
And then Cameron hypothesizes having

NOTE Confidence: 0.885015498571429

01:28:05.060 --> 01:28:07.899
a concept of capture if all teams are

NOTE Confidence: 0.885015498571429

01:28:07.899 --> 01:28:09.620
trivial would be a good abstraction.

NOTE Confidence: 0.885015498571429

01:28:09.620 --> 01:28:10.360
Yeah,

NOTE Confidence: 0.885015498571429

01:28:10.360 --> 01:28:11.840
seems reasonable.

NOTE Confidence: 0.885015498571429

01:28:11.840 --> 01:28:12.380
OK,

NOTE Confidence: 0.885015498571429

01:28:12.380 --> 01:28:14.540
looking through the comments,

NOTE Confidence: 0.885015498571429

01:28:14.540 --> 01:28:16.995
some comment about the exception

NOTE Confidence: 0.885015498571429

01:28:16.995 --> 01:28:19.450
specifications and the auto ref

NOTE Confidence: 0.885015498571429

01:28:19.535 --> 01:28:21.839
ref which we all talked about.

NOTE Confidence: 0.885015498571429

01:28:21.840 --> 01:28:22.157
OK,

NOTE Confidence: 0.885015498571429

01:28:22.157 --> 01:28:23.425
I think that's everything

NOTE Confidence: 0.885015498571429

01:28:23.425 --> 01:28:24.693
that was brought up.

NOTE Confidence: 0.885015498571429

01:28:24.700 --> 01:28:27.087
Let me know if I'm missing anything.

NOTE Confidence: 0.885015498571429

01:28:27.090 --> 01:28:27.426
OK,

NOTE Confidence: 0.885015498571429

01:28:27.426 --> 01:28:29.778
I think that's it so we can

NOTE Confidence: 0.885015498571429

01:28:29.778 --> 01:28:31.689
call this a code review.

NOTE Confidence: 0.885015498571429

01:28:31.690 --> 01:28:33.965
Thanks for watching Part 2 of this.

NOTE Confidence: 0.885015498571429

01:28:33.970 --> 01:28:35.386
There may be a part three

NOTE Confidence: 0.885015498571429

01:28:35.386 --> 01:28:36.871
depending on how quickly we get

NOTE Confidence: 0.885015498571429

01:28:36.871 --> 01:28:38.086
through the rest of expected.

NOTE Confidence: 0.885015498571429

01:28:38.090 --> 01:28:38.630
In any event,

NOTE Confidence: 0.885015498571429

01:28:38.630 --> 01:28:39.530
we'll see you next time.
