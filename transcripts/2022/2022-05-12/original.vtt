WEBVTT

NOTE duration:"01:42:24"

NOTE recognizability:0.788

NOTE language:en-us

NOTE Confidence: 0.847246124545455

00:00:05.130 --> 00:00:07.836
OK. So yeah, we're doing minimum

NOTE Confidence: 0.847246124545455

00:00:07.836 --> 00:00:10.080
and maximum and min Max.

NOTE Confidence: 0.8892474475

00:00:12.090 --> 00:00:14.130
Yeah, it's the normal

NOTE Confidence: 0.8892474475

00:00:14.130 --> 00:00:16.170
loop of just comparisons.

NOTE Confidence: 0.8892474475

00:00:16.170 --> 00:00:18.660
For Min Max you get.

NOTE Confidence: 0.8892474475

00:00:18.660 --> 00:00:20.315
Ah, you get a different

NOTE Confidence: 0.8892474475

00:00:20.315 --> 00:00:21.970
Max element than for Max.

NOTE Confidence: 0.883058916

00:00:26.560 --> 00:00:28.870
Right, if there are multiple.

NOTE Confidence: 0.883058916

00:00:28.870 --> 00:00:32.171
In the array so. I feel like,

NOTE Confidence: 0.883058916

00:00:32.171 --> 00:00:33.953
oh we have algorithm which GitHub

NOTE Confidence: 0.883058916

00:00:33.953 --> 00:00:35.490
doesn't recognize. Let's see.

NOTE Confidence: 0.883058916

00:00:35.490 --> 00:00:38.010
Plus plus I don't know why that is.

NOTE Confidence: 0.883058916

00:00:38.010 --> 00:00:38.870
I thought we fixed that.

NOTE Confidence: 0.79663766

00:00:43.370 --> 00:00:45.430
Can I recommend zooming in

NOTE Confidence: 0.79663766

00:00:45.430 --> 00:00:46.606
so that it will be visible?

NOTE Confidence: 0.8836492

00:00:51.450 --> 00:00:53.697
Alright, and in that case we should

NOTE Confidence: 0.8836492

00:00:53.697 --> 00:00:58.310
probably go back to the unified. View.

NOTE Confidence: 0.8836492

00:00:58.310 --> 00:01:02.440
Umm? Yeah, alright, so this is for.

NOTE Confidence: 0.8836492

00:01:02.440 --> 00:01:04.762
Results and then one function for

NOTE Confidence: 0.8836492

00:01:04.762 --> 00:01:07.379
each size for one by two bytes,

NOTE Confidence: 0.8836492

00:01:07.380 --> 00:01:11.190
4 bytes and eight bytes. Umm?

NOTE Confidence: 0.8836492

00:01:11.190 --> 00:01:14.186
And I can use the vector out.

NOTE Confidence: 0.8836492

00:01:14.190 --> 00:01:15.970
The vectorized algorithm for

NOTE Confidence: 0.8836492

00:01:15.970 --> 00:01:18.640
like 3 bytes or five bytes.

NOTE Confidence: 0.8836492

00:01:18.640 --> 00:01:23.770
On alright, so here's the actual.

NOTE Confidence: 0.8836492

00:01:23.770 --> 00:01:27.555
Uhm? Templated at three point that

NOTE Confidence: 0.8836492

00:01:27.555 --> 00:01:29.709
picks which one it used to call.

NOTE Confidence: 0.8836492

00:01:29.710 --> 00:01:32.560
There's a bunch of reinterpret casts here.

NOTE Confidence: 0.645506711111111

00:01:38.690 --> 00:01:41.792
Yeah, so this file is strict

NOTE Confidence: 0.645506711111111

00:01:41.792 --> 00:01:47.320
aliasing I think. But the.

NOTE Confidence: 0.645506711111111

00:01:47.320 --> 00:01:49.150
The code it's calling here.

NOTE Confidence: 0.484806706666667

00:01:51.460 --> 00:01:57.680
Steadman element uh once it is done with.

NOTE Confidence: 0.484806706666667

00:01:57.680 --> 00:02:00.809
Yeah the code is calling in here.

NOTE Confidence: 0.484806706666667

00:02:00.810 --> 00:02:03.720
Uhm, it's always gonna be compiled

NOTE Confidence: 0.484806706666667

00:02:03.720 --> 00:02:06.490
into our uh import library.

NOTE Confidence: 0.484806706666667

00:02:06.490 --> 00:02:08.340
Or or vector algorithms goes?

NOTE Confidence: 0.76819597

00:02:10.920 --> 00:02:12.768
So it's always compiled with MSVC,

NOTE Confidence: 0.76819597

00:02:12.770 --> 00:02:14.522
so we don't really.

NOTE Confidence: 0.76819597

00:02:14.522 --> 00:02:17.740
Violate strict aliasing, it's OK.

NOTE Confidence: 0.76819597

00:02:17.740 --> 00:02:22.258
Am. And. We don't have a huge

NOTE Confidence: 0.76819597

00:02:22.258 --> 00:02:24.100
amount of choice, honestly.

NOTE Confidence: 0.867278

00:02:28.280 --> 00:02:28.740
So.

NOTE Confidence: 0.79409615712

00:02:36.350 --> 00:02:37.939
And then it's the same thing for

NOTE Confidence: 0.79409615712

00:02:37.939 --> 00:02:39.641
my Excel and we just and this

NOTE Confidence: 0.79409615712

00:02:39.641 --> 00:02:41.093
one's easier to see because you

NOTE Confidence: 0.79409615712

00:02:41.147 --> 00:02:44.820
don't have the big comment. Umm?

NOTE Confidence: 0.79409615712

00:02:44.820 --> 00:02:47.259
So if we're a pointer or a null pointer,

NOTE Confidence: 0.79409615712

00:02:47.260 --> 00:02:49.138
then we do all the reinterpret

NOTE Confidence: 0.79409615712

00:02:49.138 --> 00:02:50.077
casting thing we.

NOTE Confidence: 0.760425411428572

00:02:53.080 --> 00:02:56.356
We were crazily called ourselves after with.

NOTE Confidence: 0.760425411428572

00:02:56.360 --> 00:02:58.718
You had pointer which is gonna

NOTE Confidence: 0.760425411428572

00:02:58.718 --> 00:03:01.520
go to this branch of the L. Umm?

NOTE Confidence: 0.835534478571429

00:03:06.350 --> 00:03:09.080
Let me just branch on the

NOTE Confidence: 0.835534478571429

00:03:09.080 --> 00:03:13.420
sides. Same here. Ohm.

NOTE Confidence: 0.8566761525

00:03:16.360 --> 00:03:21.228
Here were deciding whether. To turn stuff on.

NOTE Confidence: 0.90671488

00:03:23.250 --> 00:03:28.280
So that's going to be. Work day US. UM?

NOTE Confidence: 0.72925497

00:03:30.500 --> 00:03:33.060
We're not iterating over volatile.

NOTE Confidence: 0.66763829

00:03:35.260 --> 00:03:37.340
I I iterator is volatile.

NOTE Confidence: 0.66763829

00:03:37.340 --> 00:03:39.090
I believe it's an iterator

NOTE Confidence: 0.66763829

00:03:39.090 --> 00:03:40.140
over volatile stuff,

NOTE Confidence: 0.66763829

00:03:40.140 --> 00:03:42.140
not a volatile iterator itself,

NOTE Confidence: 0.66763829

00:03:42.140 --> 00:03:43.028
right? That's right.

NOTE Confidence: 0.66763829

00:03:43.028 --> 00:03:44.114
Yeah, yeah, because then

NOTE Confidence: 0.66763829

00:03:44.114 --> 00:03:45.349
you would use is volatile.

NOTE Confidence: 0.313228325

00:03:47.490 --> 00:03:48.120
Badly needed.

NOTE Confidence: 0.724365362

00:03:50.260 --> 00:03:55.960
Or were integral or pointer and. Uhm?

NOTE Confidence: 0.750435345555555

00:03:59.460 --> 00:04:01.390
Let's see, yeah, our predicate

NOTE Confidence: 0.750435345555555

00:04:01.390 --> 00:04:02.934
is less or vangelos.

NOTE Confidence: 0.365146658

00:04:12.660 --> 00:04:13.410
And that.

NOTE Confidence: 0.867277268181818

00:04:20.450 --> 00:04:22.730
Here we could have used our

NOTE Confidence: 0.867277268181818

00:04:22.730 --> 00:04:24.670
internal is any of the.

NOTE Confidence: 0.867277268181818

00:04:24.670 --> 00:04:29.427
Nowhere on 9188. I don't know.

NOTE Confidence: 0.867277268181818

00:04:29.427 --> 00:04:30.522
I don't think that would

NOTE Confidence: 0.867277268181818

00:04:30.522 --> 00:04:31.530
probably buy any clarity.

NOTE Confidence: 0.867277268181818

00:04:31.530 --> 00:04:33.230
UM, it is something that

NOTE Confidence: 0.867277268181818

00:04:33.230 --> 00:04:34.250
we used elsewhere.

NOTE Confidence: 0.867277268181818

00:04:34.250 --> 00:04:36.130
Yeah, I don't think it

NOTE Confidence: 0.867277268181818

00:04:36.130 --> 00:04:37.258
would increase clarity.

NOTE Confidence: 0.813764108181818

00:04:39.510 --> 00:04:42.086
I think the clarity here comes from the

NOTE Confidence: 0.813764108181818

00:04:42.086 --> 00:04:44.294
very nice comments that explain each step,

NOTE Confidence: 0.813764108181818

00:04:44.294 --> 00:04:45.499
so it's not just right.

NOTE Confidence: 0.813764108181818

00:04:45.500 --> 00:04:46.790
Here's a bunch of in line.

NOTE Confidence: 0.813764108181818

00:04:46.790 --> 00:04:48.404
Yeah, well, because that could that

NOTE Confidence: 0.813764108181818

00:04:48.404 --> 00:04:50.324
that would only do these interval or

NOTE Confidence: 0.813764108181818

00:04:50.324 --> 00:04:52.172
is pointer which is kind of obvious

NOTE Confidence: 0.813764108181818

00:04:52.225 --> 00:04:53.814
because it all gets on one line.

NOTE Confidence: 0.813764108181818

00:04:53.820 --> 00:04:57.047
Yeah, if this was over multiple lines.

NOTE Confidence: 0.813764108181818

00:04:57.050 --> 00:05:01.274
Umm? Or or or had like a conjunct

NOTE Confidence: 0.813764108181818

00:05:01.274 --> 00:05:03.962
like had other stuff in here then

NOTE Confidence: 0.813764108181818

00:05:03.962 --> 00:05:06.128
maybe what's on is any of you wouldn't

NOTE Confidence: 0.813764108181818

00:05:06.128 --> 00:05:07.778
replace the one about his interval

NOTE Confidence: 0.813764108181818

00:05:07.778 --> 00:05:09.710
that one has to be a disjunction,

NOTE Confidence: 0.813764108181818

00:05:09.710 --> 00:05:12.342
it it could replace the one that's

NOTE Confidence: 0.813764108181818

00:05:12.342 --> 00:05:14.406
the disjunction is same is any

NOTE Confidence: 0.813764108181818

00:05:14.406 --> 00:05:16.422
of the he says is P no,

NOTE Confidence: 0.813764108181818

00:05:16.430 --> 00:05:19.283
but that would be awful because we we have.

NOTE Confidence: 0.813764108181818

00:05:19.290 --> 00:05:20.540
We still have the preprocessor

NOTE Confidence: 0.813764108181818

00:05:20.540 --> 00:05:21.790
thing right in the middle.

NOTE Confidence: 0.813764108181818

00:05:21.790 --> 00:05:24.426
Yes yeah, for the range of what's the point?

NOTE Confidence: 0.813764108181818

00:05:24.426 --> 00:05:25.886
Yeah, it'll look pretty ugly.

NOTE Confidence: 0.813764108181818

00:05:25.890 --> 00:05:26.938
It would avoid repeating

NOTE Confidence: 0.813764108181818

00:05:26.938 --> 00:05:28.503
his name three times, but.

NOTE Confidence: 0.813764108181818

00:05:28.503 --> 00:05:30.042
Didn't buy anything.

NOTE Confidence: 0.813764108181818

00:05:30.042 --> 00:05:31.593
It's NPR, really,

NOTE Confidence: 0.813764108181818

00:05:31.593 --> 00:05:32.639
but yeah.

NOTE Confidence: 0.908436304444445

00:05:35.140 --> 00:05:36.408
I'll point it out,

NOTE Confidence: 0.908436304444445

00:05:36.408 --> 00:05:38.223
but not request a change that

NOTE Confidence: 0.908436304444445

00:05:38.223 --> 00:05:39.338
seems reasonable, just sort of.

NOTE Confidence: 0.908436304444445

00:05:39.340 --> 00:05:41.260
Just record the rationale.

NOTE Confidence: 0.908436304444445

00:05:41.260 --> 00:05:44.140
I think we do use preprocessor

NOTE Confidence: 0.908436304444445

00:05:44.227 --> 00:05:48.208
conditional with. Is any of the.

NOTE Confidence: 0.908436304444445

00:05:48.210 --> 00:05:50.886
When we're looking for things like

NOTE Confidence: 0.908436304444445

00:05:50.886 --> 00:05:53.356
characters types that could be bite

NOTE Confidence: 0.908436304444445

00:05:53.356 --> 00:05:57.084
because we have them stay catch for bite.

NOTE Confidence: 0.908436304444445

00:05:57.090 --> 00:05:59.970
So we brought in the same sort of scenario,

NOTE Confidence: 0.908436304444445

00:05:59.970 --> 00:06:01.164
but it's again.

NOTE Confidence: 0.908436304444445

00:06:01.164 --> 00:06:03.154
It's the preprocessor damages clarity.

NOTE Confidence: 0.789736888333333

00:06:05.590 --> 00:06:07.408
Something that really should be standardized,

NOTE Confidence: 0.789736888333333

00:06:07.410 --> 00:06:08.865
like somebody should just propose

NOTE Confidence: 0.789736888333333

00:06:08.865 --> 00:06:11.160
this is any of the for this because

NOTE Confidence: 0.789736888333333

00:06:11.160 --> 00:06:13.470
it's a useful thing with like this

NOTE Confidence: 0.789736888333333

00:06:13.470 --> 00:06:15.328
specialization fee like is implementers,

NOTE Confidence: 0.789736888333333

00:06:15.330 --> 00:06:17.146
we keep all the cool stuff for ourselves.

NOTE Confidence: 0.915037851666667

00:06:20.390 --> 00:06:23.848
I think it's just us in, UM. Write it down.

NOTE Confidence: 0.672686662857143

00:06:28.190 --> 00:06:32.760
And also. Well, that's an ex utility, right?

NOTE Confidence: 0.672686662857143

00:06:32.760 --> 00:06:33.700
That's a good point. Yeah,

NOTE Confidence: 0.672686662857143

00:06:33.700 --> 00:06:35.392
is any of you is defined pretty high up.

NOTE Confidence: 0.672686662857143

00:06:35.400 --> 00:06:37.000
I can't remember if it's

NOTE Confidence: 0.672686662857143

00:06:37.000 --> 00:06:38.280
utility or type traits.

NOTE Confidence: 0.672686662857143

00:06:38.280 --> 00:06:39.435
It's definitely available.

NOTE Confidence: 0.672686662857143

00:06:39.435 --> 00:06:42.770
An algorithm algorithm has everything, yeah?

NOTE Confidence: 0.672686662857143

00:06:42.770 --> 00:06:44.882
UM? Yeah, I think it's probably

NOTE Confidence: 0.672686662857143

00:06:44.882 --> 00:06:47.540
a an instance of like these type

NOTE Confidence: 0.672686662857143

00:06:47.540 --> 00:06:49.886
traits being so small that like.

NOTE Confidence: 0.672686662857143

00:06:49.890 --> 00:06:51.554
It's a lot of effort to like do

NOTE Confidence: 0.672686662857143

00:06:51.554 --> 00:06:53.098
the whole paper and everything.

NOTE Confidence: 0.672686662857143

00:06:53.100 --> 00:06:55.290
Yeah and everything and then.

NOTE Confidence: 0.672686662857143

00:06:55.290 --> 00:06:57.360
You know it kind of just

NOTE Confidence: 0.672686662857143

00:06:57.360 --> 00:06:58.740
comes up on occasion.

NOTE Confidence: 0.672686662857143

00:06:58.740 --> 00:07:00.530
Nobody's kind of gone through

NOTE Confidence: 0.672686662857143

00:07:00.530 --> 00:07:02.320
to collect all of them.

NOTE Confidence: 0.672686662857143

00:07:02.320 --> 00:07:03.895
Yeah, this so somebody would

NOTE Confidence: 0.672686662857143

00:07:03.895 --> 00:07:05.932
have to go through the various

NOTE Confidence: 0.672686662857143

00:07:05.932 --> 00:07:07.937
standard libraries and kind of.

NOTE Confidence: 0.672686662857143

00:07:07.940 --> 00:07:10.670
Uh. Patch them altogether I think.

NOTE Confidence: 0.672686662857143

00:07:10.670 --> 00:07:12.310
Yeah, like we've all reinvented,

NOTE Confidence: 0.672686662857143

00:07:12.310 --> 00:07:14.536
always false. That's a very popular one.

NOTE Confidence: 0.672686662857143

00:07:14.540 --> 00:07:16.346
That one is getting standardized, it is.

NOTE Confidence: 0.672686662857143

00:07:16.346 --> 00:07:17.872
Or finally, I thought it was wow.

NOTE Confidence: 0.672686662857143

00:07:17.880 --> 00:07:20.544
It's our time. Well, I had to write one.

NOTE Confidence: 0.672686662857143

00:07:20.550 --> 00:07:23.997
I had to reimplement that in a in AMP.

NOTE Confidence: 0.857489475714286

00:07:26.300 --> 00:07:27.392
Which I mean, I guess I could

NOTE Confidence: 0.857489475714286

00:07:27.392 --> 00:07:28.517
have used the one from the STL,

NOTE Confidence: 0.857489475714286

00:07:28.520 --> 00:07:30.732
but I don't wanna use SCL internal

NOTE Confidence: 0.857489475714286

00:07:30.732 --> 00:07:32.738
stuff in app even though AMD

NOTE Confidence: 0.857489475714286

00:07:32.738 --> 00:07:35.041
thinks it's part of the SDL yeah?

NOTE Confidence: 0.857489475714286

00:07:35.050 --> 00:07:37.203
Umm? Yeah, let's see.

NOTE Confidence: 0.857489475714286

00:07:37.203 --> 00:07:39.030
So this was me being an idiot.

NOTE Confidence: 0.857489475714286

00:07:39.030 --> 00:07:42.270
So don't worry about that.

NOTE Confidence: 0.857489475714286

00:07:42.270 --> 00:07:44.727
Yeah, this is a if constexpr thing,

NOTE Confidence: 0.857489475714286

00:07:44.730 --> 00:07:48.570
so it's. Yeah. Uhm?

NOTE Confidence: 0.798051505

00:07:51.050 --> 00:07:51.800
An element.

NOTE Confidence: 0.6865530975

00:07:54.130 --> 00:07:55.190
We call min element.

NOTE Confidence: 0.602084615

00:08:03.570 --> 00:08:08.695
Min Max. Comment Max on that and

NOTE Confidence: 0.602084615

00:08:08.695 --> 00:08:10.813
then construct. You know maximum

NOTE Confidence: 0.602084615

00:08:10.813 --> 00:08:12.297
or minimum maximum element.

NOTE Confidence: 0.619710954888889

00:08:18.180 --> 00:08:22.198
See so before our pointer we return

NOTE Confidence: 0.619710954888889

00:08:22.198 --> 00:08:25.250
them directly. Ohh, if the if

NOTE Confidence: 0.619710954888889

00:08:25.250 --> 00:08:28.320
the iterator is a pointer. Uhm?

NOTE Confidence: 0.78509225

00:08:31.080 --> 00:08:33.982
Is this right or do we have to like do fits

NOTE Confidence: 0.78509225

00:08:33.982 --> 00:08:37.040
unfancy and I believe this is correct.

NOTE Confidence: 0.78509225

00:08:37.040 --> 00:08:39.320
It's basically if the iterator that

NOTE Confidence: 0.78509225

00:08:39.320 --> 00:08:41.474
the user came to us. Actually.

NOTE Confidence: 0.78509225

00:08:41.474 --> 00:08:43.478
This is interesting because the context

NOTE Confidence: 0.78509225

00:08:43.478 --> 00:08:45.640
is it's the unchecked algorithm,

NOTE Confidence: 0.78509225

00:08:45.640 --> 00:08:47.220
so we've already potentially

NOTE Confidence: 0.78509225

00:08:47.220 --> 00:08:48.405
unwrapped the iterator.

NOTE Confidence: 0.78509225

00:08:48.410 --> 00:08:49.854
OK, like vector iterator,

NOTE Confidence: 0.78509225

00:08:49.854 --> 00:08:51.298
we have metaprogramming that

NOTE Confidence: 0.78509225

00:08:51.298 --> 00:08:53.276
unwrap that down to a raw pointer.

NOTE Confidence: 0.78509225

00:08:53.280 --> 00:08:55.686
Seems like string iterators then this,

NOTE Confidence: 0.78509225

00:08:55.690 --> 00:08:57.958
then goes and calls minmax element.

NOTE Confidence: 0.78509225

00:08:57.960 --> 00:09:00.536
So if after unwrapping we had a pointer,

NOTE Confidence: 0.78509225

00:09:00.540 --> 00:09:01.410
then whatever minmax.

NOTE Confidence: 0.78509225

00:09:01.410 --> 00:09:02.860
On that returned it returns.

NOTE Confidence: 0.78509225

00:09:02.860 --> 00:09:04.295
Point is, we can just return directly,

NOTE Confidence: 0.78509225

00:09:04.300 --> 00:09:06.348
so that's line 9412.

NOTE Confidence: 0.78509225

00:09:06.348 --> 00:09:09.130
But if even after unwrapping the

NOTE Confidence: 0.78509225

00:09:09.130 --> 00:09:12.330
iterator is not a pointer like it's.

NOTE Confidence: 0.78509225

00:09:12.330 --> 00:09:16.306
A deck iterator or list iterator or

NOTE Confidence: 0.78509225

00:09:16.306 --> 00:09:18.390
something by directional unwrapping's

NOTE Confidence: 0.78509225

00:09:18.390 --> 00:09:20.670
not gonna give you a pointer.

NOTE Confidence: 0.78509225

00:09:20.670 --> 00:09:22.504
So if it happens to be actually

NOTE Confidence: 0.78509225

00:09:22.504 --> 00:09:23.650
sorry in this case,

NOTE Confidence: 0.78509225

00:09:23.650 --> 00:09:25.204
if we were eligible for the optimization,

NOTE Confidence: 0.78509225

00:09:25.210 --> 00:09:26.546
we would need to be at least contiguous.

NOTE Confidence: 0.78509225

00:09:26.550 --> 00:09:29.342
So if you had a contiguous iterator that yet

NOTE Confidence: 0.78509225

00:09:29.342 --> 00:09:32.449
did not unwrap all the way to a pointer,

NOTE Confidence: 0.78509225

00:09:32.450 --> 00:09:34.420
or if it's a user iterator, right?

NOTE Confidence: 0.78509225

00:09:34.420 --> 00:09:38.200
Yeah, a user defined iterator that.

NOTE Confidence: 0.78509225

00:09:38.200 --> 00:09:40.996
Unwrapping doesn't make into a pointer.

NOTE Confidence: 0.78509225

00:09:41.000 --> 00:09:44.776
We need to at this point restore the original

NOTE Confidence: 0.78509225

00:09:44.776 --> 00:09:46.820
iterator type, and that's what we're doing,

NOTE Confidence: 0.78509225

00:09:46.820 --> 00:09:48.864
so it's like 2 levels of unwrapping,

NOTE Confidence: 0.78509225

00:09:48.870 --> 00:09:50.660
which is a little weird.

NOTE Confidence: 0.78509225

00:09:50.660 --> 00:09:51.997
But this is the correct pattern that,

NOTE Confidence: 0.78509225

00:09:52.000 --> 00:09:52.904
well, no, it's not.

NOTE Confidence: 0.78509225

00:09:52.904 --> 00:09:54.260
That's not what this is doing,

NOTE Confidence: 0.78509225

00:09:54.260 --> 00:09:56.900
it just constructing the.

NOTE Confidence: 0.78509225

00:09:56.900 --> 00:10:00.936
Return value which is 2 iterators but yes,

NOTE Confidence: 0.78509225

00:10:00.936 --> 00:10:02.010
but it's 9414.

NOTE Confidence: 0.78509225

00:10:02.010 --> 00:10:05.331
That would restore the iterator type, so.

NOTE Confidence: 0.78509225

00:10:05.331 --> 00:10:08.348
Yeah, yeah, I can use that right?

NOTE Confidence: 0.78509225

00:10:08.350 --> 00:10:10.254
Yeah yeah, sorry no.

NOTE Confidence: 0.78509225

00:10:10.254 --> 00:10:13.690
I think we understand understand each other.

NOTE Confidence: 0.78509225

00:10:13.690 --> 00:10:15.470
Yeah it's yeah it it.

NOTE Confidence: 0.78509225

00:10:15.470 --> 00:10:17.348
It has to actually return the

NOTE Confidence: 0.78509225

00:10:17.348 --> 00:10:19.303
right types so or no, no.

NOTE Confidence: 0.78509225

00:10:19.303 --> 00:10:22.334
Actually it's doing the opposite of that.

NOTE Confidence: 0.78509225

00:10:22.340 --> 00:10:26.127
It's the result is to void pointers.

NOTE Confidence: 0.78509225

00:10:26.130 --> 00:10:28.630
Umm?

NOTE Confidence: 0.78509225

00:10:28.630 --> 00:10:30.898
So if it's not a pointer.

NOTE Confidence: 0.78509225

00:10:30.900 --> 00:10:31.680
We're taking.

NOTE Confidence: 0.664588987777778

00:10:35.950 --> 00:10:39.136
Oh no, it's returning a pair of four letters.

NOTE Confidence: 0.664588987777778

00:10:39.140 --> 00:10:40.332
So it's it's really.

NOTE Confidence: 0.664588987777778

00:10:40.332 --> 00:10:42.583
Yeah, it's user defined

NOTE Confidence: 0.664588987777778

00:10:42.583 --> 00:10:45.187
iterators that are contiguous,

NOTE Confidence: 0.664588987777778

00:10:45.190 --> 00:10:50.545
so we can get pointers that would.

NOTE Confidence: 0.664588987777778

00:10:50.550 --> 00:10:54.648
Be eligible for the vectorized algorithm?

NOTE Confidence: 0.664588987777778

00:10:54.650 --> 00:10:56.630
Yeah, but they don't.

NOTE Confidence: 0.664588987777778

00:10:56.630 --> 00:10:59.105
The Unchecking machine for iterator

NOTE Confidence: 0.664588987777778

00:10:59.105 --> 00:11:00.715
debugging doesn't actually wrap

NOTE Confidence: 0.664588987777778

00:11:00.715 --> 00:11:03.959
them all the way to if we wanted to.

NOTE Confidence: 0.664588987777778

00:11:03.960 --> 00:11:06.380
Yeah, yeah.

NOTE Confidence: 0.664588987777778

00:11:06.380 --> 00:11:08.396
Which is probably indicates we may not have

NOTE Confidence: 0.664588987777778

00:11:08.396 --> 00:11:10.278
test coverage for that interesting scenario.

NOTE Confidence: 0.664588987777778

00:11:10.280 --> 00:11:12.716
I think we do, so it's like.

NOTE Confidence: 0.664588987777778

00:11:12.720 --> 00:11:16.549
This is a wrapper for is.

NOTE Confidence: 0.664588987777778

00:11:16.549 --> 00:11:20.392
This is presently moving and moving is

NOTE Confidence: 0.664588987777778

00:11:20.392 --> 00:11:23.110
constant evaluated around somewhere.

NOTE Confidence: 0.664588987777778

00:11:23.110 --> 00:11:25.174
I'm pretty shocked that

NOTE Confidence: 0.664588987777778

00:11:25.174 --> 00:11:27.238
this didn't already exist.

NOTE Confidence: 0.664588987777778

00:11:27.240 --> 00:11:29.000
Yeah, we were very consistently

NOTE Confidence: 0.664588987777778

00:11:29.000 --> 00:11:30.320
guarding it with CX-20.

NOTE Confidence: 0.97103345

00:11:32.600 --> 00:11:36.707
Yeah. So that's a kind of policy thing.

NOTE Confidence: 0.97103345

00:11:36.710 --> 00:11:38.208
I guess this would be the first

NOTE Confidence: 0.97103345

00:11:38.208 --> 00:11:39.678
PR that uses that that level.

NOTE Confidence: 0.914858175

00:11:44.250 --> 00:11:45.840
Though. Yeah.

NOTE Confidence: 0.922681565384616

00:11:48.580 --> 00:11:50.612
I'm not entirely sure why we can't just

NOTE Confidence: 0.922681565384616

00:11:50.612 --> 00:11:54.730
use the built in directly, but. Umm?

NOTE Confidence: 0.605973856

00:12:00.580 --> 00:12:01.880
Are you gonna break courtesy?

NOTE Confidence: 0.605973856

00:12:01.880 --> 00:12:03.584
I mean yeah, like that that's

NOTE Confidence: 0.605973856

00:12:03.584 --> 00:12:04.720
already guarded by could.

NOTE Confidence: 0.605973856

00:12:04.720 --> 00:12:06.696
In fact I'm I was wondering why we

NOTE Confidence: 0.605973856

00:12:06.696 --> 00:12:08.910
have to specifically test for crews?

NOTE Confidence: 0.605973856

00:12:08.910 --> 00:12:10.560
C beer. I thought it was

NOTE Confidence: 0.605973856

00:12:10.560 --> 00:12:11.660
already part of Houston.

NOTE Confidence: 0.605973856

00:12:11.660 --> 00:12:12.650
Vector algorithms.

NOTE Confidence: 0.852884947692308

00:12:15.420 --> 00:12:17.628
I can't remember why I I think it's

NOTE Confidence: 0.852884947692308

00:12:17.628 --> 00:12:19.536
that we're usually pretty scared of

NOTE Confidence: 0.852884947692308

00:12:19.536 --> 00:12:21.920
using built INS just here and there

NOTE Confidence: 0.852884947692308

00:12:21.920 --> 00:12:23.820
scattered about the source code.

NOTE Confidence: 0.852884947692308

00:12:23.820 --> 00:12:26.346
This originally came up with the

NOTE Confidence: 0.852884947692308

00:12:26.346 --> 00:12:28.442
Titrates like double under score

NOTE Confidence: 0.852884947692308

00:12:28.442 --> 00:12:31.334
is enum is class those they work

NOTE Confidence: 0.852884947692308

00:12:31.334 --> 00:12:33.712
perfectly fine when they're used in

NOTE Confidence: 0.852884947692308

00:12:33.712 --> 00:12:36.204
the context of I'm gonna be given to

NOTE Confidence: 0.852884947692308

00:12:36.204 --> 00:12:38.316
like roll constant within type traits,

NOTE Confidence: 0.852884947692308

00:12:38.320 --> 00:12:40.768
but if we started just using them scattered

NOTE Confidence: 0.852884947692308

00:12:40.768 --> 00:12:42.918
here and there throughout the STL,

NOTE Confidence: 0.852884947692308

00:12:42.920 --> 00:12:44.265
those built INS appearing at

NOTE Confidence: 0.852884947692308

00:12:44.265 --> 00:12:45.610
different strange places in this.

NOTE Confidence: 0.852884947692308

00:12:45.610 --> 00:12:47.446
That's the compiler was not always

NOTE Confidence: 0.852884947692308

00:12:47.446 --> 00:12:49.280
prepared to handle it cuz the builtins

NOTE Confidence: 0.852884947692308

00:12:49.280 --> 00:12:50.840
are like they're sort of these sort of

NOTE Confidence: 0.852884947692308

00:12:50.880 --> 00:12:52.410
custom things that the compiler handles.

NOTE Confidence: 0.852884947692308

00:12:52.410 --> 00:12:54.115
They're not really full fledged

NOTE Confidence: 0.852884947692308

00:12:54.115 --> 00:12:55.823
like keywords, and you know,

NOTE Confidence: 0.852884947692308

00:12:55.823 --> 00:12:57.528
really tanked into the compiler,

NOTE Confidence: 0.852884947692308

00:12:57.530 --> 00:12:59.660
so there have been compiler bugs

NOTE Confidence: 0.852884947692308

00:12:59.660 --> 00:13:02.334
in the past caused by using built

NOTE Confidence: 0.852884947692308

00:13:02.334 --> 00:13:03.516
INS and unexpected.

NOTE Confidence: 0.852884947692308

00:13:03.520 --> 00:13:05.398
That explains quite a lot about

NOTE Confidence: 0.852884947692308

00:13:05.398 --> 00:13:07.490
our approach to a lot of yeah.

NOTE Confidence: 0.852884947692308

00:13:07.490 --> 00:13:08.670
So just to avoid bugs,

NOTE Confidence: 0.852884947692308

00:13:08.670 --> 00:13:10.410
we have traditionally sort of

NOTE Confidence: 0.852884947692308

00:13:10.410 --> 00:13:12.614
centralized our usage of builtins and

NOTE Confidence: 0.852884947692308

00:13:12.614 --> 00:13:14.246
intrinsics into helper functions.

NOTE Confidence: 0.852884947692308

00:13:14.250 --> 00:13:16.210
So we're gonna say, here's the one function.

NOTE Confidence: 0.852884947692308

00:13:16.210 --> 00:13:17.533
Why there has to get right and

NOTE Confidence: 0.852884947692308

00:13:17.533 --> 00:13:19.003
then we can call this function

NOTE Confidence: 0.852884947692308

00:13:19.003 --> 00:13:20.707
elsewhere and then it's an ordinary

NOTE Confidence: 0.852884947692308

00:13:20.707 --> 00:13:22.257
function call and everything's fine.

NOTE Confidence: 0.852884947692308

00:13:22.260 --> 00:13:24.048
So we continue doing that even

NOTE Confidence: 0.852884947692308

00:13:24.048 --> 00:13:25.240
though compilers these days,

NOTE Confidence: 0.852884947692308

00:13:25.240 --> 00:13:27.074
like MSVC is way more robust than

NOTE Confidence: 0.852884947692308

00:13:27.074 --> 00:13:29.498
it used to be due to the massive

NOTE Confidence: 0.852884947692308

00:13:29.498 --> 00:13:31.440
improvements from the front end team.

NOTE Confidence: 0.852884947692308

00:13:31.440 --> 00:13:33.300
But we're still, you know,

NOTE Confidence: 0.852884947692308

00:13:33.300 --> 00:13:35.692
for consistency, like to do this and it

NOTE Confidence: 0.852884947692308

00:13:35.692 --> 00:13:37.759
still helps occasionally point bugs,

NOTE Confidence: 0.852884947692308

00:13:37.760 --> 00:13:39.920
so it seems reasonable I'm fine doing that.

NOTE Confidence: 0.852884947692308

00:13:39.920 --> 00:13:41.732
It's a little scary that this

NOTE Confidence: 0.852884947692308

00:13:41.732 --> 00:13:43.640
whole thing is guarded by Kudo CC,

NOTE Confidence: 0.852884947692308

00:13:43.640 --> 00:13:46.322
but if we screw it up, you know.

NOTE Confidence: 0.852884947692308

00:13:46.322 --> 00:13:47.831
You'll notice it immediately, so.

NOTE Confidence: 0.852884947692308

00:13:47.831 --> 00:13:50.670
And then we get to the meat of the thing.

NOTE Confidence: 0.852884947692308

00:13:50.670 --> 00:13:53.019
So this is.

NOTE Confidence: 0.852884947692308

00:13:53.020 --> 00:13:53.738
The same,

NOTE Confidence: 0.852884947692308

00:13:53.738 --> 00:13:56.251
it's just so we don't have to

NOTE Confidence: 0.852884947692308

00:13:56.251 --> 00:13:57.919
include algorithm again.

NOTE Confidence: 0.852884947692308

00:13:57.920 --> 00:14:03.554
One could argue that this could be a simple.

NOTE Confidence: 0.852884947692308

00:14:03.560 --> 00:14:06.950
Pair we could just destructure it.

NOTE Confidence: 0.828118884

00:14:08.960 --> 00:14:11.210
Up there, but actually no.

NOTE Confidence: 0.828118884

00:14:11.210 --> 00:14:15.314
This has to work in in 14 mode.

NOTE Confidence: 0.828118884

00:14:15.320 --> 00:14:16.607
But yeah, I don't have a problem with this.

NOTE Confidence: 0.828118884

00:14:16.610 --> 00:14:18.010
This isn't gonna change.

NOTE Confidence: 0.828118884

00:14:18.010 --> 00:14:20.440
It's not no DVR violation or any.

NOTE Confidence: 0.828118884

00:14:20.440 --> 00:14:24.580
UM? So. Now we have templated.

NOTE Confidence: 0.828118884

00:14:24.580 --> 00:14:27.380
So this is just the normal algorithm. UM?

NOTE Confidence: 0.9449982

00:14:29.550 --> 00:14:33.488
Let's see. Yeah, and current just

NOTE Confidence: 0.9449982

00:14:33.488 --> 00:14:36.032
comes in through a parameter,

NOTE Confidence: 0.9449982

00:14:36.032 --> 00:14:38.776
and yeah, this is literally just the.

NOTE Confidence: 0.9449982

00:14:38.780 --> 00:14:42.524
Minimum maximum. And then Min Max

NOTE Confidence: 0.9449982

00:14:42.524 --> 00:14:47.900
which is different right we? Umm?

NOTE Confidence: 0.9449982

00:14:47.900 --> 00:14:53.560
Yeah. Use less than or equal here. Uh.

NOTE Confidence: 0.5489362768

00:14:58.980 --> 00:15:02.710
Yeah, and it's now statement.

NOTE Confidence: 0.5489362768

00:15:02.710 --> 00:15:04.775
Because the mayor of maximal

NOTE Confidence: 0.5489362768

00:15:04.775 --> 00:15:07.350
ones can be the same. Uhm?

NOTE Confidence: 0.821668

00:15:11.400 --> 00:15:15.848
OK. And then there's enough.

NOTE Confidence: 0.821668

00:15:15.850 --> 00:15:18.120
Which will come up later.

NOTE Confidence: 0.821668

00:15:18.120 --> 00:15:21.910
Explicitly 1-2 and three it's.

NOTE Confidence: 0.821668

00:15:21.910 --> 00:15:23.770
It's a, it's a.

NOTE Confidence: 0.821668

00:15:23.770 --> 00:15:27.380
It's their flags. Umm?

NOTE Confidence: 0.821668

00:15:27.380 --> 00:15:28.325
Well, that's interesting.

NOTE Confidence: 0.821668

00:15:28.325 --> 00:15:29.900
Should we have a comment?

NOTE Confidence: 0.821668

00:15:29.900 --> 00:15:31.184
Yeah, maybe I?

NOTE Confidence: 0.821668

00:15:31.184 --> 00:15:34.352
I that's actually I that that was

NOTE Confidence: 0.821668

00:15:34.352 --> 00:15:36.216
my suggestion to make them flag.

NOTE Confidence: 0.821668

00:15:36.216 --> 00:15:38.338
I didn't put a comment when I suggested it,

NOTE Confidence: 0.821668

00:15:38.340 --> 00:15:39.930
but yeah, either that we'll come

NOTE Confidence: 0.821668

00:15:39.930 --> 00:15:41.763
back to that and I'll suggest it

NOTE Confidence: 0.821668

00:15:41.763 --> 00:15:43.920
again to do it either with a comment,

NOTE Confidence: 0.821668

00:15:43.920 --> 00:15:46.809
or we could just do put the shifts in.

NOTE Confidence: 0.821668

00:15:46.810 --> 00:15:48.230
To make it clear, yeah,

NOTE Confidence: 0.821668

00:15:48.230 --> 00:15:49.706
I either shifts or or comment.

NOTE Confidence: 0.821668

00:15:49.710 --> 00:15:51.618
I would be fine with either and and if

NOTE Confidence: 0.821668

00:15:51.618 --> 00:15:53.624
there were more numerators like if it was,

NOTE Confidence: 0.821668

00:15:53.630 --> 00:15:54.886
you know 1248 sixteen,

NOTE Confidence: 0.821668

00:15:54.886 --> 00:15:57.175
then the pattern would be obvious, but

NOTE Confidence: 0.821668

00:15:57.175 --> 00:16:00.010
123 it looks like an arithmetic progression.

NOTE Confidence: 0.821668

00:16:00.010 --> 00:16:00.630
Yeah, right?

NOTE Confidence: 0.821668

00:16:00.630 --> 00:16:02.180
Even if we're never gonna

NOTE Confidence: 0.821668

00:16:02.180 --> 00:16:04.140
extend it with like, you know,

NOTE Confidence: 0.821668

00:16:04.140 --> 00:16:06.150
Ultraman and Ultramax in the future,

NOTE Confidence: 0.821668

00:16:06.150 --> 00:16:10.072
and yeah, anyway. Uhm, yeah.

NOTE Confidence: 0.821668

00:16:10.072 --> 00:16:11.784
So then.

NOTE Confidence: 0.821668

00:16:11.784 --> 00:16:12.640
Uh,

NOTE Confidence: 0.821668

00:16:12.640 --> 00:16:13.364
this is,

NOTE Confidence: 0.821668

00:16:13.364 --> 00:16:14.088
let's see.

NOTE Confidence: 0.768132419

00:16:25.080 --> 00:16:27.540
And this handles all of them

NOTE Confidence: 0.768132419

00:16:27.540 --> 00:16:29.180
and ties them together.

NOTE Confidence: 0.768132419

00:16:29.180 --> 00:16:33.190
So this is if we're only doing min. Uhm?

NOTE Confidence: 0.809220964285714

00:16:37.360 --> 00:16:40.797
We'll get to the same thing later.

NOTE Confidence: 0.809220964285714

00:16:40.800 --> 00:16:43.537
This is we're only doing Max and

NOTE Confidence: 0.809220964285714

00:16:43.537 --> 00:16:46.084
this is implicitly both the reason

NOTE Confidence: 0.809220964285714

00:16:46.084 --> 00:16:48.678
that they're flags will be. More.

NOTE Confidence: 0.809220964285714

00:16:48.678 --> 00:16:51.006
The reason why fly isn't improved

NOTE Confidence: 0.809220964285714

00:16:51.006 --> 00:16:53.092
clarity will come up later, right?

NOTE Confidence: 0.809220964285714

00:16:53.092 --> 00:16:54.020
So these are traits,

NOTE Confidence: 0.809220964285714

00:16:54.020 --> 00:16:58.916
so these are to pull out the size specific.

NOTE Confidence: 0.809220964285714

00:16:58.920 --> 00:17:02.560
Uh, doodad vector doodads.

NOTE Confidence: 0.809220964285714

00:17:02.560 --> 00:17:07.370
So. Has portion Max means.

NOTE Confidence: 0.809220964285714

00:17:07.370 --> 00:17:07.700
Like

NOTE Confidence: 0.023806065

00:17:10.050 --> 00:17:10.610
Umm?

NOTE Confidence: 0.75201002

00:17:13.550 --> 00:17:18.980
It the is the maximum number of. Uh.

NOTE Confidence: 0.86144471

00:17:22.280 --> 00:17:23.605
Of chunks that we can

NOTE Confidence: 0.86144471

00:17:23.605 --> 00:17:24.930
process before we have to.

NOTE Confidence: 0.86144471

00:17:24.930 --> 00:17:26.834
Like actually pull out

NOTE Confidence: 0.86144471

00:17:26.834 --> 00:17:28.738
the real minimum element.

NOTE Confidence: 0.86144471

00:17:28.740 --> 00:17:30.920
We'll get into that later.

NOTE Confidence: 0.86144471

00:17:30.920 --> 00:17:36.650
Umm? And then you know the.

NOTE Confidence: 0.86144471

00:17:36.650 --> 00:17:39.518
Minimum and and and and maximum.

NOTE Confidence: 0.87807703

00:17:41.870 --> 00:17:51.950
Values. Ohm. This flips the sign. Of. Val

NOTE Confidence: 0.865463908

00:17:54.550 --> 00:17:58.490
if you specify size so. Uhm?

NOTE Confidence: 0.865463908

00:17:58.490 --> 00:18:03.510
If sign is false. Then it. Ah.

NOTE Confidence: 0.771789608

00:18:07.830 --> 00:18:09.990
Then it flips the sign,

NOTE Confidence: 0.771789608

00:18:09.990 --> 00:18:14.580
otherwise it does not. So if there are.

NOTE Confidence: 0.771789608

00:18:14.580 --> 00:18:19.620
Yeah, what does core mean here?

NOTE Confidence: 0.771789608

00:18:19.620 --> 00:18:23.428
Corrections ohh OK yeah so this is.

NOTE Confidence: 0.887999946

00:18:25.520 --> 00:18:28.430
This is the top bit. OK, yeah,

NOTE Confidence: 0.887999946

00:18:28.430 --> 00:18:31.090
I understand what the function is doing.

NOTE Confidence: 0.887999946

00:18:31.090 --> 00:18:33.298
Sort of attempting to avoid duplicating

NOTE Confidence: 0.887999946

00:18:33.298 --> 00:18:36.045
all this code for signed and unsigned

NOTE Confidence: 0.887999946

00:18:36.045 --> 00:18:37.530
times 1248 bytes, which is yeah,

NOTE Confidence: 0.887999946

00:18:37.530 --> 00:18:39.090
exactly definitely worth a little

NOTE Confidence: 0.887999946

00:18:39.090 --> 00:18:40.338
bit of centralization here.

NOTE Confidence: 0.887999946

00:18:40.340 --> 00:18:42.500
I was just confused because

NOTE Confidence: 0.887999946

00:18:42.500 --> 00:18:44.114
like core is like.

NOTE Confidence: 0.887999946

00:18:44.114 --> 00:18:47.090
And seen that abbreviation before I I I?

NOTE Confidence: 0.887999946

00:18:47.090 --> 00:18:49.575
I mean I, I think it's corrections.

NOTE Confidence: 0.887999946

00:18:49.580 --> 00:18:51.116
Alright, increment that's obvious,

NOTE Confidence: 0.887999946

00:18:51.116 --> 00:18:54.370
so age funk. We'll get back to this.

NOTE Confidence: 0.887999946

00:18:54.370 --> 00:18:57.740
Uh. Later, so I yeah,

NOTE Confidence: 0.887999946

00:18:57.740 --> 00:19:00.989
so that's the trade we'll come back to it.

NOTE Confidence: 0.887999946

00:19:00.990 --> 00:19:02.150
Should should we just ask

NOTE Confidence: 0.887999946

00:19:02.150 --> 00:19:03.310
for a comment on that?

NOTE Confidence: 0.887999946

00:19:03.310 --> 00:19:04.885
At least the first occurrence of that?

NOTE Confidence: 0.887999946

00:19:04.890 --> 00:19:06.479
Because if it's if it's an abbreviation

NOTE Confidence: 0.887999946

00:19:06.479 --> 00:19:07.928
we've never seen before in the STL,

NOTE Confidence: 0.887999946

00:19:07.930 --> 00:19:09.428
it feels like it deserves a comment.

NOTE Confidence: 0.887999946

00:19:09.430 --> 00:19:10.630
Yeah, for stuff like you know,

NOTE Confidence: 0.887999946

00:19:10.630 --> 00:19:13.160
shuff and.

NOTE Confidence: 0.887999946

00:19:13.160 --> 00:19:15.320
English that those are self explanatory.

NOTE Confidence: 0.019281507

00:19:42.100 --> 00:19:42.640
Uh.

NOTE Confidence: 0.813753862692308

00:19:45.470 --> 00:19:47.276
Right, uh, yeah so that's that

NOTE Confidence: 0.813753862692308

00:19:47.276 --> 00:19:49.468
we'll give back to all that stuff.

NOTE Confidence: 0.813753862692308

00:19:49.470 --> 00:19:52.006
It's pretty cool that we can use the

NOTE Confidence: 0.813753862692308

00:19:52.006 --> 00:19:53.712
vector instruction like flip the signs

NOTE Confidence: 0.813753862692308

00:19:53.712 --> 00:19:55.930
of like what was that 16 or whatever

NOTE Confidence: 0.813753862692308

00:19:55.930 --> 00:19:57.204
elements all at once. That is the.

NOTE Confidence: 0.96737957

00:20:00.060 --> 00:20:01.790
Yeah. UM?

NOTE Confidence: 0.949533637142857

00:20:06.580 --> 00:20:11.550
OK, so this is the actual algorithm. UM?

NOTE Confidence: 0.587236293333333

00:20:19.010 --> 00:20:22.390
Yeah, let's see. Uhm?

NOTE Confidence: 0.91589992

00:20:24.430 --> 00:20:28.030
We initialize stuff.

NOTE Confidence: 0.91589992

00:20:28.030 --> 00:20:30.340
Pieces first Min Valley is

NOTE Confidence: 0.91589992

00:20:30.340 --> 00:20:32.188
the smallest possible value.

NOTE Confidence: 0.91589992

00:20:32.190 --> 00:20:35.417
Max value is the biggest possible value.

NOTE Confidence: 0.91589992

00:20:35.420 --> 00:20:40.646
Umm? If we have more than.

NOTE Confidence: 0.91589992

00:20:40.650 --> 00:20:46.730
16 bytes uhm in our rain.

NOTE Confidence: 0.91589992

00:20:46.730 --> 00:20:49.770
And SSE 4/2 is on. And.

NOTE Confidence: 0.794903471666667

00:20:54.260 --> 00:20:57.248
The the size of the vertical.

NOTE Confidence: 0.810633035

00:20:59.540 --> 00:21:02.606
The vertical, min and Max portion.

NOTE Confidence: 0.810633035

00:21:02.610 --> 00:21:06.138
Ah. Is this bug aligned?

NOTE Confidence: 0.954365

00:21:08.220 --> 00:21:08.400
UM?

NOTE Confidence: 0.67542592

00:21:12.620 --> 00:21:14.180
Like, uh, align?

NOTE Confidence: 0.67542592

00:21:14.180 --> 00:21:16.780
Doesn't multiple of 16 OK?

NOTE Confidence: 0.67542592

00:21:16.780 --> 00:21:18.856
Well, what do you mean by

NOTE Confidence: 0.67542592

00:21:18.856 --> 00:21:20.240
vertical minute Max portion?

NOTE Confidence: 0.67542592

00:21:20.240 --> 00:21:21.452
We'll get there.

NOTE Confidence: 0.67542592

00:21:21.452 --> 00:21:23.290
So OK, I guess what I'm kind

NOTE Confidence: 0.67542592

00:21:23.290 --> 00:21:24.594
of looking for is like, yeah,

NOTE Confidence: 0.67542592

00:21:24.594 --> 00:21:26.512
let's do the let's do the overview

NOTE Confidence: 0.67542592

00:21:26.512 --> 00:21:27.939
of the algorithm now,

NOTE Confidence: 0.67542592

00:21:27.940 --> 00:21:31.695
which starts. Uh.

NOTE Confidence: 0.67542592

00:21:31.695 --> 00:21:36.295
Yeah yeah here yeah OK yeah OK so.

NOTE Confidence: 0.82417934375

00:21:38.390 --> 00:21:39.440
Do you need to switch the

NOTE Confidence: 0.82417934375

00:21:39.440 --> 00:21:41.050
camera over? No, yeah, thanks.

NOTE Confidence: 0.806612015

00:21:45.360 --> 00:21:47.016
Let's actually get into it now.

NOTE Confidence: 0.9600203

00:21:49.210 --> 00:21:49.390
UM?

NOTE Confidence: 0.8071674

00:21:53.260 --> 00:21:53.760
So.

NOTE Confidence: 0.860623876666667

00:21:56.010 --> 00:21:58.370
If we have, let's do this in reverse

NOTE Confidence: 0.860623876666667

00:21:58.370 --> 00:22:02.440
order, so let's say, let's see.

NOTE Confidence: 0.860623876666667

00:22:02.440 --> 00:22:05.840
Save Ohh actually right sorry.

NOTE Confidence: 0.860623876666667

00:22:05.840 --> 00:22:06.910
So let's say we have.

NOTE Confidence: 0.831993942

00:22:16.730 --> 00:22:18.610
And let's consider 32 bit.

NOTE Confidence: 0.71369362

00:22:27.280 --> 00:22:30.280
Perfect, yeah, so let's consider

NOTE Confidence: 0.71369362

00:22:30.280 --> 00:22:34.006
third the 32 bit elements.

NOTE Confidence: 0.71369362

00:22:34.006 --> 00:22:38.450
On so. What we're gonna do is.

NOTE Confidence: 0.889666522

00:22:41.880 --> 00:22:43.290
So we're splitting it up.

NOTE Confidence: 0.872111143571429

00:22:46.280 --> 00:22:48.170
Like that, and then we're

NOTE Confidence: 0.872111143571429

00:22:48.170 --> 00:22:49.682
gonna compute the elementwise

NOTE Confidence: 0.872111143571429

00:22:49.682 --> 00:22:51.080
minimum of all of those.

NOTE Confidence: 0.872111143571429

00:22:51.080 --> 00:22:55.200
And in the code this is called the.

NOTE Confidence: 0.872111143571429

00:22:55.200 --> 00:23:00.080
And vertical minimum presumably.

NOTE Confidence: 0.872111143571429

00:23:00.080 --> 00:23:03.748
UM? Yeah, the vertical.

NOTE Confidence: 0.872111143571429

00:23:03.750 --> 00:23:06.210
Presumably because.

NOTE Confidence: 0.872111143571429

00:23:06.210 --> 00:23:08.495
The idea is that you're

NOTE Confidence: 0.872111143571429

00:23:08.495 --> 00:23:10.323
kind of forming like.

NOTE Confidence: 0.872111143571429

00:23:10.330 --> 00:23:12.400
Look, you get. UM?

NOTE Confidence: 0.849963686666667

00:23:14.710 --> 00:23:20.480
You know one. 5. 9.

NOTE Confidence: 0.898675925

00:23:23.370 --> 00:23:27.980
And then. Ah. To.

NOTE Confidence: 0.9030651

00:23:32.710 --> 00:23:33.000
Well.

NOTE Confidence: 0.884324647058823

00:23:42.070 --> 00:23:43.650
Laying stuff out like this

NOTE Confidence: 0.884324647058823

00:23:43.650 --> 00:23:45.616
and then each time you go

NOTE Confidence: 0.884324647058823

00:23:45.616 --> 00:23:47.500
through you get the minimum of.

NOTE Confidence: 0.884324647058823

00:23:47.500 --> 00:23:52.004
Of the of the of this vertical column.

NOTE Confidence: 0.884324647058823

00:23:52.010 --> 00:23:54.488
Right, OK, so you end up.

NOTE Confidence: 0.884324647058823

00:23:54.490 --> 00:23:56.850
Finding the minimum one that

NOTE Confidence: 0.884324647058823

00:23:56.850 --> 00:24:00.344
occurred at position 0 Mod 4142,

NOTE Confidence: 0.884324647058823

00:24:00.344 --> 00:24:01.388
Mod 4, and so forth so.

NOTE Confidence: 0.884324647058823

00:24:01.390 --> 00:24:02.855
So we keep the state

NOTE Confidence: 0.884324647058823

00:24:02.855 --> 00:24:04.027
when we're going through.

NOTE Confidence: 0.884324647058823

00:24:04.030 --> 00:24:05.458
We keep 2 vectors.

NOTE Confidence: 0.790953563333333

00:24:08.360 --> 00:24:10.145
Keep the valley,

NOTE Confidence: 0.790953563333333

00:24:10.145 --> 00:24:13.715
the value and the idea X.

NOTE Confidence: 0.790953563333333

00:24:13.720 --> 00:24:16.468
So yeah, so like.

NOTE Confidence: 0.790953563333333

00:24:16.470 --> 00:24:18.958
The first time through.

NOTE Confidence: 0.790953563333333

00:24:18.960 --> 00:24:20.170
Let's see, you would find.

NOTE Confidence: 0.862790635454545

00:24:27.240 --> 00:24:28.084
Question for those watching,

NOTE Confidence: 0.862790635454545

00:24:28.084 --> 00:24:29.820
can you see what's on the whiteboard?

NOTE Confidence: 0.862790635454545

00:24:29.820 --> 00:24:31.789
Just checking so that we've got, UM,

NOTE Confidence: 0.862790635454545

00:24:31.789 --> 00:24:37.090
the right do we might wanna turn off auto.

NOTE Confidence: 0.862790635454545

00:24:37.090 --> 00:24:38.260
Camera settings so that when I

NOTE Confidence: 0.862790635454545

00:24:38.260 --> 00:24:39.900
walk in front of it, it doesn't.

NOTE Confidence: 0.862790635454545

00:24:39.900 --> 00:24:41.625
It doesn't like right now.

NOTE Confidence: 0.862790635454545

00:24:41.630 --> 00:24:43.286
Yes, I can read what's going

NOTE Confidence: 0.862790635454545

00:24:43.286 --> 00:24:44.830
on on the white board.

NOTE Confidence: 0.862790635454545

00:24:44.830 --> 00:24:46.734
I think you guys need to stop

NOTE Confidence: 0.862790635454545

00:24:46.734 --> 00:24:48.629
sharing though for the video to work.

NOTE Confidence: 0.862790635454545

00:24:48.630 --> 00:24:50.310
OK, let's do that because right

NOTE Confidence: 0.862790635454545

00:24:50.310 --> 00:24:52.444
now it's like I have, you know,

NOTE Confidence: 0.862790635454545

00:24:52.444 --> 00:24:54.079
just Charlies video maximized and

NOTE Confidence: 0.862790635454545

00:24:54.079 --> 00:24:56.201
we need that on the video instead

NOTE Confidence: 0.862790635454545

00:24:56.201 --> 00:24:58.582
of your window with the tiny little

NOTE Confidence: 0.862790635454545

00:24:58.582 --> 00:25:01.220
video showing up in the corner, OK?

NOTE Confidence: 0.862790635454545

00:25:01.220 --> 00:25:03.270
And I think, Oh no,

NOTE Confidence: 0.862790635454545

00:25:03.270 --> 00:25:06.270
it's it's that's turned off.

NOTE Confidence: 0.862790635454545

00:25:06.270 --> 00:25:08.160
You may just want to write larger

NOTE Confidence: 0.862790635454545

00:25:08.160 --> 00:25:10.116
and use maybe the green one because

NOTE Confidence: 0.862790635454545

00:25:10.116 --> 00:25:12.089
I was looking at like the Dal

NOTE Confidence: 0.862790635454545

00:25:12.089 --> 00:25:13.529
and that's like very very.

NOTE Confidence: 0.862790635454545

00:25:13.530 --> 00:25:14.650
I can barely see it in person.

NOTE Confidence: 0.862790635454545

00:25:14.650 --> 00:25:17.750
Yeah, might be running.

NOTE Confidence: 0.862790635454545

00:25:17.750 --> 00:25:18.807
Yeah, that I couldn't see at all.

NOTE Confidence: 0.862790635454545

00:25:18.810 --> 00:25:19.950
I didn't know there was something

NOTE Confidence: 0.862790635454545

00:25:19.950 --> 00:25:20.980
there until you pointed it out.

NOTE Confidence: 0.895945738

00:25:23.110 --> 00:25:24.020
But the red shows up.

NOTE Confidence: 0.87352566

00:25:26.890 --> 00:25:29.542
I think I think that one is cursed and try.

NOTE Confidence: 0.87352566

00:25:29.542 --> 00:25:33.328
Yeah, that was good. OK so yeah so we keep.

NOTE Confidence: 0.87352566

00:25:33.330 --> 00:25:36.568
Now and so it would be, you know. On

NOTE Confidence: 0.768315367272727

00:25:41.150 --> 00:25:43.410
ohh man, I wrote everything

NOTE Confidence: 0.768315367272727

00:25:43.410 --> 00:25:45.900
backwards in that matrix because I.

NOTE Confidence: 0.768315367272727

00:25:45.900 --> 00:25:47.890
Which is gonna make things

NOTE Confidence: 0.768315367272727

00:25:47.890 --> 00:25:49.880
harder because you get a.

NOTE Confidence: 0.768315367272727

00:25:49.880 --> 00:25:52.620
The easy thing is it's. Yeah.

NOTE Confidence: 0.79670499

00:26:08.270 --> 00:26:10.629
Like you start, you know you can

NOTE Confidence: 0.79670499

00:26:10.629 --> 00:26:13.870
start with 1211, ten, nine and then

NOTE Confidence: 0.79670499

00:26:13.870 --> 00:26:18.050
we do the comparison. Against. Uhm?

NOTE Confidence: 0.876983666666667

00:26:23.250 --> 00:26:24.150
Alright and so.

NOTE Confidence: 0.9119947

00:26:27.360 --> 00:26:32.600
Each. Each element, and by the

NOTE Confidence: 0.9119947

00:26:32.600 --> 00:26:37.330
time we're done. We get. Aye.

NOTE Confidence: 0.880399888571428

00:26:41.490 --> 00:26:46.000
By the time we're done so so. We get.

NOTE Confidence: 0.880399888571428

00:26:46.000 --> 00:26:49.784
From here we get the element wise minimum.

NOTE Confidence: 0.880399888571428

00:26:49.790 --> 00:26:51.428
And then by the time we're done,

NOTE Confidence: 0.880399888571428

00:26:51.430 --> 00:26:55.510
we get the minimum of each column. Right so.

NOTE Confidence: 0.73173549125

00:26:57.780 --> 00:27:00.664
Alright can I can I check my

NOTE Confidence: 0.73173549125

00:27:00.664 --> 00:27:02.109
understanding that that that's

NOTE Confidence: 0.73173549125

00:27:02.109 --> 00:27:03.824
why it's called the vertical.

NOTE Confidence: 0.73173549125

00:27:03.830 --> 00:27:11.960
OK, so if our input instead was 12?

NOTE Confidence: 0.73173549125

00:27:11.960 --> 00:27:20.580
Negative. 99 uh, ten and nine,

NOTE Confidence: 0.73173549125

00:27:20.580 --> 00:27:27.550
then 8. Seven just do 265.

NOTE Confidence: 0.73173549125

00:27:27.550 --> 00:27:29.710
Just do two, yeah.

NOTE Confidence: 0.73173549125

00:27:29.710 --> 00:27:30.658
Where you like it?

NOTE Confidence: 0.73173549125

00:27:30.658 --> 00:27:32.620
I guess negative makes it more confusing.

NOTE Confidence: 0.73173549125

00:27:32.620 --> 00:27:35.348
No, that's fine, OK, but just two chunks.

NOTE Confidence: 0.73173549125

00:27:35.350 --> 00:27:37.510
OK, like this, yeah?

NOTE Confidence: 0.73173549125

00:27:37.510 --> 00:27:39.860
Yeah, then we would compare element

NOTE Confidence: 0.73173549125

00:27:39.860 --> 00:27:42.398
wise so then you get 12 to ten

NOTE Confidence: 0.821994479285714

00:27:45.050 --> 00:27:46.765
98765. So comparing these two

NOTE Confidence: 0.821994479285714

00:27:46.765 --> 00:27:48.137
parts and probably standing

NOTE Confidence: 0.821994479285714

00:27:48.137 --> 00:27:49.688
in front of the camera,

NOTE Confidence: 0.821994479285714

00:27:49.690 --> 00:27:52.110
if you're getting the minimum.

NOTE Confidence: 0.821994479285714

00:27:52.110 --> 00:27:52.950
This one wins.

NOTE Confidence: 0.821994479285714

00:27:52.950 --> 00:27:54.350
This one wins this one,

NOTE Confidence: 0.821994479285714

00:27:54.350 --> 00:27:55.598
this one, and so we get

NOTE Confidence: 0.785996960571429

00:27:59.310 --> 00:28:04.364
8265 for each possible location Mod 4,

NOTE Confidence: 0.785996960571429

00:28:04.370 --> 00:28:06.935
and at the very end after the whole vector

NOTE Confidence: 0.785996960571429

00:28:06.935 --> 00:28:09.601
thing has given us a sort of vector of the

NOTE Confidence: 0.785996960571429

00:28:09.601 --> 00:28:12.889
smallest ones found at each position mod 4.

NOTE Confidence: 0.785996960571429

00:28:12.890 --> 00:28:14.416
Then we can do just a few

NOTE Confidence: 0.785996960571429

00:28:14.416 --> 00:28:15.070
instructions and fight.

NOTE Confidence: 0.785996960571429

00:28:15.070 --> 00:28:17.365
Oh wait, two is the smallest of all evolved?

NOTE Confidence: 0.785996960571429

00:28:17.370 --> 00:28:19.590
Yes, that's that's exactly what happens.

NOTE Confidence: 0.785996960571429

00:28:19.590 --> 00:28:22.270
And actually we could implement this for our.

NOTE Confidence: 0.785996960571429

00:28:22.270 --> 00:28:23.678
For the scalar algorithms,

NOTE Confidence: 0.785996960571429

00:28:23.678 --> 00:28:25.438
it would probably be faster

NOTE Confidence: 0.785996960571429

00:28:25.438 --> 00:28:26.750
than what we do now.

NOTE Confidence: 0.785996960571429

00:28:26.750 --> 00:28:28.193
Interesting because it.

NOTE Confidence: 0.785996960571429

00:28:28.193 --> 00:28:31.560
It means that the the the loop

NOTE Confidence: 0.785996960571429

00:28:31.652 --> 00:28:35.132
dependencies are much further apart, alright?

NOTE Confidence: 0.785996960571429

00:28:35.132 --> 00:28:36.764
Because we can if we're talking

NOTE Confidence: 0.785996960571429

00:28:36.764 --> 00:28:38.525
between like 12 and 8:00 and 2:00

NOTE Confidence: 0.785996960571429

00:28:38.525 --> 00:28:39.863
and 7:00 and 10:00 and 6:00,

NOTE Confidence: 0.785996960571429

00:28:39.870 --> 00:28:41.298
we can do all those comparisons and

NOTE Confidence: 0.785996960571429

00:28:41.298 --> 00:28:42.802
we don't need to care about the

NOTE Confidence: 0.785996960571429

00:28:42.802 --> 00:28:44.074
results of them until much later.

NOTE Confidence: 0.785996960571429

00:28:44.080 --> 00:28:46.500
We're currently greedily saying OK,

NOTE Confidence: 0.785996960571429

00:28:46.500 --> 00:28:48.588
we need to.

NOTE Confidence: 0.785996960571429

00:28:48.590 --> 00:28:50.258
Through 12 and two into comparison

NOTE Confidence: 0.785996960571429

00:28:50.258 --> 00:28:51.910
and then whatever that comes out,

NOTE Confidence: 0.785996960571429

00:28:51.910 --> 00:28:53.010
we compare that against 10.

NOTE Confidence: 0.785996960571429

00:28:53.010 --> 00:28:55.498
That's a huge chain of dependencies.

NOTE Confidence: 0.785996960571429

00:28:55.498 --> 00:28:57.488
It's sort of the difference

NOTE Confidence: 0.785996960571429

00:28:57.488 --> 00:29:00.850
between a tree that looks like.

NOTE Confidence: 0.785996960571429

00:29:00.850 --> 00:29:04.610
This versus a tree that looks like trade,

NOTE Confidence: 0.785996960571429

00:29:04.610 --> 00:29:07.230
some zooms.

NOTE Confidence: 0.785996960571429

00:29:07.230 --> 00:29:07.549
Yeah.

NOTE Confidence: 0.785996960571429

00:29:07.549 --> 00:29:07.868
Yeah,

NOTE Confidence: 0.785996960571429

00:29:07.868 --> 00:29:10.420
and and and so that that would be

NOTE Confidence: 0.785996960571429

00:29:10.493 --> 00:29:12.653
potentially useful for like user

NOTE Confidence: 0.785996960571429

00:29:12.653 --> 00:29:16.820
defined types or word sizes, but.

NOTE Confidence: 0.785996960571429

00:29:16.820 --> 00:29:19.250
Yeah, it's you trade off.

NOTE Confidence: 0.785996960571429

00:29:19.250 --> 00:29:21.287
You know the storage space and also

NOTE Confidence: 0.785996960571429

00:29:21.287 --> 00:29:23.680
at the end you do MLN comparisons.

NOTE Confidence: 0.785996960571429

00:29:23.680 --> 00:29:27.028
Yeah, which is just kind of.

NOTE Confidence: 0.785996960571429

00:29:27.030 --> 00:29:29.520
Because vector.

NOTE Confidence: 0.785996960571429

00:29:29.520 --> 00:29:32.340
Oops, not any algorithm reason anyway.

NOTE Confidence: 0.785996960571429

00:29:32.340 --> 00:29:34.500
Anyhow, so while you're doing this,

NOTE Confidence: 0.785996960571429

00:29:34.500 --> 00:29:36.152
you also keep track of the of

NOTE Confidence: 0.785996960571429

00:29:36.152 --> 00:29:37.560
the indices of the minimum,

NOTE Confidence: 0.785996960571429

00:29:37.560 --> 00:29:37.833
so.

NOTE Confidence: 0.785996960571429

00:29:37.833 --> 00:29:39.744
In right because this is min element

NOTE Confidence: 0.785996960571429

00:29:39.744 --> 00:29:41.852
and so forth and we need to know

NOTE Confidence: 0.785996960571429

00:29:41.852 --> 00:29:43.610
where or not just would value.

NOTE Confidence: 0.785996960571429

00:29:43.610 --> 00:29:43.942
Yeah,

NOTE Confidence: 0.785996960571429

00:29:43.942 --> 00:29:46.266
we need to know where and and

NOTE Confidence: 0.785996960571429

00:29:46.266 --> 00:29:48.229
that's also true at the end.

NOTE Confidence: 0.925635912

00:29:50.300 --> 00:29:52.976
If we get duplicates, yeah, OK yeah

NOTE Confidence: 0.925635912

00:29:52.976 --> 00:29:54.680
because they have interesting semantics.

NOTE Confidence: 0.925635912

00:29:54.680 --> 00:29:58.180
I I had to learn this because I think we had.

NOTE Confidence: 0.925635912

00:29:58.180 --> 00:30:00.547
We had like a bug report that we did

NOTE Confidence: 0.925635912

00:30:00.547 --> 00:30:02.919
the wrong thing in min Max element.

NOTE Confidence: 0.925635912

00:30:02.920 --> 00:30:04.768
Minmax element is not the same as just

NOTE Confidence: 0.925635912

00:30:04.768 --> 00:30:06.637
doing mid element to do a Max element.

NOTE Confidence: 0.925635912

00:30:06.640 --> 00:30:09.658
It's different to the different minimum.

NOTE Confidence: 0.925635912

00:30:09.660 --> 00:30:11.018
Sorry it gives you the same minimum.

NOTE Confidence: 0.925635912

00:30:11.020 --> 00:30:12.262
It gives you a different maximum

NOTE Confidence: 0.925635912

00:30:12.262 --> 00:30:13.863
and the case of duplicates. Yeah,

NOTE Confidence: 0.925635912

00:30:13.863 --> 00:30:15.634
just because of how the algorithm works,

NOTE Confidence: 0.925635912

00:30:15.640 --> 00:30:17.800
it's inherent to the algorithm.

NOTE Confidence: 0.925635912

00:30:17.800 --> 00:30:19.630
Well, I mean it's specified.

NOTE Confidence: 0.925635912

00:30:19.630 --> 00:30:21.406
That way, yes, it's specified well.

NOTE Confidence: 0.925635912

00:30:21.410 --> 00:30:23.714
Do it with a with a with a greater

NOTE Confidence: 0.925635912

00:30:23.714 --> 00:30:25.547
than comparison, yeah, but yeah,

NOTE Confidence: 0.925635912

00:30:25.547 --> 00:30:28.074
I think you really want to be for comparisons

NOTE Confidence: 0.925635912

00:30:28.074 --> 00:30:30.698
or not follow the STLS prevention of use.

NOTE Confidence: 0.893390008571428

00:30:32.840 --> 00:30:35.120
Yeah well so the the Max element is

NOTE Confidence: 0.893390008571428

00:30:35.120 --> 00:30:37.408
a greater than or equals comparison?

NOTE Confidence: 0.893390008571428

00:30:37.410 --> 00:30:41.154
Or is Max's? Uh, greater than so

NOTE Confidence: 0.893390008571428

00:30:41.154 --> 00:30:44.360
I think min Max element the Max.

NOTE Confidence: 0.893390008571428

00:30:44.360 --> 00:30:49.210
Actually. That was more comparisons.

NOTE Confidence: 0.893390008571428

00:30:49.210 --> 00:30:50.605
Yeah, I don't need to look at it again.

NOTE Confidence: 0.893390008571428

00:30:50.610 --> 00:30:52.945
I remember to achieve its

NOTE Confidence: 0.893390008571428

00:30:52.945 --> 00:30:55.280
three in over 2 comparisons.

NOTE Confidence: 0.893390008571428

00:30:55.280 --> 00:30:57.536
It naturally output a different value

NOTE Confidence: 0.893390008571428

00:30:57.536 --> 00:31:00.279
in the case of the tie breaker.

NOTE Confidence: 0.893390008571428

00:31:00.280 --> 00:31:03.856
Ohh God, does that mean this doesn't conform?

NOTE Confidence: 0.893390008571428

00:31:03.860 --> 00:31:07.764
This one may be fine because it's integers.

NOTE Confidence: 0.893390008571428

00:31:07.770 --> 00:31:10.171
Ooh, that's a good question about location

NOTE Confidence: 0.893390008571428

00:31:10.171 --> 00:31:13.264
no, but the N log N comparison thing

NOTE Confidence: 0.893390008571428

00:31:13.264 --> 00:31:15.519
doesn't matter because it's it's not.

NOTE Confidence: 0.893390008571428

00:31:15.520 --> 00:31:19.142
It's it's north log N for just the the

NOTE Confidence: 0.893390008571428

00:31:19.142 --> 00:31:22.410
vector size chunk, so N is constant.

NOTE Confidence: 0.893390008571428

00:31:22.410 --> 00:31:24.648
OK, yeah yeah that's fine then yeah, we can.

NOTE Confidence: 0.893390008571428

00:31:24.648 --> 00:31:25.470
Definitely constant factors.

NOTE Confidence: 0.893390008571428

00:31:25.470 --> 00:31:27.353
I was more thinking about what locations

NOTE Confidence: 0.893390008571428

00:31:27.353 --> 00:31:29.606
do we return in the case of equivalent

NOTE Confidence: 0.893390008571428

00:31:29.606 --> 00:31:31.510
answers and even though we're integers,

NOTE Confidence: 0.893390008571428

00:31:31.510 --> 00:31:32.438
which actually doesn't matter,

NOTE Confidence: 0.893390008571428

00:31:32.438 --> 00:31:34.120
we do it right. Yeah, OK, good,

NOTE Confidence: 0.893390008571428

00:31:34.120 --> 00:31:36.820
as long as it does so once we're done once,

NOTE Confidence: 0.893390008571428

00:31:36.820 --> 00:31:38.052
we're at this step.

NOTE Confidence: 0.893390008571428

00:31:38.052 --> 00:31:40.442
We need to find Oh yeah, right.

NOTE Confidence: 0.893390008571428

00:31:40.442 --> 00:31:42.068
So portion Max.

NOTE Confidence: 0.893390008571428

00:31:42.068 --> 00:31:44.410
Right, so we keep the indices,

NOTE Confidence: 0.893390008571428

00:31:44.410 --> 00:31:47.803
so for a moment because it's a little easier.

NOTE Confidence: 0.893390008571428

00:31:47.810 --> 00:31:51.268
Let's imagine we have a really tiny.

NOTE Confidence: 0.893390008571428

00:31:51.270 --> 00:31:55.728
One bite. Uh, really tiny vectors.

NOTE Confidence: 0.893390008571428

00:31:55.730 --> 00:31:57.990
A 32 bit vector, right?

NOTE Confidence: 0.893390008571428

00:31:57.990 --> 00:31:59.862
So 48 bit values.

NOTE Confidence: 0.893390008571428

00:31:59.862 --> 00:32:00.897
OK, right?

NOTE Confidence: 0.893390008571428

00:32:00.897 --> 00:32:04.866
So we keep the indices and eventually.

NOTE Confidence: 0.893390008571428

00:32:04.870 --> 00:32:08.158
We get to the 255th comparison

NOTE Confidence: 0.893390008571428

00:32:08.158 --> 00:32:10.726
and we need to wrap around,

NOTE Confidence: 0.893390008571428

00:32:10.730 --> 00:32:12.529
so that's what portion size is where,

NOTE Confidence: 0.893390008571428

00:32:12.530 --> 00:32:13.838
if you like.

NOTE Confidence: 0.698897676666667

00:32:19.540 --> 00:32:20.836
That probably wouldn't be your vector,

NOTE Confidence: 0.698897676666667

00:32:20.840 --> 00:32:23.171
but it could be right if all of your

NOTE Confidence: 0.698897676666667

00:32:23.171 --> 00:32:25.256
minimum elements were at the very end,

NOTE Confidence: 0.698897676666667

00:32:25.260 --> 00:32:27.572
like if you get here, you have to stop

NOTE Confidence: 0.698897676666667

00:32:27.572 --> 00:32:29.660
doing this and you have to rectify.

NOTE Confidence: 0.698897676666667

00:32:29.660 --> 00:32:32.549
You know you have to do the second part.

NOTE Confidence: 0.698897676666667

00:32:32.550 --> 00:32:34.638
To pull out the real minimum

NOTE Confidence: 0.698897676666667

00:32:34.638 --> 00:32:36.310
element here or store it.

NOTE Confidence: 0.698897676666667

00:32:36.310 --> 00:32:39.150
And then reset this stuff and continue again.

NOTE Confidence: 0.698897676666667

00:32:39.150 --> 00:32:42.838
OK, I think I think you lost me.

NOTE Confidence: 0.698897676666667

00:32:42.840 --> 00:32:44.975
So you're you're storing a

NOTE Confidence: 0.698897676666667

00:32:44.975 --> 00:32:46.590
vector of locations, yes,

NOTE Confidence: 0.698897676666667

00:32:46.590 --> 00:32:48.240
so there's the index vector.

NOTE Confidence: 0.698897676666667

00:32:48.240 --> 00:32:50.844
OK, but you're only using a byte

NOTE Confidence: 0.698897676666667

00:32:50.844 --> 00:32:52.680
for the locations. Is that right?

NOTE Confidence: 0.698897676666667

00:32:52.680 --> 00:32:54.656
Yeah, this is just so that I don't

NOTE Confidence: 0.698897676666667

00:32:54.656 --> 00:32:56.315
have to write out to the 32.

NOTE Confidence: 0.698897676666667

00:32:56.320 --> 00:32:57.680
Oh, I see. So, OK,

NOTE Confidence: 0.698897676666667

00:32:57.680 --> 00:32:59.816
so you're physically actually storing it.

NOTE Confidence: 0.698897676666667

00:32:59.820 --> 00:33:03.400
This is exactly happens so.

NOTE Confidence: 0.698897676666667

00:33:03.400 --> 00:33:05.776
Yes, because we use the same

NOTE Confidence: 0.698897676666667

00:33:05.776 --> 00:33:08.170
size vector for this and this.

NOTE Confidence: 0.829342907142857

00:33:12.370 --> 00:33:15.975
Ohh there for the for the locations

NOTE Confidence: 0.829342907142857

00:33:15.980 --> 00:33:18.518
yeah OK so so so there actually is a

NOTE Confidence: 0.829342907142857

00:33:18.518 --> 00:33:20.663
mismatch between size T on the platform

NOTE Confidence: 0.829342907142857

00:33:20.663 --> 00:33:23.103
and the number of bits that we can

NOTE Confidence: 0.829342907142857

00:33:23.103 --> 00:33:24.608
dedicate to storing indices right?

NOTE Confidence: 0.829342907142857

00:33:24.608 --> 00:33:27.067
So that's why we have to worry about

NOTE Confidence: 0.829342907142857

00:33:27.067 --> 00:33:29.139
running out well size T you know 64

NOTE Confidence: 0.829342907142857

00:33:29.139 --> 00:33:31.077
bit vector you get two of those.

NOTE Confidence: 0.829342907142857

00:33:31.080 --> 00:33:33.198
Right? OK, because these are one

NOTE Confidence: 0.829342907142857

00:33:33.200 --> 00:33:34.512
2128 bit vector instructions.

NOTE Confidence: 0.829342907142857

00:33:34.512 --> 00:33:36.520
Yeah, it's to see whatever and and and.

NOTE Confidence: 0.829342907142857

00:33:36.520 --> 00:33:37.894
Also you can't.

NOTE Confidence: 0.829342907142857

00:33:37.894 --> 00:33:40.184
You can't like shuffle between.

NOTE Confidence: 0.779970339285714

00:33:42.960 --> 00:33:45.585
You you can't do the the clever

NOTE Confidence: 0.779970339285714

00:33:45.585 --> 00:33:48.471
stuff that is done to keep the, uh,

NOTE Confidence: 0.779970339285714

00:33:48.471 --> 00:33:50.559
the values and the indices and sync and

NOTE Confidence: 0.779970339285714

00:33:50.559 --> 00:33:52.627
then to tie them together at the end.

NOTE Confidence: 0.779970339285714

00:33:52.630 --> 00:33:55.518
If the vectors are different sizes, right?

NOTE Confidence: 0.779970339285714

00:33:55.518 --> 00:33:56.858
Yeah yeah, the same size

NOTE Confidence: 0.779970339285714

00:33:56.858 --> 00:33:58.449
will need to be the sad,

NOTE Confidence: 0.779970339285714

00:33:58.450 --> 00:34:00.786
they're the same size and they can overflow.

NOTE Confidence: 0.779970339285714

00:34:00.790 --> 00:34:04.515
OK, so this is the case of. If we have,

NOTE Confidence: 0.779970339285714

00:34:04.515 --> 00:34:07.060
is it 4 values per vector or does it?

NOTE Confidence: 0.779970339285714

00:34:07.060 --> 00:34:08.038
Does it varies.

NOTE Confidence: 0.779970339285714

00:34:08.038 --> 00:34:09.278
It varies between, right?

NOTE Confidence: 0.779970339285714

00:34:09.278 --> 00:34:10.310
Yeah, varies by elements.

NOTE Confidence: 0.779970339285714

00:34:10.310 --> 00:34:13.306
So first if we got a lot of elements per

NOTE Confidence: 0.779970339285714

00:34:13.306 --> 00:34:18.999
actual one byte elements, you get what?

NOTE Confidence: 0.779970339285714

00:34:19.000 --> 00:34:24.705
16 indices and 16 values per chunk.

NOTE Confidence: 0.779970339285714

00:34:24.710 --> 00:34:27.060
16 I think that's right.

NOTE Confidence: 0.779970339285714

00:34:27.060 --> 00:34:30.020
Yeah, OK, so for one byte we get.

NOTE Confidence: 0.779970339285714

00:34:30.020 --> 00:34:32.132
I'm trying to do the division of my

NOTE Confidence: 0.779970339285714

00:34:32.132 --> 00:34:34.160
head was that 32 bytes per chunk.

NOTE Confidence: 0.81584734

00:34:36.710 --> 00:34:39.148
64128 No, no. It's only 1616 bytes per chunk.

NOTE Confidence: 0.72097487

00:34:41.210 --> 00:34:42.530
What 16 bytes per chunk,

NOTE Confidence: 0.72097487

00:34:42.530 --> 00:34:44.708
no matter what, because it's OK,

NOTE Confidence: 0.72097487

00:34:44.710 --> 00:34:46.534
it's 128 bit vectors.

NOTE Confidence: 0.72097487

00:34:46.534 --> 00:34:48.370
OK, I actually yeah, I I would.

NOTE Confidence: 0.72097487

00:34:48.370 --> 00:34:50.926
I would appreciate a table here.

NOTE Confidence: 0.72097487

00:34:50.930 --> 00:34:55.466
So we've got like 1616 byte.

NOTE Confidence: 0.72097487

00:34:55.470 --> 00:34:58.050
Actually they is there

NOTE Confidence: 0.72097487

00:34:58.050 --> 00:35:01.200
an in an AVX 256 version.

NOTE Confidence: 0.637835716

00:35:04.480 --> 00:35:05.730
You know VX two yeah.

NOTE Confidence: 0.883722418

00:35:09.010 --> 00:35:11.120
So it's like we have.

NOTE Confidence: 0.883722418

00:35:11.120 --> 00:35:15.278
16 Bites, I think there's.

NOTE Confidence: 0.29106973

00:35:17.400 --> 00:35:20.748
And one. And.

NOTE Confidence: 0.696840558

00:35:23.100 --> 00:35:26.008
And the size of teas, maybe the way the

NOTE Confidence: 0.696840558

00:35:26.008 --> 00:35:29.878
camera has fallen since I put it. Ohh no.

NOTE Confidence: 0.696840558

00:35:29.878 --> 00:35:32.670
You sat on the chair with the camera.

NOTE Confidence: 0.687642469444445

00:35:36.350 --> 00:35:38.312
This is like yes Oh yeah no it doesn't.

NOTE Confidence: 0.687642469444445

00:35:38.320 --> 00:35:41.416
Yes you can. It doesn't have

NOTE Confidence: 0.687642469444445

00:35:41.416 --> 00:35:44.729
this one really great on YouTube.

NOTE Confidence: 0.687642469444445

00:35:44.730 --> 00:35:46.000
This should be our thumbnail.

NOTE Confidence: 0.691879783333333

00:35:49.860 --> 00:35:52.620
Video editing please.

NOTE Confidence: 0.691879783333333

00:35:52.620 --> 00:35:57.485
If yeah, OK, yeah, just don't don't.

NOTE Confidence: 0.691879783333333

00:35:57.490 --> 00:35:59.352
Bigger trouble just in case anybody out

NOTE Confidence: 0.691879783333333

00:35:59.352 --> 00:36:01.103
there thinks that we're not software

NOTE Confidence: 0.691879783333333

00:36:01.103 --> 00:36:02.909
engineers and that we're actually just,

NOTE Confidence: 0.691879783333333

00:36:02.910 --> 00:36:05.650
you know, content creators.

NOTE Confidence: 0.691879783333333

00:36:05.650 --> 00:36:07.705
We've proven it.

NOTE Confidence: 0.691879783333333

00:36:07.710 --> 00:36:11.410
OK so I was wondering 16 bytes on size of

NOTE Confidence: 0.691879783333333

00:36:11.410 --> 00:36:18.020
T could be one to four eight and so then.

NOTE Confidence: 0.691879783333333

00:36:18.020 --> 00:36:19.976
Elems her portion.

NOTE Confidence: 0.691879783333333

00:36:19.976 --> 00:36:23.962
Of the terminology or junk, yeah, I.

NOTE Confidence: 0.691879783333333

00:36:23.962 --> 00:36:26.489
I think chunk no yeah chunk because

NOTE Confidence: 0.691879783333333

00:36:26.489 --> 00:36:28.659
portion is or portions different.

NOTE Confidence: 0.691879783333333

00:36:28.660 --> 00:36:31.740
Yeah OK portion is the number of chunks.

NOTE Confidence: 0.691879783333333

00:36:31.740 --> 00:36:33.400
Ah which makes sense right?

NOTE Confidence: 0.691879783333333

00:36:33.400 --> 00:36:35.854
You when you're eating you one

NOTE Confidence: 0.691879783333333

00:36:35.854 --> 00:36:39.544
chunk of of food at a time and the

NOTE Confidence: 0.691879783333333

00:36:39.544 --> 00:36:42.030
number of chunks is portion size.

NOTE Confidence: 0.691879783333333

00:36:42.030 --> 00:36:44.490
OK, so you can have 16,

NOTE Confidence: 0.691879783333333

00:36:44.490 --> 00:36:48.130
eight, four or two UM.

NOTE Confidence: 0.691879783333333

00:36:48.130 --> 00:36:50.446
And if you are because this

NOTE Confidence: 0.691879783333333

00:36:50.446 --> 00:36:54.094
works on both X86 and X64,

NOTE Confidence: 0.691879783333333

00:36:54.094 --> 00:36:58.990
so for X86 we would need 4

NOTE Confidence: 0.691879783333333

00:36:58.990 --> 00:37:02.350
bytes for pointer and then for

NOTE Confidence: 0.691879783333333

00:37:02.350 --> 00:37:06.268
X64 we would need 8 bytes.

NOTE Confidence: 0.691879783333333

00:37:06.270 --> 00:37:08.070
We're not storing pointers

NOTE Confidence: 0.691879783333333

00:37:08.070 --> 00:37:09.420
right pointer size?

NOTE Confidence: 0.691879783333333

00:37:09.420 --> 00:37:12.996
Keep saying same deal so here.

NOTE Confidence: 0.691879783333333

00:37:13.000 --> 00:37:19.120
If we have 16 bytes in a chunk

NOTE Confidence: 0.691879783333333

00:37:19.120 --> 00:37:20.960
and we have two elements,

NOTE Confidence: 0.691879783333333

00:37:20.960 --> 00:37:25.937
then that is exactly OK for storing size T,

NOTE Confidence: 0.691879783333333

00:37:25.940 --> 00:37:28.892
so we can just store no true size directly,

NOTE Confidence: 0.691879783333333

00:37:28.900 --> 00:37:29.602
no, no,

NOTE Confidence: 0.691879783333333

00:37:29.602 --> 00:37:31.357
you can't because each element

NOTE Confidence: 0.691879783333333

00:37:31.357 --> 00:37:33.497
here is going to be 32 bytes,

NOTE Confidence: 0.691879783333333

00:37:33.500 --> 00:37:36.850
each element is going to be 32 fights,

NOTE Confidence: 0.691879783333333

00:37:36.850 --> 00:37:39.593
but I said what the size of T is 80.

NOTE Confidence: 0.691879783333333

00:37:39.593 --> 00:37:40.808
Sorry, sorry yeah, you're right,

NOTE Confidence: 0.691879783333333

00:37:40.810 --> 00:37:43.029
you're right. OK, so in this case.

NOTE Confidence: 0.691879783333333

00:37:43.030 --> 00:37:45.046
The size of T always works,

NOTE Confidence: 0.691879783333333

00:37:45.050 --> 00:37:47.146
and in this case we'll reach 4 elements.

NOTE Confidence: 0.691879783333333

00:37:47.150 --> 00:37:49.498
Then we're camped at.

NOTE Confidence: 0.586625046923077

00:37:51.770 --> 00:37:53.336
16 / 4 square. So we're

NOTE Confidence: 0.586625046923077

00:37:53.336 --> 00:37:55.358
captive 2 to the 32 times that.

NOTE Confidence: 0.586625046923077

00:37:55.360 --> 00:37:56.424
That's fine on X86,

NOTE Confidence: 0.586625046923077

00:37:56.424 --> 00:37:58.720
but we do run into overflow on X64 here.

NOTE Confidence: 0.586625046923077

00:37:58.720 --> 00:38:00.575
We're capped at 2 to the 16,

NOTE Confidence: 0.586625046923077

00:38:00.580 --> 00:38:02.506
and here we're capped at 2 to the 8th,

NOTE Confidence: 0.586625046923077

00:38:02.510 --> 00:38:04.590
so that's the 2:55 you were talking about.

NOTE Confidence: 0.586625046923077

00:38:04.590 --> 00:38:08.174
Yeah, OK, so I see. So if as the.

NOTE Confidence: 0.586625046923077

00:38:08.174 --> 00:38:10.178
Element size gets smaller.

NOTE Confidence: 0.586625046923077

00:38:10.180 --> 00:38:12.202
We need to pack more indices

NOTE Confidence: 0.586625046923077

00:38:12.202 --> 00:38:14.977
into each 16 byte chunk that the

NOTE Confidence: 0.586625046923077

00:38:14.977 --> 00:38:16.777
vector instructions work on.

NOTE Confidence: 0.586625046923077

00:38:16.780 --> 00:38:18.719
Well, no, that's not what we do.

NOTE Confidence: 0.586625046923077

00:38:18.720 --> 00:38:21.240
Make the portion smaller.

NOTE Confidence: 0.586625046923077

00:38:21.240 --> 00:38:23.970
So once ohh I see once we

NOTE Confidence: 0.586625046923077

00:38:23.970 --> 00:38:25.988
get the whole point. Yeah,

NOTE Confidence: 0.586625046923077

00:38:25.988 --> 00:38:29.380
one point we use exit the vectorized loop,

NOTE Confidence: 0.586625046923077

00:38:29.380 --> 00:38:32.420
do the next part of the algorithm and

NOTE Confidence: 0.586625046923077

00:38:32.420 --> 00:38:35.240
then store the actual minimum value.

NOTE Confidence: 0.586625046923077

00:38:35.240 --> 00:38:39.958
And the actual minimum value and index.

NOTE Confidence: 0.586625046923077

00:38:39.960 --> 00:38:42.000
In just stored normally,

NOTE Confidence: 0.586625046923077

00:38:42.000 --> 00:38:43.530
just like with,

NOTE Confidence: 0.586625046923077

00:38:43.530 --> 00:38:45.576
just like with the old style

NOTE Confidence: 0.586625046923077

00:38:45.576 --> 00:38:47.190
minmax minimum maximum but OK.

NOTE Confidence: 0.586625046923077

00:38:47.190 --> 00:38:49.381
So this is essentially and then reset

NOTE Confidence: 0.586625046923077

00:38:49.381 --> 00:38:51.545
when we enter again or redo the

NOTE Confidence: 0.586625046923077

00:38:51.545 --> 00:38:53.650
tail which is just the normal loop.

NOTE Confidence: 0.586625046923077

00:38:53.650 --> 00:38:54.658
OK, I'm trying to make sure

NOTE Confidence: 0.586625046923077

00:38:54.658 --> 00:38:55.480
the camera can see it,

NOTE Confidence: 0.586625046923077

00:38:55.480 --> 00:38:57.657
so in the case that we've got

NOTE Confidence: 0.586625046923077

00:38:57.657 --> 00:38:59.799
like vector of T and we've got.

NOTE Confidence: 0.787897915217392

00:39:02.670 --> 00:39:04.722
She happens to be like 1 byte and we

NOTE Confidence: 0.787897915217392

00:39:04.722 --> 00:39:06.963
got like a whole bunch say this thing

NOTE Confidence: 0.787897915217392

00:39:06.963 --> 00:39:09.118
is for concrete purposes 10 gigabytes,

NOTE Confidence: 0.787897915217392

00:39:09.120 --> 00:39:12.768
which is a totally reasonable size.

NOTE Confidence: 0.787897915217392

00:39:12.770 --> 00:39:15.800
Since we can only consume up

NOTE Confidence: 0.787897915217392

00:39:15.800 --> 00:39:18.974
to 256 elements per portion,

NOTE Confidence: 0.787897915217392

00:39:18.974 --> 00:39:21.059
you're saying that we're gonna

NOTE Confidence: 0.787897915217392

00:39:21.059 --> 00:39:23.252
run the vectorized loop only

NOTE Confidence: 0.787897915217392

00:39:23.252 --> 00:39:26.104
on like the 1st 256 elements.

NOTE Confidence: 0.787897915217392

00:39:26.104 --> 00:39:27.844
So use cool vector instructions,

NOTE Confidence: 0.787897915217392

00:39:27.850 --> 00:39:30.965
find the minimum out of this region,

NOTE Confidence: 0.787897915217392

00:39:30.970 --> 00:39:32.896
exit the vectorized loop and then

NOTE Confidence: 0.787897915217392

00:39:32.896 --> 00:39:35.015
we run the vectorized loop again on

NOTE Confidence: 0.787897915217392

00:39:35.015 --> 00:39:37.708
the next 256 and then we find OK.

NOTE Confidence: 0.787897915217392

00:39:37.710 --> 00:39:39.420
Is there a better candidate here

NOTE Confidence: 0.787897915217392

00:39:39.420 --> 00:39:41.785
and so at each point we're finding

NOTE Confidence: 0.787897915217392

00:39:41.785 --> 00:39:43.720
a current best known candidate.

NOTE Confidence: 0.787897915217392

00:39:43.720 --> 00:39:44.428
And for minmax,

NOTE Confidence: 0.787897915217392

00:39:44.428 --> 00:39:45.844
it could be a different locations

NOTE Confidence: 0.787897915217392

00:39:45.844 --> 00:39:47.551
and we're still getting the advantage

NOTE Confidence: 0.787897915217392

00:39:47.551 --> 00:39:49.211
of the vectorized loop because we

NOTE Confidence: 0.787897915217392

00:39:49.211 --> 00:39:50.784
get to consume 256 bytes of time.

NOTE Confidence: 0.787897915217392

00:39:50.784 --> 00:39:53.460
Yeah or more in the case of larger elements,

NOTE Confidence: 0.787897915217392

00:39:53.460 --> 00:39:55.308
but we don't need to do anything

NOTE Confidence: 0.787897915217392

00:39:55.308 --> 00:39:56.918
super fancy to like cleverly

NOTE Confidence: 0.787897915217392

00:39:56.918 --> 00:39:59.558
split the index or something.

NOTE Confidence: 0.787897915217392

00:39:59.560 --> 00:40:00.508
We're just saying OK,

NOTE Confidence: 0.787897915217392

00:40:00.508 --> 00:40:02.484
because we can only store up to like 2

NOTE Confidence: 0.787897915217392

00:40:02.484 --> 00:40:04.269
to the eight or two to 16 or whatever.

NOTE Confidence: 0.787897915217392

00:40:04.270 --> 00:40:06.478
That's how many we can consume for vector.

NOTE Confidence: 0.787897915217392

00:40:06.480 --> 00:40:09.272
For that does mean the end is actually

NOTE Confidence: 0.787897915217392

00:40:09.272 --> 00:40:12.560
part of the asymptotic complexity though.

NOTE Confidence: 0.787897915217392

00:40:12.560 --> 00:40:16.960
That the N so so let me explain

NOTE Confidence: 0.787897915217392

00:40:16.960 --> 00:40:18.060
what happened.

NOTE Confidence: 0.787897915217392

00:40:18.060 --> 00:40:20.643
With the it's just like that's a

NOTE Confidence: 0.787897915217392

00:40:20.643 --> 00:40:23.730
bad one with the once we're done so.

NOTE Confidence: 0.885836391666667

00:40:25.890 --> 00:40:27.750
So once we're at this part,

NOTE Confidence: 0.885836391666667

00:40:27.750 --> 00:40:30.452
we need to find the the minimum

NOTE Confidence: 0.885836391666667

00:40:30.452 --> 00:40:31.991
of these elements. Right?

NOTE Confidence: 0.885836391666667

00:40:31.991 --> 00:40:35.420
And we could do that with a simple loop,

NOTE Confidence: 0.885836391666667

00:40:35.420 --> 00:40:37.100
but we actually do it with a

NOTE Confidence: 0.885836391666667

00:40:37.100 --> 00:40:38.590
bunch of simple instructions.

NOTE Confidence: 0.885836391666667

00:40:38.590 --> 00:40:43.730
So we we go. Umm? Like so.

NOTE Confidence: 0.054843336

00:40:46.690 --> 00:40:47.170
Umm?

NOTE Confidence: 0.900495552

00:40:52.850 --> 00:40:55.450
So we go like this, right?

NOTE Confidence: 0.900495552

00:40:55.450 --> 00:40:58.600
So OK, like conditional, not conditional.

NOTE Confidence: 0.900495552

00:40:58.600 --> 00:41:01.948
So first we shuffle this vector.

NOTE Confidence: 0.900495552

00:41:01.950 --> 00:41:03.080
Here, right?

NOTE Confidence: 0.900495552

00:41:03.080 --> 00:41:08.110
Actually the order doesn't matter and.

NOTE Confidence: 0.900495552

00:41:08.110 --> 00:41:11.100
For some of the sizes, it's.

NOTE Confidence: 0.900495552

00:41:11.100 --> 00:41:12.864
And for some of the levels it's

NOTE Confidence: 0.900495552

00:41:12.864 --> 00:41:13.620
increasing some decreasing,

NOTE Confidence: 0.900495552

00:41:13.620 --> 00:41:16.428
but it doesn't OK.

NOTE Confidence: 0.900495552

00:41:16.430 --> 00:41:18.270
I, I think this is the order for,

NOTE Confidence: 0.900495552

00:41:18.270 --> 00:41:22.590
but anyway so we get 3/4. 1/2

NOTE Confidence: 0.837575858666667

00:41:24.950 --> 00:41:28.000
OK and then we do and then we do the

NOTE Confidence: 0.837575858666667

00:41:28.092 --> 00:41:32.690
minimum and so we get. Minimum. 43

NOTE Confidence: 0.771019

00:41:34.750 --> 00:41:38.850
minimum 3. UH-4

NOTE Confidence: 0.9462936

00:41:43.350 --> 00:41:43.740
21.

NOTE Confidence: 0.748329448181818

00:41:47.680 --> 00:41:49.171
Oh, I see by shuffling it and

NOTE Confidence: 0.748329448181818

00:41:49.171 --> 00:41:50.220
then comparing the minimum,

NOTE Confidence: 0.748329448181818

00:41:50.220 --> 00:41:52.725
you can compare the elements

NOTE Confidence: 0.748329448181818

00:41:52.725 --> 00:41:54.390
against themselves. Yeah, OK,

NOTE Confidence: 0.748329448181818

00:41:54.390 --> 00:41:56.370
and then we're just they're they're

NOTE Confidence: 0.748329448181818

00:41:56.370 --> 00:41:57.221
counterparts essentially, yeah.

NOTE Confidence: 0.748329448181818

00:41:57.221 --> 00:41:58.367
And then we do it again.

NOTE Confidence: 0.748329448181818

00:41:58.370 --> 00:42:01.098
We shuffle this. Again.

NOTE Confidence: 0.9334116

00:42:03.440 --> 00:42:03.660
Wait?

NOTE Confidence: 0.7792263005

00:42:06.550 --> 00:42:07.852
Yeah, OK, if you shuffle that

NOTE Confidence: 0.7792263005

00:42:07.852 --> 00:42:09.290
again then you can compare whatever

NOTE Confidence: 0.7792263005

00:42:09.290 --> 00:42:10.862
the minimum of four and three

NOTE Confidence: 0.7792263005

00:42:10.862 --> 00:42:12.822
was against two and one was,

NOTE Confidence: 0.7792263005

00:42:12.822 --> 00:42:14.970
and then the output will be.

NOTE Confidence: 0.7792263005

00:42:14.970 --> 00:42:16.278
Whoops, yeah, you may just come.

NOTE Confidence: 0.822167082857143

00:42:18.440 --> 00:42:20.715
The output will be all identical and

NOTE Confidence: 0.822167082857143

00:42:20.715 --> 00:42:23.420
they'll be the minimum of exactly values,

NOTE Confidence: 0.822167082857143

00:42:23.420 --> 00:42:25.580
and they'll be one on one one in this case,

NOTE Confidence: 0.822167082857143

00:42:25.580 --> 00:42:27.490
and then you just extract

NOTE Confidence: 0.822167082857143

00:42:27.490 --> 00:42:29.018
whatever element it's because,

NOTE Confidence: 0.822167082857143

00:42:29.020 --> 00:42:31.120
Yep, OK, that's exactly right.

NOTE Confidence: 0.822167082857143

00:42:31.120 --> 00:42:35.467
That's interesting, so that's what this is.

NOTE Confidence: 0.822167082857143

00:42:35.470 --> 00:42:37.198
So this is let's go to the one for

NOTE Confidence: 0.822167082857143

00:42:37.198 --> 00:42:38.866
four because it's kind of easiest.

NOTE Confidence: 0.822167082857143

00:42:38.870 --> 00:42:40.634
That's a win if we're doing like

NOTE Confidence: 0.822167082857143

00:42:40.634 --> 00:42:42.569
what up to 16 bytes at a time.

NOTE Confidence: 0.822167082857143

00:42:42.570 --> 00:42:44.522
We only need like 4 swap or 4

NOTE Confidence: 0.822167082857143

00:42:44.522 --> 00:42:46.130
shuffles or something and minimums

NOTE Confidence: 0.822167082857143

00:42:46.130 --> 00:42:48.236
rather than it's always a win.

NOTE Confidence: 0.654509983333333

00:42:51.410 --> 00:42:53.306
Ohh cause no branches, it's branchless,

NOTE Confidence: 0.654509983333333

00:42:53.310 --> 00:42:55.190
no branches, no data dependencies.

NOTE Confidence: 0.654509983333333

00:42:55.190 --> 00:42:58.782
OK that's fancy OK so there may be

NOTE Confidence: 0.654509983333333

00:42:58.782 --> 00:43:01.210
some situations where it's not a

NOTE Confidence: 0.654509983333333

00:43:01.210 --> 00:43:03.679
win and I think the other thing.

NOTE Confidence: 0.654509983333333

00:43:03.679 --> 00:43:05.394
So actually that that's the.

NOTE Confidence: 0.932442942857143

00:43:07.540 --> 00:43:10.701
Yeah, so this is for 32 bit, so we do.

NOTE Confidence: 0.932442942857143

00:43:10.701 --> 00:43:13.687
Yeah, so ohh yeah. So we swapped

NOTE Confidence: 0.932442942857143

00:43:13.687 --> 00:43:16.140
the first two and then the 2nd 2.

NOTE Confidence: 0.932442942857143

00:43:16.140 --> 00:43:18.540
Each min shuffle hmin yeah.

NOTE Confidence: 0.932442942857143

00:43:18.540 --> 00:43:20.430
When we shuffle against itself.

NOTE Confidence: 0.932442942857143

00:43:20.430 --> 00:43:22.990
OK, this is very enlightening.

NOTE Confidence: 0.932442942857143

00:43:22.990 --> 00:43:24.030
Otherwise I would have looked

NOTE Confidence: 0.932442942857143

00:43:24.030 --> 00:43:25.070
at their shuffles like what?

NOTE Confidence: 0.932442942857143

00:43:25.070 --> 00:43:26.030
What are we doing here?

NOTE Confidence: 0.932442942857143

00:43:26.030 --> 00:43:26.666
So that's what's.

NOTE Confidence: 0.932442942857143

00:43:26.666 --> 00:43:29.950
And then, so here we're doing. Uhm?

NOTE Confidence: 0.90190954

00:43:32.010 --> 00:43:36.790
2301 Yeah, so it's just swapping, OK?

NOTE Confidence: 0.90190954

00:43:36.790 --> 00:43:39.590
Like it's just swapping sort of a halves

NOTE Confidence: 0.90190954

00:43:39.590 --> 00:43:41.980
of yeah OK, because they're in order.

NOTE Confidence: 0.842432673214286

00:43:44.180 --> 00:43:46.700
Yeah, this is and that also explains

NOTE Confidence: 0.842432673214286

00:43:46.700 --> 00:43:48.989
why the shuffles get smaller as you

NOTE Confidence: 0.842432673214286

00:43:48.989 --> 00:43:51.432
go down and and also to to point

NOTE Confidence: 0.842432673214286

00:43:51.432 --> 00:43:53.418
out this isn't an order right?

NOTE Confidence: 0.842432673214286

00:43:53.420 --> 00:43:55.835
Because so here we're starting

NOTE Confidence: 0.842432673214286

00:43:55.835 --> 00:43:58.960
with swapping the 32 bit values,

NOTE Confidence: 0.842432673214286

00:43:58.960 --> 00:44:02.572
but if you look up. At. What we do?

NOTE Confidence: 0.842432673214286

00:44:02.572 --> 00:44:05.011
Should we go back to sharing? Yeah,

NOTE Confidence: 0.842432673214286

00:44:05.011 --> 00:44:06.619
we should go back to sharing the screen.

NOTE Confidence: 0.61876996

00:44:09.240 --> 00:44:11.570
Can I reclaim your chair? Yeah,

NOTE Confidence: 0.61876996

00:44:11.570 --> 00:44:14.360
so but it just switched the camera over here.

NOTE Confidence: 0.61876996

00:44:14.360 --> 00:44:17.120
No, give me one second.

NOTE Confidence: 0.61876996

00:44:17.120 --> 00:44:20.574
So yeah, so if we look at for the first one,

NOTE Confidence: 0.61876996

00:44:20.574 --> 00:44:24.118
then we do the same thing As for 32 bit.

NOTE Confidence: 0.61876996

00:44:24.120 --> 00:44:25.842
And then we do the words

NOTE Confidence: 0.61876996

00:44:25.842 --> 00:44:27.800
and then we do the bites.

NOTE Confidence: 0.61876996

00:44:27.800 --> 00:44:28.760
So we're kind of doing

NOTE Confidence: 0.61876996

00:44:28.760 --> 00:44:29.720
things in a different order,

NOTE Confidence: 0.61876996

00:44:29.720 --> 00:44:31.298
but the order doesn't actually matter,

NOTE Confidence: 0.61876996

00:44:31.300 --> 00:44:33.784
because because the shuffles are order

NOTE Confidence: 0.61876996

00:44:33.784 --> 00:44:35.312
independence, they're essentially,

NOTE Confidence: 0.61876996

00:44:35.312 --> 00:44:37.901
is that right? Alright, no well,

NOTE Confidence: 0.61876996

00:44:37.901 --> 00:44:40.739
as long as you hit each element right min.

NOTE Confidence: 0.61876996

00:44:40.740 --> 00:44:46.273
Kind of. Doing man of men of something right?

NOTE Confidence: 0.61876996

00:44:46.273 --> 00:44:49.860
You just add the something to the big.

NOTE Confidence: 0.61876996

00:44:49.860 --> 00:44:52.050
You know the big man?

NOTE Confidence: 0.917916862

00:44:54.260 --> 00:44:55.716
OK yeah, let's switch.

NOTE Confidence: 0.917916862

00:44:55.716 --> 00:44:57.718
OK, I I now feel prepared to follow

NOTE Confidence: 0.917916862

00:44:57.718 --> 00:44:59.389
along with the rest of your code.

NOTE Confidence: 0.917916862

00:44:59.390 --> 00:45:00.330
If you the camera.

NOTE Confidence: 0.827481105

00:45:02.910 --> 00:45:05.988
Yeah, let's see, so there's some.

NOTE Confidence: 0.822892722857143

00:45:09.100 --> 00:45:11.109
Yeah, so and then for this uh,

NOTE Confidence: 0.822892722857143

00:45:11.110 --> 00:45:13.374
let's see. So I looked at it and.

NOTE Confidence: 0.6712797025

00:45:17.820 --> 00:45:23.268
So the sets. So these I think have.

NOTE Confidence: 0.46182129

00:45:29.490 --> 00:45:33.716
Intels intrinsics. Intrinsic.

NOTE Confidence: 0.46182129

00:45:33.716 --> 00:45:36.760
Talks aren't that good, but.

NOTE Confidence: 0.932866974

00:45:40.530 --> 00:45:41.630
Which one is it using?

NOTE Confidence: 0.09831017

00:45:45.230 --> 00:45:45.730
Umm?

NOTE Confidence: 0.654756518571429

00:45:55.090 --> 00:45:56.500
This is said that the

NOTE Confidence: 0.654756518571429

00:45:56.500 --> 00:45:57.780
eight right? Yeah, right.

NOTE Confidence: 0.68648481

00:46:00.520 --> 00:46:01.630
So there's.

NOTE Confidence: 0.58192609

00:46:05.580 --> 00:46:06.660
Yeah, yeah.

NOTE Confidence: 0.708510922

00:46:09.230 --> 00:46:11.820
Yeah, Intel has like, uh,

NOTE Confidence: 0.708510922

00:46:11.820 --> 00:46:13.548
three point latency statistics

NOTE Confidence: 0.708510922

00:46:13.548 --> 00:46:17.190
on that page, but they're like.

NOTE Confidence: 0.708510922

00:46:17.190 --> 00:46:20.660
Little dubious. Umm?

NOTE Confidence: 0.708510922

00:46:20.660 --> 00:46:22.185
And obviously like you can

NOTE Confidence: 0.708510922

00:46:22.185 --> 00:46:25.050
have an instruction that, uh.

NOTE Confidence: 0.708510922

00:46:25.050 --> 00:46:27.426
It's like has more latency than

NOTE Confidence: 0.708510922

00:46:27.426 --> 00:46:29.456
you'd expect because the the

NOTE Confidence: 0.708510922

00:46:29.456 --> 00:46:31.530
the resources are just utilized.

NOTE Confidence: 0.886538178235294

00:46:33.750 --> 00:46:36.756
Yeah, so I think in some of these there's

NOTE Confidence: 0.886538178235294

00:46:36.756 --> 00:46:39.277
like one or two cycles at the end.

NOTE Confidence: 0.886538178235294

00:46:39.280 --> 00:46:42.297
That we could stick something in and

NOTE Confidence: 0.886538178235294

00:46:42.297 --> 00:46:45.960
that are. And where the next instruction?

NOTE Confidence: 0.886538178235294

00:46:45.960 --> 00:46:50.136
Is dependent. On on this funct.

NOTE Confidence: 0.886538178235294

00:46:50.136 --> 00:46:53.442
Ohh yeah funk is so that it

NOTE Confidence: 0.886538178235294

00:46:53.442 --> 00:46:56.087
can do minimum and maximum.

NOTE Confidence: 0.886538178235294

00:46:56.090 --> 00:46:58.920
And. You know how is this?

NOTE Confidence: 0.886538178235294

00:46:58.920 --> 00:47:00.810
Was that templated on ideas.

NOTE Confidence: 0.886538178235294

00:47:00.810 --> 00:47:03.540
OK, so we're using a.

NOTE Confidence: 0.886538178235294

00:47:03.540 --> 00:47:07.320
A function object as a template parameter.

NOTE Confidence: 0.886538178235294

00:47:07.320 --> 00:47:12.169
OK, yeah, it returns right. So H funct.

NOTE Confidence: 0.886538178235294

00:47:12.170 --> 00:47:16.965
Is this? And then the actual things.

NOTE Confidence: 0.886538178235294

00:47:16.970 --> 00:47:18.210
It's not a functional object.

NOTE Confidence: 0.886538178235294

00:47:18.210 --> 00:47:20.289
It's a Lambda. OK, I guess is a function.

NOTE Confidence: 0.886538178235294

00:47:20.290 --> 00:47:21.814
A Lambda is a function object

NOTE Confidence: 0.886538178235294

00:47:21.814 --> 00:47:22.830
that the compiler makes.

NOTE Confidence: 0.886538178235294

00:47:22.830 --> 00:47:25.278
Yeah, OK, that's that's that's nice.

NOTE Confidence: 0.886538178235294

00:47:25.280 --> 00:47:27.269
I mean it's.

NOTE Confidence: 0.886538178235294

00:47:27.270 --> 00:47:28.220
Reducing the amount of code

NOTE Confidence: 0.886538178235294

00:47:28.220 --> 00:47:29.460
we have to read by three,

NOTE Confidence: 0.886538178235294

00:47:29.460 --> 00:47:31.200
so that's very much appreciated.

NOTE Confidence: 0.886538178235294

00:47:31.200 --> 00:47:32.418
Yes, if only we could do

NOTE Confidence: 0.886538178235294

00:47:32.418 --> 00:47:33.669
the rest with all the 816.

NOTE Confidence: 0.886538178235294

00:47:33.670 --> 00:47:36.586
There's also some differences for eight,

NOTE Confidence: 0.886538178235294

00:47:36.590 --> 00:47:41.107
OK for 64 bit. Uh,

NOTE Confidence: 0.886538178235294

00:47:41.107 --> 00:47:45.780
the appropriate instruction is a the X512.

NOTE Confidence: 0.886538178235294

00:47:45.780 --> 00:47:47.960
Thanks Intel.

NOTE Confidence: 0.886538178235294

00:47:47.960 --> 00:47:48.539
Where is it?

NOTE Confidence: 0.877010913

00:47:52.560 --> 00:47:56.870
Yeah. Yeah, so men, so here this is 32 bit.

NOTE Confidence: 0.877010913

00:47:56.870 --> 00:48:00.158
We're using M min API 32 which is.

NOTE Confidence: 0.57389964

00:48:03.730 --> 00:48:09.200
So you see Mm-hmm so DPM Inc.

NOTE Confidence: 0.57389964

00:48:09.200 --> 00:48:14.135
Is AVX 512 and we're doing so?

NOTE Confidence: 0.57389964

00:48:14.140 --> 00:48:18.238
Yeah, so MNE PI32 as wow.

NOTE Confidence: 0.57389964

00:48:18.238 --> 00:48:20.870
That's been a lot of like anyway.

NOTE Confidence: 0.80046158

00:48:23.250 --> 00:48:25.210
On instruction latency, but then

NOTE Confidence: 0.80046158

00:48:25.210 --> 00:48:28.630
for 64 bit we do. Some blends.

NOTE Confidence: 0.859940328571429

00:48:31.400 --> 00:48:34.130
Yeah we do and then blend the.

NOTE Confidence: 0.859940328571429

00:48:34.130 --> 00:48:39.008
What is a blend? Is that combine 2

NOTE Confidence: 0.859940328571429

00:48:39.008 --> 00:48:41.830
vector registers with the one? Yeah.

NOTE Confidence: 0.5057524375

00:48:46.490 --> 00:48:49.576
Uh, using a mask, which

NOTE Confidence: 0.5057524375

00:48:49.576 --> 00:48:51.250
one is it? It's API, yeah.

NOTE Confidence: 0.9513912

00:48:53.770 --> 00:48:53.950
UM?

NOTE Confidence: 0.9000909125

00:49:02.120 --> 00:49:07.230
Yeah, so it it it has a mask of.

NOTE Confidence: 0.9000909125

00:49:07.230 --> 00:49:11.460
M128 mask. And the top bit.

NOTE Confidence: 0.9000909125

00:49:11.460 --> 00:49:15.954
Of the most significant bit of each.

NOTE Confidence: 0.9000909125

00:49:15.960 --> 00:49:19.968
Byte in that mask vector determines

NOTE Confidence: 0.9000909125

00:49:19.970 --> 00:49:21.962
which which source vector.

NOTE Confidence: 0.9000909125

00:49:21.962 --> 00:49:24.452
The value will will come,

NOTE Confidence: 0.9000909125

00:49:24.460 --> 00:49:26.891
will be taken from OK, so it doesn't

NOTE Confidence: 0.9000909125

00:49:26.891 --> 00:49:27.879
combine the integers themselves,

NOTE Confidence: 0.9000909125

00:49:27.880 --> 00:49:29.917
but you do get an arbitrarily pick,

NOTE Confidence: 0.9000909125

00:49:29.920 --> 00:49:31.852
which might you're taking from each

NOTE Confidence: 0.9000909125

00:49:31.852 --> 00:49:33.679
vector register based on the mask.

NOTE Confidence: 0.9000909125

00:49:33.680 --> 00:49:34.796
OK, right? Yeah,

NOTE Confidence: 0.9000909125

00:49:34.796 --> 00:49:38.559
and the reason the mask is a whole vector,

NOTE Confidence: 0.9000909125

00:49:38.560 --> 00:49:43.060
like for for the comparison instruction.

NOTE Confidence: 0.9000909125

00:49:43.060 --> 00:49:45.778
The result is a vector where.

NOTE Confidence: 0.9000909125

00:49:45.780 --> 00:49:47.830
No, the the passing comparisons

NOTE Confidence: 0.9000909125

00:49:47.830 --> 00:49:49.880
are set to all one.

NOTE Confidence: 0.723957685555556

00:49:52.780 --> 00:49:54.055
Passing comparisons, yeah,

NOTE Confidence: 0.723957685555556

00:49:54.055 --> 00:49:57.192
so like if it's a greater, less than.

NOTE Confidence: 0.723957685555556

00:49:57.192 --> 00:49:58.938
Yeah, it's less than the ones.

NOTE Confidence: 0.723957685555556

00:49:58.940 --> 00:50:01.306
Yeah, OK, I see the the result

NOTE Confidence: 0.723957685555556

00:50:01.306 --> 00:50:02.810
is like 11111 and then just

NOTE Confidence: 0.723957685555556

00:50:02.810 --> 00:50:04.317
means OK this whole byte was less

NOTE Confidence: 0.723957685555556

00:50:04.317 --> 00:50:05.800
than this whole other byte, OK?

NOTE Confidence: 0.724872759

00:50:08.510 --> 00:50:10.730
So because I I'm imagining uses

NOTE Confidence: 0.724872759

00:50:10.730 --> 00:50:12.210
these vector instructions often,

NOTE Confidence: 0.724872759

00:50:12.210 --> 00:50:14.010
find it useful to have ones in all positions.

NOTE Confidence: 0.724872759

00:50:14.010 --> 00:50:15.648
So rather than requiring more vector

NOTE Confidence: 0.724872759

00:50:15.648 --> 00:50:17.510
instructions to spit out additional ones,

NOTE Confidence: 0.724872759

00:50:17.510 --> 00:50:19.925
or like sort of widen those ones.

NOTE Confidence: 0.724872759

00:50:19.930 --> 00:50:24.039
Yeah, and there are, there are instructions

NOTE Confidence: 0.724872759

00:50:24.039 --> 00:50:26.598
to especially narrow the ones.

NOTE Confidence: 0.724872759

00:50:26.598 --> 00:50:29.658
OK, so you go from a massive

NOTE Confidence: 0.724872759

00:50:29.658 --> 00:50:32.320
vector to a mask integer.

NOTE Confidence: 0.724872759

00:50:32.320 --> 00:50:36.536
Or a mask scalar that's a bit field.

NOTE Confidence: 0.724872759

00:50:36.540 --> 00:50:39.410
Uhm, yeah, that's very useful to that.

NOTE Confidence: 0.724872759

00:50:39.410 --> 00:50:41.354
Alright? So this is dealing with the wrapper.

NOTE Confidence: 0.724872759

00:50:41.360 --> 00:50:43.730
Ohh, the reason we have have

NOTE Confidence: 0.724872759

00:50:43.730 --> 00:50:48.330
portion Max is for for for 8. Uhm?

NOTE Confidence: 0.724872759

00:50:48.330 --> 00:50:50.493
OK, so has portion Max is essentially

NOTE Confidence: 0.724872759

00:50:50.493 --> 00:50:52.721
the the case where we can't just

NOTE Confidence: 0.724872759

00:50:52.721 --> 00:50:54.968
consume the whole input all in one

NOTE Confidence: 0.724872759

00:50:54.968 --> 00:50:56.930
class because we could run these.

NOTE Confidence: 0.724872759

00:50:56.930 --> 00:50:58.982
Yeah and we can always consume

NOTE Confidence: 0.724872759

00:50:58.982 --> 00:51:00.348
the whole input, right?

NOTE Confidence: 0.724872759

00:51:00.348 --> 00:51:02.376
That's because the elements are so

NOTE Confidence: 0.724872759

00:51:02.376 --> 00:51:04.579
large that we have so few elements

NOTE Confidence: 0.724872759

00:51:04.579 --> 00:51:06.770
that we can always fit in size 2.

NOTE Confidence: 0.724872759

00:51:06.770 --> 00:51:08.786
So for for my own enlightenment,

NOTE Confidence: 0.724872759

00:51:08.790 --> 00:51:10.590
can you look at the traits for four?

NOTE Confidence: 0.724872759

00:51:10.590 --> 00:51:11.970
Did we get an X?

NOTE Confidence: 0.724872759

00:51:11.970 --> 00:51:15.012
Do we get an architecture bitness

NOTE Confidence: 0.724872759

00:51:15.012 --> 00:51:17.640
dependency on portion mask masks?

NOTE Confidence: 0.724872759

00:51:17.640 --> 00:51:20.496
That's two, yeah we do indeed.

NOTE Confidence: 0.724872759

00:51:20.500 --> 00:51:21.040
OK great.

NOTE Confidence: 0.724872759

00:51:21.040 --> 00:51:22.390
So this this corresponds to

NOTE Confidence: 0.724872759

00:51:22.390 --> 00:51:23.640
what I would expect.

NOTE Confidence: 0.724872759

00:51:23.640 --> 00:51:24.748
OK, OK,

NOTE Confidence: 0.724872759

00:51:24.748 --> 00:51:28.434
and then the portion is 1 bigger

NOTE Confidence: 0.724872759

00:51:28.434 --> 00:51:32.140
than or exactly 2 to the 32 OK?

NOTE Confidence: 0.724872759

00:51:32.140 --> 00:51:35.640
That that that aligns with my understand.

NOTE Confidence: 0.724872759

00:51:35.640 --> 00:51:36.076
Ohh yeah,

NOTE Confidence: 0.724872759

00:51:36.076 --> 00:51:36.730
that's a bit.

NOTE Confidence: 0.696311188235294

00:51:39.580 --> 00:51:42.140
Yeah, they could have been written as one

NOTE Confidence: 0.696311188235294

00:51:42.140 --> 00:51:44.635
left shift or one UL left shift 30 yeah,

NOTE Confidence: 0.696311188235294

00:51:44.640 --> 00:51:45.600
but I'm part of that too.

NOTE Confidence: 0.696311188235294

00:51:45.600 --> 00:51:49.000
Yeah someone's nice, nicer net

NOTE Confidence: 0.696311188235294

00:51:49.000 --> 00:51:51.580
that we have digit separators we

NOTE Confidence: 0.696311188235294

00:51:51.655 --> 00:51:56.010
ever live without. Yeah so. Yeah.

NOTE Confidence: 0.925941735

00:51:58.460 --> 00:51:58.970
Let's see.

NOTE Confidence: 0.738650415

00:52:02.080 --> 00:52:04.400
Max portion size is.

NOTE Confidence: 0.87090397125

00:52:13.290 --> 00:52:16.778
Right, because we do four in one go.

NOTE Confidence: 0.87090397125

00:52:16.780 --> 00:52:19.940
And I think the the indices are indices

NOTE Confidence: 0.87090397125

00:52:19.940 --> 00:52:24.210
into the vertical. OK, so. It's.

NOTE Confidence: 0.78531849

00:52:26.290 --> 00:52:29.930
It's indices into these into these vectors.

NOTE Confidence: 0.78531849

00:52:29.930 --> 00:52:32.145
OK, realize I'm pointing at

NOTE Confidence: 0.78531849

00:52:32.145 --> 00:52:34.556
something that nobody can see,

NOTE Confidence: 0.78531849

00:52:34.556 --> 00:52:38.322
but pointing out that the matrix of.

NOTE Confidence: 0.78531849

00:52:38.330 --> 00:52:41.048
That sort of stacked input vectors.

NOTE Confidence: 0.78531849

00:52:41.050 --> 00:52:42.970
OK, yeah, why is it?

NOTE Confidence: 0.78531849

00:52:42.970 --> 00:52:44.530
Why is it multiplied by 16?

NOTE Confidence: 0.78531849

00:52:44.530 --> 00:52:45.450
Or is that 16 coming?

NOTE Confidence: 0.6186357433

00:52:52.960 --> 00:52:53.936
Let's see this, oh,

NOTE Confidence: 0.6186357433

00:52:53.936 --> 00:52:55.400
this is the general minmax element,

NOTE Confidence: 0.6186357433

00:52:55.400 --> 00:52:57.380
so we don't have any.

NOTE Confidence: 0.6186357433

00:52:57.380 --> 00:52:59.837
We don't have any size dependency yet,

NOTE Confidence: 0.6186357433

00:52:59.840 --> 00:53:01.950
but it's saying that since

NOTE Confidence: 0.6186357433

00:53:01.950 --> 00:53:04.060
we're working with 16 byte.

NOTE Confidence: 0.6186357433

00:53:04.060 --> 00:53:07.372
Chunks that portion Max is the

NOTE Confidence: 0.6186357433

00:53:07.372 --> 00:53:10.052
number of portions we can consume.

NOTE Confidence: 0.6186357433

00:53:10.052 --> 00:53:13.256
So times 16 is the number of bytes.

NOTE Confidence: 0.6186357433

00:53:13.256 --> 00:53:16.182
Is that right, yeah. OK, OK,

NOTE Confidence: 0.6186357433

00:53:16.182 --> 00:53:18.540
and a portion size is indeed a byte line.

NOTE Confidence: 0.6186357433

00:53:18.540 --> 00:53:24.250
Yes, OK. Ohh yeah so. Yeah.

NOTE Confidence: 0.6186357433

00:53:24.250 --> 00:53:25.528
OK, I really like the name

NOTE Confidence: 0.6186357433

00:53:25.528 --> 00:53:26.850
byte length for the function.

NOTE Confidence: 0.6186357433

00:53:26.850 --> 00:53:29.290
I don't know if I like the name

NOTE Confidence: 0.6186357433

00:53:29.290 --> 00:53:31.639
portion size so much because the the.

NOTE Confidence: 0.6186357433

00:53:31.640 --> 00:53:33.760
The question is like interpretation.

NOTE Confidence: 0.6186357433

00:53:33.760 --> 00:53:35.065
There's a very strong assumption

NOTE Confidence: 0.6186357433

00:53:35.065 --> 00:53:37.010
in the STL that when we see size,

NOTE Confidence: 0.6186357433

00:53:37.010 --> 00:53:38.000
we're counting elements.

NOTE Confidence: 0.6186357433

00:53:38.000 --> 00:53:39.980
And if anybody's talking about bytes,

NOTE Confidence: 0.6186357433

00:53:39.980 --> 00:53:42.836
they really need to say bytes up front.

NOTE Confidence: 0.6186357433

00:53:42.840 --> 00:53:44.720
So that's why I love seeing Bike lane.

NOTE Confidence: 0.6186357433

00:53:44.720 --> 00:53:48.726
But portion size is like portion bite,

NOTE Confidence: 0.6186357433

00:53:48.726 --> 00:53:50.938
size, more self explanatory.

NOTE Confidence: 0.6186357433

00:53:50.940 --> 00:53:52.578
Better to err on the side of

NOTE Confidence: 0.6186357433

00:53:52.580 --> 00:53:54.224
being a little bit too verbose

NOTE Confidence: 0.6186357433

00:53:54.224 --> 00:53:55.320
and constantly saying right,

NOTE Confidence: 0.6186357433

00:53:55.320 --> 00:53:58.210
because the danger of not.

NOTE Confidence: 0.6186357433

00:53:58.210 --> 00:53:58.676
Saying so,

NOTE Confidence: 0.6186357433

00:53:58.676 --> 00:54:01.000
I don't know where else needs to be renamed.

NOTE Confidence: 0.15306267

00:54:03.590 --> 00:54:06.300
Well. Umm?

NOTE Confidence: 0.444742362

00:54:08.460 --> 00:54:12.320
And because Max portion size.

NOTE Confidence: 0.444742362

00:54:12.320 --> 00:54:14.785
Or put Gates portion maxes

NOTE Confidence: 0.444742362

00:54:14.785 --> 00:54:16.018
elements exactly exactly.

NOTE Confidence: 0.444742362

00:54:16.018 --> 00:54:17.863
Yeah, portion Max is elements

NOTE Confidence: 0.444742362

00:54:17.863 --> 00:54:20.132
and then Max portion size is

NOTE Confidence: 0.444742362

00:54:20.132 --> 00:54:22.094
talking about fights then that is.

NOTE Confidence: 0.444742362

00:54:22.094 --> 00:54:23.329
That is very very easy.

NOTE Confidence: 0.819540545

00:54:34.050 --> 00:54:35.080
It is essentially what we're

NOTE Confidence: 0.819540545

00:54:35.080 --> 00:54:36.649
trying to make up for with naming.

NOTE Confidence: 0.819540545

00:54:36.650 --> 00:54:38.666
Here it is the lack of unit system.

NOTE Confidence: 0.819540545

00:54:38.670 --> 00:54:39.990
We're converting between units

NOTE Confidence: 0.819540545

00:54:39.990 --> 00:54:41.970
of elements and units of bytes,

NOTE Confidence: 0.819540545

00:54:41.970 --> 00:54:45.698
and we don't want our spacecraft to crash

NOTE Confidence: 0.819540545

00:54:45.698 --> 00:54:49.140
because we screw up the units. Yes.

NOTE Confidence: 0.86511514

00:54:55.350 --> 00:54:56.820
OK, this is making more sense

NOTE Confidence: 0.86511514

00:54:56.820 --> 00:54:58.093
now that I'm understanding the

NOTE Confidence: 0.86511514

00:54:58.093 --> 00:54:59.298
terminology and so then yeah,

NOTE Confidence: 0.86511514

00:54:59.300 --> 00:55:00.716
and then we just truncate it off so

NOTE Confidence: 0.86511514

00:55:00.716 --> 00:55:02.350
that we do the right number of things.

NOTE Confidence: 0.86511514

00:55:02.350 --> 00:55:08.210
OK, then we advance. Ohm knowing if I stuff.

NOTE Confidence: 0.86511514

00:55:08.210 --> 00:55:10.990
We load the first chunk.

NOTE Confidence: 0.86511514

00:55:10.990 --> 00:55:15.450
Load U, that's, uh unaligned load. Uhm?

NOTE Confidence: 0.97096753

00:55:20.750 --> 00:55:24.916
Yeah. And we do the sign correction.

NOTE Confidence: 0.97096753

00:55:24.920 --> 00:55:27.896
Uhm? We initialize the

NOTE Confidence: 0.97096753

00:55:27.896 --> 00:55:29.606
minimum values to the current.

NOTE Confidence: 0.97096753

00:55:29.610 --> 00:55:31.598
The minimum maximum values

NOTE Confidence: 0.97096753

00:55:31.598 --> 00:55:33.586
to that first chunk.

NOTE Confidence: 0.97096753

00:55:33.590 --> 00:55:34.694
Because they're, by definition,

NOTE Confidence: 0.97096753

00:55:34.694 --> 00:55:36.074
the best known so far.

NOTE Confidence: 0.97096753

00:55:36.080 --> 00:55:38.270
Yes, and then we initialize the

NOTE Confidence: 0.97096753

00:55:38.270 --> 00:55:40.656
current indexes current indices to 0

NOTE Confidence: 0.97096753

00:55:40.656 --> 00:55:42.726
because that's the current indices.

NOTE Confidence: 0.75897828125

00:55:45.260 --> 00:55:47.804
OK, it's in. It's a chunk index basically,

NOTE Confidence: 0.75897828125

00:55:47.810 --> 00:55:51.182
so they're all at the same yes,

NOTE Confidence: 0.75897828125

00:55:51.182 --> 00:55:52.746
or alternatively,

NOTE Confidence: 0.75897828125

00:55:52.746 --> 00:55:56.656
a vertical index vertical OK.

NOTE Confidence: 0.75897828125

00:55:56.660 --> 00:55:59.092
Yeah, so I see cause I see vertical

NOTE Confidence: 0.75897828125

00:55:59.092 --> 00:56:00.875
comes from thinking of it as

NOTE Confidence: 0.75897828125

00:56:00.875 --> 00:56:02.940
a matrix when I think so yeah,

NOTE Confidence: 0.75897828125

00:56:02.940 --> 00:56:04.636
instead of writing the whole vector out on

NOTE Confidence: 0.75897828125

00:56:04.636 --> 00:56:06.437
a single line like I do when I'm writing,

NOTE Confidence: 0.75897828125

00:56:06.440 --> 00:56:07.852
you know linear vector.

NOTE Confidence: 0.75897828125

00:56:07.852 --> 00:56:09.970
You're just sort of wrap around

NOTE Confidence: 0.75897828125

00:56:10.038 --> 00:56:12.026
and now you write one line per.

NOTE Confidence: 0.75897828125

00:56:12.030 --> 00:56:14.256
16 by chunk basically, and then,

NOTE Confidence: 0.75897828125

00:56:14.260 --> 00:56:15.470
the vertical index is OK.

NOTE Confidence: 0.75897828125

00:56:15.470 --> 00:56:17.350
What row are we on?

NOTE Confidence: 0.75897828125

00:56:17.350 --> 00:56:18.848
OK, that that makes sense that I

NOTE Confidence: 0.75897828125

00:56:18.848 --> 00:56:20.142
was confused why at first you're

NOTE Confidence: 0.75897828125

00:56:20.142 --> 00:56:21.784
writing it as a matrix and but now

NOTE Confidence: 0.75897828125

00:56:21.784 --> 00:56:23.440
it makes a lot more sense, yes?

NOTE Confidence: 0.761447356666667

00:56:25.520 --> 00:56:27.536
Oh yeah, and then we enter an infinite loop.

NOTE Confidence: 0.761447356666667

00:56:27.540 --> 00:56:30.770
It's not actually infinite loop.

NOTE Confidence: 0.761447356666667

00:56:30.770 --> 00:56:33.227
Let's see. So let's see what do we do?

NOTE Confidence: 0.761447356666667

00:56:33.230 --> 00:56:35.085
Stop at yeah, so that's the end.

NOTE Confidence: 0.761447356666667

00:56:35.090 --> 00:56:38.294
And then we advance the first by one vector.

NOTE Confidence: 0.761447356666667

00:56:38.300 --> 00:56:40.710
And we increment our indices.

NOTE Confidence: 0.761447356666667

00:56:40.710 --> 00:56:42.068
So increase all of them at once.

NOTE Confidence: 0.898790305

00:56:45.730 --> 00:56:47.662
So this first condition is if

NOTE Confidence: 0.898790305

00:56:47.662 --> 00:56:49.218
we're done, so let's skip that.

NOTE Confidence: 0.65033454

00:56:51.660 --> 00:56:53.680
UM? Let's see.

NOTE Confidence: 0.7323282875

00:57:00.130 --> 00:57:01.118
Timeline times like this

NOTE Confidence: 0.7323282875

00:57:01.118 --> 00:57:02.106
that I really appreciate.

NOTE Confidence: 0.7323282875

00:57:02.110 --> 00:57:03.664
Like VS codes code code folding

NOTE Confidence: 0.7323282875

00:57:03.664 --> 00:57:05.392
the yeah they all they added

NOTE Confidence: 0.7323282875

00:57:05.392 --> 00:57:07.294
colors nice yeah so yeah the

NOTE Confidence: 0.7323282875

00:57:07.294 --> 00:57:08.570
bracket colorization is awesome.

NOTE Confidence: 0.7323282875

00:57:08.570 --> 00:57:12.314
Yeah well so then we load our next.

NOTE Confidence: 0.890914563333333

00:57:15.590 --> 00:57:18.800
Our next set of of of things and up at

NOTE Confidence: 0.890914563333333

00:57:18.893 --> 00:57:22.110
the top. We initialized. Yes, yeah,

NOTE Confidence: 0.890914563333333

00:57:22.110 --> 00:57:26.540
we initialize the minimum values to that.

NOTE Confidence: 0.820401857222222

00:57:31.890 --> 00:57:33.265
Might be able to squeeze

NOTE Confidence: 0.820401857222222

00:57:33.265 --> 00:57:34.365
some exercycles out there,

NOTE Confidence: 0.820401857222222

00:57:34.370 --> 00:57:37.030
not repeat the work, but. Umm?

NOTE Confidence: 0.839037342857143

00:57:39.570 --> 00:57:40.788
I don't really have a problem with.

NOTE Confidence: 0.821787

00:57:45.640 --> 00:57:46.060
Yeah alright.

NOTE Confidence: 0.925952942

00:57:49.670 --> 00:57:51.754
Yeah, so then we.

NOTE Confidence: 0.925952942

00:57:51.754 --> 00:57:55.030
If we're in a minimum mode. UM?

NOTE Confidence: 0.782536127272727

00:57:57.220 --> 00:58:00.027
This is not equals to zero is

NOTE Confidence: 0.782536127272727

00:58:00.027 --> 00:58:01.630
apparently a compiler bug.

NOTE Confidence: 0.782536127272727

00:58:01.630 --> 00:58:03.350
When it raises a warning,

NOTE Confidence: 0.782536127272727

00:58:03.350 --> 00:58:06.010
if you do that flag style thing,

NOTE Confidence: 0.782536127272727

00:58:06.010 --> 00:58:08.510
and if context per interesting,

NOTE Confidence: 0.782536127272727

00:58:08.510 --> 00:58:10.150
what warning does it emit?

NOTE Confidence: 0.782536127272727

00:58:10.150 --> 00:58:13.920
Uh, see 40 it's. Like

NOTE Confidence: 0.815220324285714

00:58:16.180 --> 00:58:19.449
comparison is not a bull or something.

NOTE Confidence: 0.815220324285714

00:58:19.450 --> 00:58:22.320
It's some W4 warning that

NOTE Confidence: 0.815220324285714

00:58:22.320 --> 00:58:24.616
we don't suppress interest.

NOTE Confidence: 0.815220324285714

00:58:24.620 --> 00:58:26.360
Because elsewhere we've directly tested.

NOTE Confidence: 0.815220324285714

00:58:26.360 --> 00:58:27.272
I mean, it's not.

NOTE Confidence: 0.815220324285714

00:58:27.272 --> 00:58:27.956
I'm not actually.

NOTE Confidence: 0.815220324285714

00:58:27.960 --> 00:58:31.048
This one is superfluous.

NOTE Confidence: 0.815220324285714

00:58:31.050 --> 00:58:32.000
That's horrific.

NOTE Confidence: 0.76840885

00:58:34.610 --> 00:58:34.980
That's it.

NOTE Confidence: 0.73487255

00:58:53.710 --> 00:58:56.410
Else find the estl we've been

NOTE Confidence: 0.73487255

00:58:56.410 --> 00:58:58.685
able to directly test the

NOTE Confidence: 0.73487255

00:58:58.685 --> 00:59:01.010
results of wise and on them.

NOTE Confidence: 0.85185950375

00:59:03.370 --> 00:59:04.798
Directly, I've never been

NOTE Confidence: 0.85185950375

00:59:04.798 --> 00:59:06.226
super comfortable with it,

NOTE Confidence: 0.85185950375

00:59:06.230 --> 00:59:07.665
but for you know it seems reasonable.

NOTE Confidence: 0.918874633333333

00:59:23.690 --> 00:59:24.869
All right so.

NOTE Confidence: 0.7495379575

00:59:28.790 --> 00:59:32.190
If this is a foreign Max only mode.

NOTE Confidence: 0.7495379575

00:59:32.190 --> 00:59:34.605
Uh, than we do, yeah OK so.

NOTE Confidence: 0.779181574285714

00:59:36.830 --> 00:59:42.040
Is last we do a greater than? UM?

NOTE Confidence: 0.779181574285714

00:59:42.040 --> 00:59:45.496
Between minimum and and current value.

NOTE Confidence: 0.779181574285714

00:59:45.500 --> 00:59:50.036
Uhm, and for Max we flip it.

NOTE Confidence: 0.779181574285714

00:59:50.040 --> 00:59:52.780
UM, and then we do, UM.

NOTE Confidence: 0.706855642

01:00:18.180 --> 01:00:20.670
Ohh this is yeah OK.

NOTE Confidence: 0.706855642

01:00:20.670 --> 01:00:22.608
Why, why we're doing naughties less?

NOTE Confidence: 0.706855642

01:00:22.610 --> 01:00:27.250
Why is UM greater than being used here?

NOTE Confidence: 0.706855642

01:00:27.250 --> 01:00:29.488
It's just stylistic.

NOTE Confidence: 0.706855642

01:00:29.490 --> 01:00:35.340
Yeah, that's I think, let's see.

NOTE Confidence: 0.706855642

01:00:35.340 --> 01:00:37.216
Uh, there's E here and there's GT,

NOTE Confidence: 0.706855642

01:00:37.220 --> 01:00:40.270
But there's not Lt yeah.

NOTE Confidence: 0.706855642

01:00:40.270 --> 01:00:41.340
Let's see if there is.

NOTE Confidence: 0.728605065

01:00:44.260 --> 01:00:49.550
Yeah, you one could use Lt. UM?

NOTE Confidence: 0.728605065

01:00:49.550 --> 01:00:52.063
Yeah, I find that surprising only because

NOTE Confidence: 0.728605065

01:00:52.063 --> 01:00:54.609
the STL has a historical convention

NOTE Confidence: 0.728605065

01:00:54.609 --> 01:00:56.939
of really preferring less than.

NOTE Confidence: 0.728605065

01:00:56.940 --> 01:00:59.352
So so to see a greater than being used.

NOTE Confidence: 0.728605065

01:00:59.360 --> 01:01:01.922
I don't mind that here because it's

NOTE Confidence: 0.728605065

01:01:01.922 --> 01:01:06.478
the like vector code and. The sort of.

NOTE Confidence: 0.728605065

01:01:06.478 --> 01:01:09.450
Delegate to less that you only have to

NOTE Confidence: 0.728605065

01:01:09.450 --> 01:01:11.795
implement less doesn't really apply.

NOTE Confidence: 0.728605065

01:01:11.800 --> 01:01:13.950
Ohh yeah, I mean I would be fine with seeing

NOTE Confidence: 0.728605065

01:01:14.003 --> 01:01:16.007
breathlessly and greater than being used.

NOTE Confidence: 0.728605065

01:01:16.010 --> 01:01:18.420
I find it surprising that.

NOTE Confidence: 0.728605065

01:01:18.420 --> 01:01:19.686
One would be used and would

NOTE Confidence: 0.728605065

01:01:19.686 --> 01:01:21.060
happen to be greater than right?

NOTE Confidence: 0.728605065

01:01:21.060 --> 01:01:22.700
I think I see why because you don't need to.

NOTE Confidence: 0.728605065

01:01:22.700 --> 01:01:25.058
Yeah, both the traits but the

NOTE Confidence: 0.728605065

01:01:25.060 --> 01:01:28.760
yeah and also you don't like.

NOTE Confidence: 0.797950370909091

01:01:31.050 --> 01:01:32.544
You're also not doing like you're

NOTE Confidence: 0.797950370909091

01:01:32.544 --> 01:01:33.810
not saying not greater than,

NOTE Confidence: 0.797950370909091

01:01:33.810 --> 01:01:35.890
you're just flipping the the

NOTE Confidence: 0.797950370909091

01:01:35.890 --> 01:01:37.554
order of parameters around.

NOTE Confidence: 0.797950370909091

01:01:37.560 --> 01:01:38.828
Later on, so yeah,

NOTE Confidence: 0.797950370909091

01:01:38.828 --> 01:01:41.759
so you can get less from greater, yeah?

NOTE Confidence: 0.797950370909091

01:01:41.759 --> 01:01:43.913
But I still find it very

NOTE Confidence: 0.797950370909091

01:01:43.913 --> 01:01:45.855
confusing that greater would be

NOTE Confidence: 0.797950370909091

01:01:45.855 --> 01:01:47.435
selected rather than less.

NOTE Confidence: 0.797950370909091

01:01:47.440 --> 01:01:49.798
It's not necessarily ask for changes.

NOTE Confidence: 0.8849953175

01:01:52.070 --> 01:01:54.380
Yeah you, you're just selecting

NOTE Confidence: 0.8849953175

01:01:54.380 --> 01:01:56.970
a different one. I yeah I.

NOTE Confidence: 0.8849953175

01:01:56.970 --> 01:01:59.370
I don't mind it at all.

NOTE Confidence: 0.8849953175

01:01:59.370 --> 01:02:03.870
So once you do the comparison.

NOTE Confidence: 0.8849953175

01:02:03.870 --> 01:02:07.698
So is less is current values.

NOTE Confidence: 0.8849953175

01:02:07.700 --> 01:02:13.310
Is less than. Valves man. Umm?

NOTE Confidence: 0.8849953175

01:02:13.310 --> 01:02:15.935
And then you get a vector like

NOTE Confidence: 0.8849953175

01:02:15.935 --> 01:02:18.099
like I mentioned of all ones.

NOTE Confidence: 0.8849953175

01:02:18.100 --> 01:02:20.770
And then to get the index.

NOTE Confidence: 0.8849953175

01:02:20.770 --> 01:02:23.320
You know a blend V.

NOTE Confidence: 0.8849953175

01:02:23.320 --> 01:02:27.020
On the current minimum, indexes.

NOTE Confidence: 0.8849953175

01:02:27.020 --> 01:02:29.855
The current index which we just bumped

NOTE Confidence: 0.8849953175

01:02:29.855 --> 01:02:31.716
out all at once because if it is

NOTE Confidence: 0.8849953175

01:02:31.716 --> 01:02:33.437
then you want to select that index.

NOTE Confidence: 0.8849953175

01:02:33.440 --> 01:02:38.180
That's only gonna be constant ones. UM?

NOTE Confidence: 0.8849953175

01:02:38.180 --> 01:02:42.500
And and the and and the less than value.

NOTE Confidence: 0.8849953175

01:02:42.500 --> 01:02:43.468
And then.

NOTE Confidence: 0.8849953175

01:02:43.468 --> 01:02:47.340
You do the same thing for the values.

NOTE Confidence: 0.8849953175

01:02:47.340 --> 01:02:47.710
Umm?

NOTE Confidence: 0.8833051

01:02:50.650 --> 01:02:51.000
See.

NOTE Confidence: 0.4111831

01:02:53.160 --> 01:02:53.870
Ah.

NOTE Confidence: 0.932068547

01:02:57.860 --> 01:03:00.140
Yeah, OK, so this is actually

NOTE Confidence: 0.932068547

01:03:00.140 --> 01:03:01.660
a little bit interesting,

NOTE Confidence: 0.932068547

01:03:01.660 --> 01:03:04.750
so notice you're getting the man

NOTE Confidence: 0.932068547

01:03:04.750 --> 01:03:07.769
and you're passing in his less.

NOTE Confidence: 0.932068547

01:03:07.770 --> 01:03:12.090
But if we look up at the trades. UM?

NOTE Confidence: 0.15924177

01:03:14.610 --> 01:03:15.100
Uh.

NOTE Confidence: 0.77238805

01:03:18.780 --> 01:03:20.700
For 32 bit.

NOTE Confidence: 0.813665494444444

01:03:22.840 --> 01:03:24.286
We don't use it. We don't

NOTE Confidence: 0.813665494444444

01:03:24.286 --> 01:03:25.898
use that mask, we just call

NOTE Confidence: 0.839474182

01:03:28.340 --> 01:03:30.800
UMMNE PI32. And that's where.

NOTE Confidence: 0.587397515

01:03:33.710 --> 01:03:35.926
But just directly takes the mural of each,

NOTE Confidence: 0.587397515

01:03:35.930 --> 01:03:40.332
yeah. And that's because MNE PI64

NOTE Confidence: 0.587397515

01:03:40.332 --> 01:03:44.050
is in a V X512, and you'll notice.

NOTE Confidence: 0.587397515

01:03:44.050 --> 01:03:48.778
So this is so. This is 1 instruction,

NOTE Confidence: 0.587397515

01:03:48.778 --> 01:03:53.780
and then or I throughput and latency of 1.

NOTE Confidence: 0.587397515

01:03:53.780 --> 01:03:57.206
And the thing we do for.

NOTE Confidence: 0.587397515

01:03:57.210 --> 01:04:01.780
Uh, here is blend V. Uhm?

NOTE Confidence: 0.814803143333333

01:04:03.980 --> 01:04:06.205
Where we just select based

NOTE Confidence: 0.814803143333333

01:04:06.205 --> 01:04:09.309
on the mask hmm and that is.

NOTE Confidence: 0.778299588571429

01:04:15.060 --> 01:04:19.358
Is it API? Yeah it is API.

NOTE Confidence: 0.778299588571429

01:04:19.360 --> 01:04:22.069
And that's two in a lower throughput.

NOTE Confidence: 0.7540678141

01:04:24.220 --> 01:04:28.340
Skylake, so it's a little bit slower. Now.

NOTE Confidence: 0.9501936

01:04:31.260 --> 01:04:31.430
UM?

NOTE Confidence: 0.849005673333333

01:04:35.460 --> 01:04:37.820
Yeah, and it. It also has a better

NOTE Confidence: 0.849005673333333

01:04:37.820 --> 01:04:40.068
dependent, uh, better dependency chain.

NOTE Confidence: 0.937219684444444

01:04:43.130 --> 01:04:45.236
So that's why we have to pass that in.

NOTE Confidence: 0.669934170833333

01:04:48.240 --> 01:04:50.802
Intel said I really wish Intel

NOTE Confidence: 0.669934170833333

01:04:50.802 --> 01:04:53.479
would ship the APX 512 stuff.

NOTE Confidence: 0.669934170833333

01:04:53.480 --> 01:04:55.400
On processors, adult support

NOTE Confidence: 0.669934170833333

01:04:55.400 --> 01:04:57.950
the actual 512 bit vectors. UM?

NOTE Confidence: 0.84273703

01:05:00.040 --> 01:05:03.288
Yeah, so we select them and we update

NOTE Confidence: 0.84273703

01:05:03.288 --> 01:05:04.946
that and then we go to the next

NOTE Confidence: 0.84273703

01:05:04.946 --> 01:05:06.480
iteration of the loop etcetera etcetera.

NOTE Confidence: 0.84273703

01:05:06.480 --> 01:05:09.476
So we do that. And now it's

NOTE Confidence: 0.84273703

01:05:09.476 --> 01:05:13.138
time to do the horizontal part.

NOTE Confidence: 0.84273703

01:05:13.140 --> 01:05:16.549
Be it to stop at. Where we finish.

NOTE Confidence: 0.84273703

01:05:16.549 --> 01:05:19.479
The loop that we accident and do the tail.

NOTE Confidence: 0.758650511666667

01:05:23.290 --> 01:05:25.426
Uh, But that's taken into account.

NOTE Confidence: 0.758650511666667

01:05:25.430 --> 01:05:29.520
Let's stop that. So we we we get

NOTE Confidence: 0.758650511666667

01:05:29.520 --> 01:05:33.430
to to stop at and this is the.

NOTE Confidence: 0.758650511666667

01:05:33.430 --> 01:05:36.230
Consolidate the shuffling thing.

NOTE Confidence: 0.758650511666667

01:05:36.230 --> 01:05:39.454
So if we're in.

NOTE Confidence: 0.758650511666667

01:05:39.454 --> 01:05:42.522
Minimum mode we do admin.

NOTE Confidence: 0.758650511666667

01:05:42.522 --> 01:05:44.458
And then we get.

NOTE Confidence: 0.758650511666667

01:05:44.460 --> 01:05:46.850
One of the values is

NOTE Confidence: 0.758650511666667

01:05:46.850 --> 01:05:48.980
there all the same. UM?

NOTE Confidence: 0.8090268825

01:05:51.360 --> 01:05:52.860
Or actually get any.

NOTE Confidence: 0.868016326

01:05:56.760 --> 01:05:58.260
Did I complain about this?

NOTE Confidence: 0.5550354

01:06:03.420 --> 01:06:09.370
Ohh yeah CVTS I that's fine.

NOTE Confidence: 0.5550354

01:06:09.370 --> 01:06:12.190
OK, yeah I was complaining about

NOTE Confidence: 0.5550354

01:06:12.190 --> 01:06:14.648
get the pause. But I was wrong.

NOTE Confidence: 0.915165586666667

01:06:18.920 --> 01:06:20.850
Now let's see. UM?

NOTE Confidence: 0.865003459090909

01:06:23.280 --> 01:06:25.926
Yeah, so this does the convert thing

NOTE Confidence: 0.865003459090909

01:06:25.926 --> 01:06:27.790
which basically just truncates.

NOTE Confidence: 0.52954884

01:06:30.570 --> 01:06:33.552
To wine. Whatever. OK,

NOTE Confidence: 0.52954884

01:06:33.552 --> 01:06:36.440
it takes it takes a vector of values.

NOTE Confidence: 0.52954884

01:06:36.440 --> 01:06:37.410
We assume that they're all

NOTE Confidence: 0.52954884

01:06:37.410 --> 01:06:38.380
identical and we're just like

NOTE Confidence: 0.52954884

01:06:38.419 --> 01:06:39.523
we just want to scale out of it.

NOTE Confidence: 0.52954884

01:06:39.530 --> 01:06:41.532
I don't care which one. Yeah, OK.

NOTE Confidence: 0.52954884

01:06:41.532 --> 01:06:45.940
I think it's always the first one, OK? Umm?

NOTE Confidence: 0.76240527

01:06:48.040 --> 01:06:49.978
Uh, let's see.

NOTE Confidence: 0.76240527

01:06:49.980 --> 01:06:54.096
And this is doing the classic.

NOTE Confidence: 0.76240527

01:06:54.100 --> 01:06:57.040
Excuse me, this is doing the

NOTE Confidence: 0.76240527

01:06:57.040 --> 01:06:59.000
classic comparison loop comparison.

NOTE Confidence: 0.76240527

01:06:59.000 --> 01:07:00.590
Update them in and then.

NOTE Confidence: 0.780058247142857

01:07:02.960 --> 01:07:08.840
This is tying together. The indices so.

NOTE Confidence: 0.780058247142857

01:07:08.840 --> 01:07:15.290
Ohh let's see so this is.

NOTE Confidence: 0.780058247142857

01:07:15.290 --> 01:07:18.545
Yeah, so this is the previous best

NOTE Confidence: 0.780058247142857

01:07:18.545 --> 01:07:21.120
horizontal man and this is the so

NOTE Confidence: 0.780058247142857

01:07:21.120 --> 01:07:23.998
we get the equal values. Move mask.

NOTE Confidence: 0.780058247142857

01:07:23.998 --> 01:07:27.712
Takes the vector mask where where

NOTE Confidence: 0.780058247142857

01:07:27.712 --> 01:07:30.943
elements are set to all ones and

NOTE Confidence: 0.780058247142857

01:07:30.943 --> 01:07:32.967
if the high bid is set an element.

NOTE Confidence: 0.780058247142857

01:07:32.970 --> 01:07:35.256
It'll set the bit in the

NOTE Confidence: 0.780058247142857

01:07:35.256 --> 01:07:36.780
resulting integer to one.

NOTE Confidence: 0.780058247142857

01:07:36.780 --> 01:07:41.005
So you get a 32 bit integer from that, OK?

NOTE Confidence: 0.780058247142857

01:07:41.005 --> 01:07:44.308
Umm? And I mean really unsigned it,

NOTE Confidence: 0.780058247142857

01:07:44.310 --> 01:07:46.349
but like. That's that's E.

NOTE Confidence: 0.770352789

01:07:51.550 --> 01:07:52.990
You said that this just

NOTE Confidence: 0.770352789

01:07:52.990 --> 01:07:54.430
sets everything to to one.

NOTE Confidence: 0.9286697

01:07:58.700 --> 01:08:00.180
And then we take.

NOTE Confidence: 0.8607888325

01:08:05.520 --> 01:08:07.776
This is the case if if if yeah,

NOTE Confidence: 0.8607888325

01:08:07.780 --> 01:08:10.517
if there are. If there are equal.

NOTE Confidence: 0.8607888325

01:08:10.520 --> 01:08:13.320
If any of the values are equal.

NOTE Confidence: 0.8607888325

01:08:13.320 --> 01:08:14.700
Then we can pull out.

NOTE Confidence: 0.9280805

01:08:18.980 --> 01:08:19.570
Let's see.

NOTE Confidence: 0.831424766666667

01:08:25.240 --> 01:08:29.910
Yeah, then we. Pull out.

NOTE Confidence: 0.831424766666667

01:08:29.910 --> 01:08:34.630
The current index. Otherwise.

NOTE Confidence: 0.831424766666667

01:08:34.630 --> 01:08:36.918
Take the maximum index.

NOTE Confidence: 0.71303296

01:08:40.540 --> 01:08:40.930
Ohh

NOTE Confidence: 0.8119322675

01:08:57.580 --> 01:09:00.320
ohh yeah so then?

NOTE Confidence: 0.8119322675

01:09:00.320 --> 01:09:02.140
That's why we pulled out the ones.

NOTE Confidence: 0.8119322675

01:09:02.140 --> 01:09:07.537
So then if. We had equal values.

NOTE Confidence: 0.8119322675

01:09:07.540 --> 01:09:09.220
We need to make sure that if

NOTE Confidence: 0.8119322675

01:09:09.220 --> 01:09:11.080
they are in different columns,

NOTE Confidence: 0.8119322675

01:09:11.080 --> 01:09:14.020
we still get the correct one.

NOTE Confidence: 0.8119322675

01:09:14.020 --> 01:09:18.556
So we then take the minimum of the indices.

NOTE Confidence: 0.8119322675

01:09:18.560 --> 01:09:20.198
OK no cause we wanna find the

NOTE Confidence: 0.8119322675

01:09:20.198 --> 01:09:21.879
first one for a minute element.

NOTE Confidence: 0.8119322675

01:09:21.880 --> 01:09:25.300
Yeah, yeah. And then.

NOTE Confidence: 0.8119322675

01:09:25.300 --> 01:09:28.010
Uhm? Let's see.

NOTE Confidence: 0.900624254

01:09:32.570 --> 01:09:34.490
And then we pull out.

NOTE Confidence: 0.755866085

01:09:43.400 --> 01:09:45.008
Let's see, you can't be equals.

NOTE Confidence: 0.353319348

01:10:12.690 --> 01:10:13.670
Uh huh.

NOTE Confidence: 0.88426893375

01:10:33.310 --> 01:10:35.302
Yeah, this is definitely

NOTE Confidence: 0.88426893375

01:10:35.302 --> 01:10:37.294
definitely doing a lot.

NOTE Confidence: 0.88426893375

01:10:37.300 --> 01:10:39.078
I don't immediately see what it's doing.

NOTE Confidence: 0.88426893375

01:10:39.080 --> 01:10:40.859
I might get the general idea, I I I,

NOTE Confidence: 0.88426893375

01:10:40.859 --> 01:10:42.490
I figured out what it was doing

NOTE Confidence: 0.88426893375

01:10:42.554 --> 01:10:44.576
on Monday and I've now forgotten,

NOTE Confidence: 0.88426893375

01:10:44.580 --> 01:10:46.056
but that's how I was with,

NOTE Confidence: 0.88426893375

01:10:46.060 --> 01:10:47.948
uh, with Kerry yeah,

NOTE Confidence: 0.88426893375

01:10:47.948 --> 01:10:51.210
it's tying together the indices and the.

NOTE Confidence: 0.88426893375

01:10:51.210 --> 01:10:53.260
The values and then it

NOTE Confidence: 0.88426893375

01:10:53.260 --> 01:10:55.310
does a bit scan forward.

NOTE Confidence: 0.88426893375

01:10:55.310 --> 01:10:57.710
And then it takes the result of the

NOTE Confidence: 0.88426893375

01:10:57.710 --> 01:10:59.944
BIT scan forward and and extracts

NOTE Confidence: 0.88426893375

01:10:59.944 --> 01:11:02.386
that element from the vector values.

NOTE Confidence: 0.88426893375

01:11:02.390 --> 01:11:03.782
Yeah, for for me this indicates

NOTE Confidence: 0.88426893375

01:11:03.782 --> 01:11:05.461
the sort of test coverage that I'm

NOTE Confidence: 0.88426893375

01:11:05.461 --> 01:11:07.085
gonna wanna see and I see that

NOTE Confidence: 0.88426893375

01:11:07.139 --> 01:11:08.687
there are tests being added here

NOTE Confidence: 0.88426893375

01:11:08.690 --> 01:11:11.736
that need a lot of attention to

NOTE Confidence: 0.88426893375

01:11:11.736 --> 01:11:13.966
not only different element sizes,

NOTE Confidence: 0.88426893375

01:11:13.970 --> 01:11:16.214
but also the duplicate element case

NOTE Confidence: 0.88426893375

01:11:16.214 --> 01:11:18.489
that we're looking at both the

NOTE Confidence: 0.88426893375

01:11:18.489 --> 01:11:20.607
values and the indices coming out.

NOTE Confidence: 0.88426893375

01:11:20.610 --> 01:11:22.885
Yeah, especially when there are

NOTE Confidence: 0.88426893375

01:11:22.885 --> 01:11:25.315
duplicates across different tests are are.

NOTE Confidence: 0.88426893375

01:11:25.315 --> 01:11:27.445
He generates a bunch of tests

NOTE Confidence: 0.88426893375

01:11:27.445 --> 01:11:29.326
and then compares against.

NOTE Confidence: 0.88426893375

01:11:29.326 --> 01:11:32.368
The old algorithm OK, which is which is.

NOTE Confidence: 0.90556991

01:11:35.650 --> 01:11:40.870
Yeah, so then we take the base and then.

NOTE Confidence: 0.90556991

01:11:40.870 --> 01:11:44.788
Vertical Pass, which is the stride.

NOTE Confidence: 0.90556991

01:11:44.790 --> 01:11:48.040
Plus the horizontal position OK.

NOTE Confidence: 0.90556991

01:11:48.040 --> 01:11:49.186
Because we need to know which

NOTE Confidence: 0.90556991

01:11:49.186 --> 01:11:50.490
chunk were we in and then OK,

NOTE Confidence: 0.90556991

01:11:50.490 --> 01:11:52.134
we're looking at like the third

NOTE Confidence: 0.90556991

01:11:52.134 --> 01:11:53.560
element within that chunk, OK?

NOTE Confidence: 0.847164191666667

01:11:57.320 --> 01:11:58.508
And then if we're doing Max,

NOTE Confidence: 0.847164191666667

01:11:58.510 --> 01:12:00.436
we do essentially the same thing.

NOTE Confidence: 0.88858025

01:12:05.360 --> 01:12:09.900
Let's see. And then this is just.

NOTE Confidence: 0.88858025

01:12:09.900 --> 01:12:14.760
Uhm? To do the different comparisons.

NOTE Confidence: 0.88858025

01:12:14.760 --> 01:12:16.390
Yeah, initially this was a

NOTE Confidence: 0.88858025

01:12:16.390 --> 01:12:18.020
ternary inside the if conditional,

NOTE Confidence: 0.88858025

01:12:18.020 --> 01:12:19.740
which I complained about.

NOTE Confidence: 0.88858025

01:12:19.740 --> 01:12:21.090
Yeah, that would be confusing.

NOTE Confidence: 0.84757112

01:12:23.960 --> 01:12:27.006
Let's see. Yeah, OK.

NOTE Confidence: 0.84757112

01:12:27.006 --> 01:12:29.127
And then here we've got the difference

NOTE Confidence: 0.84757112

01:12:29.127 --> 01:12:31.439
between Maxwell element and Min Max element.

NOTE Confidence: 0.84757112

01:12:31.440 --> 01:12:33.080
So this is something I wanted to see,

NOTE Confidence: 0.84757112

01:12:33.080 --> 01:12:35.076
so I'm glad that it's here here.

NOTE Confidence: 0.84757112

01:12:35.076 --> 01:12:37.692
Max Element finds the first maximum

NOTE Confidence: 0.84757112

01:12:37.692 --> 01:12:40.529
min Max element finds the last Max.

NOTE Confidence: 0.84757112

01:12:40.530 --> 01:12:45.186
Yep. That's why it's H Max.

NOTE Confidence: 0.84757112

01:12:45.190 --> 01:12:46.180
Instead of men.

NOTE Confidence: 0.80862202

01:12:48.900 --> 01:12:51.440
And then the same.

NOTE Confidence: 0.80862202

01:12:51.440 --> 01:12:53.824
Thing there. Let's see.

NOTE Confidence: 0.80862202

01:12:53.824 --> 01:12:57.723
So if we have the portion Max.

NOTE Confidence: 0.80862202

01:12:57.730 --> 01:13:01.460
Uh. This kind of repeats some

NOTE Confidence: 0.80862202

01:13:01.460 --> 01:13:02.880
of the stuff done at top.

NOTE Confidence: 0.80862202

01:13:02.880 --> 01:13:05.799
I think Alex was asking if I,

NOTE Confidence: 0.80862202

01:13:05.800 --> 01:13:07.728
I think the best way to if we

NOTE Confidence: 0.80862202

01:13:07.728 --> 01:13:08.889
wanna eliminate this repetition

NOTE Confidence: 0.80862202

01:13:08.889 --> 01:13:10.656
would be quite use. Go to.

NOTE Confidence: 0.80862202

01:13:10.656 --> 01:13:11.946
Oh yeah, I'll label break

NOTE Confidence: 0.80862202

01:13:11.946 --> 01:13:13.359
which I actually don't mind.

NOTE Confidence: 0.95584345

01:13:15.750 --> 01:13:17.927
But yeah, I'm I'm.

NOTE Confidence: 0.95584345

01:13:17.927 --> 01:13:19.990
I'm not a big caterer of go to.

NOTE Confidence: 0.95584345

01:13:19.990 --> 01:13:22.357
Yeah I I am so I'm OK with some

NOTE Confidence: 0.95584345

01:13:22.357 --> 01:13:24.072
repetition here alright and if

NOTE Confidence: 0.95584345

01:13:24.072 --> 01:13:26.400
necessary like we could think about it.

NOTE Confidence: 0.95584345

01:13:26.400 --> 01:13:27.650
I you know I yeah.

NOTE Confidence: 0.95584345

01:13:27.650 --> 01:13:30.323
I mean it would be a go to that's

NOTE Confidence: 0.95584345

01:13:30.323 --> 01:13:33.271
like a go to use this like a

NOTE Confidence: 0.95584345

01:13:33.271 --> 01:13:35.320
labeled statement which I think is.

NOTE Confidence: 0.95584345

01:13:35.320 --> 01:13:38.236
No, not not. Not the previous opinion,

NOTE Confidence: 0.95584345

01:13:38.236 --> 01:13:39.500
but in any case.

NOTE Confidence: 0.9510567

01:13:41.830 --> 01:13:42.010
UM?

NOTE Confidence: 0.947827540909091

01:13:45.950 --> 01:13:47.835
Yeah, so we're gonna see

NOTE Confidence: 0.947827540909091

01:13:47.835 --> 01:13:50.180
if we are at the end.

NOTE Confidence: 0.947827540909091

01:13:50.180 --> 01:13:53.948
And it equals 0 means that this mask.

NOTE Confidence: 0.947827540909091

01:13:53.950 --> 01:13:55.950
I mean, either we're at the very end,

NOTE Confidence: 0.947827540909091

01:13:55.950 --> 01:13:57.820
or this masking masked out

NOTE Confidence: 0.947827540909091

01:13:57.820 --> 01:14:00.529
all of the bits in the size.

NOTE Confidence: 0.947827540909091

01:14:00.530 --> 01:14:02.630
In which case where the last

NOTE Confidence: 0.947827540909091

01:14:02.630 --> 01:14:06.230
inside that last vector element.

NOTE Confidence: 0.947827540909091

01:14:06.230 --> 01:14:09.406
And then we just do that computation again.

NOTE Confidence: 0.947827540909091

01:14:09.410 --> 01:14:13.290
And advanced stop at. Uh.

NOTE Confidence: 0.715475455714286

01:14:16.910 --> 01:14:18.580
Set base and we've already

NOTE Confidence: 0.715475455714286

01:14:18.580 --> 01:14:21.460
advanced first, I think. Umm?

NOTE Confidence: 0.642048393333333

01:14:24.190 --> 01:14:26.980
Load current values.

NOTE Confidence: 0.642048393333333

01:14:26.980 --> 01:14:31.054
And then if we're in minimum mode.

NOTE Confidence: 0.642048393333333

01:14:31.060 --> 01:14:34.036
The update. Men and IX men,

NOTE Confidence: 0.642048393333333

01:14:34.036 --> 01:14:35.710
and if we're in maximum mode,

NOTE Confidence: 0.642048393333333

01:14:35.710 --> 01:14:39.010
the update Max and I like that branch

NOTE Confidence: 0.642048393333333

01:14:39.010 --> 01:14:42.380
could be done at the top too, but.

NOTE Confidence: 0.642048393333333

01:14:42.380 --> 01:14:46.370
Uh, there's no reason to do it.

NOTE Confidence: 0.642048393333333

01:14:46.370 --> 01:14:50.570
And there's no way. You know?

NOTE Confidence: 0.642048393333333

01:14:50.570 --> 01:14:52.038
Like these branches are

NOTE Confidence: 0.642048393333333

01:14:52.038 --> 01:14:53.506
OK because they're all,

NOTE Confidence: 0.642048393333333

01:14:53.510 --> 01:14:55.630
so they're gonna get predicted

NOTE Confidence: 0.642048393333333

01:14:55.630 --> 01:14:56.806
they're in the loop in their

NOTE Confidence: 0.642048393333333

01:14:56.806 --> 01:14:57.590
constant over the holder.

NOTE Confidence: 0.642048393333333

01:14:57.590 --> 01:14:59.720
So yeah, and these these material,

NOTE Confidence: 0.642048393333333

01:14:59.720 --> 01:15:00.996
we've constexpr arts so,

NOTE Confidence: 0.642048393333333

01:15:00.996 --> 01:15:02.910
oh that's true too either way.

NOTE Confidence: 0.753074185842105

01:15:04.920 --> 01:15:06.885
There's actually some argument to

NOTE Confidence: 0.753074185842105

01:15:06.885 --> 01:15:09.544
be had for changing some of this

NOTE Confidence: 0.753074185842105

01:15:09.544 --> 01:15:11.707
stuff from if constexpr to to if.

NOTE Confidence: 0.753074185842105

01:15:11.710 --> 01:15:15.766
Because in I think there are certain cases,

NOTE Confidence: 0.753074185842105

01:15:15.770 --> 01:15:20.426
especially in admin. So for example.

NOTE Confidence: 0.753074185842105

01:15:20.430 --> 01:15:25.299
If each min could be dynamic on the size.

NOTE Confidence: 0.753074185842105

01:15:25.300 --> 01:15:29.560
Right? And. The UM?

NOTE Confidence: 0.897488292

01:15:31.820 --> 01:15:37.140
If the branch is speculated. Then like you.

NOTE Confidence: 0.95339984

01:15:39.970 --> 01:15:44.620
UM? You have a couple of cycles.

NOTE Confidence: 0.95339984

01:15:44.620 --> 01:15:47.158
The the instruction right after it,

NOTE Confidence: 0.95339984

01:15:47.160 --> 01:15:49.518
right after each func is called,

NOTE Confidence: 0.95339984

01:15:49.520 --> 01:15:51.950
has a dependency on this

NOTE Confidence: 0.95339984

01:15:51.950 --> 01:15:53.408
final min instruction.

NOTE Confidence: 0.95339984

01:15:53.410 --> 01:15:58.550
Umm? And. I think min has.

NOTE Confidence: 0.764716893428571

01:16:08.920 --> 01:16:11.710
No, no, it's only one second

NOTE Confidence: 0.764716893428571

01:16:11.710 --> 01:16:15.498
latency. Umm? Yeah I did.

NOTE Confidence: 0.764716893428571

01:16:15.500 --> 01:16:17.120
That there's some cases we're doing.

NOTE Confidence: 0.764716893428571

01:16:17.120 --> 01:16:18.510
The If is better because.

NOTE Confidence: 0.885392952

01:16:21.060 --> 01:16:24.240
There's no reason not to, basically.

NOTE Confidence: 0.885392952

01:16:24.240 --> 01:16:26.746
Yeah, but also the the numbers on

NOTE Confidence: 0.885392952

01:16:26.746 --> 01:16:29.443
the Intel and intrinsics guide are

NOTE Confidence: 0.885392952

01:16:29.443 --> 01:16:32.013
not sufficient to determine that.

NOTE Confidence: 0.885392952

01:16:32.020 --> 01:16:34.850
Because they're incredibly dubious anyhow.

NOTE Confidence: 0.885392952

01:16:34.850 --> 01:16:38.904
Uh, let's see. Yeah yeah,

NOTE Confidence: 0.885392952

01:16:38.904 --> 01:16:42.148
we advance if we're at the

NOTE Confidence: 0.885392952

01:16:42.148 --> 01:16:44.590
if we're actually at the end.

NOTE Confidence: 0.885392952

01:16:44.590 --> 01:16:46.118
Now we're at the end of the selves.

NOTE Confidence: 0.4293424

01:16:48.470 --> 01:16:48.860
Uh.

NOTE Confidence: 0.849134083333333

01:16:51.070 --> 01:16:53.140
Ohh yeah, so if we don't have like what?

NOTE Confidence: 0.801133118181818

01:17:03.730 --> 01:17:07.330
Ohh yeah, so this is this is a 64 bit case.

NOTE Confidence: 0.801133118181818

01:17:07.330 --> 01:17:08.826
You just break immediately.

NOTE Confidence: 0.801133118181818

01:17:08.826 --> 01:17:12.770
And once we update things, we continue.

NOTE Confidence: 0.801133118181818

01:17:12.770 --> 01:17:14.884
Which I kind of thought was confusing

NOTE Confidence: 0.801133118181818

01:17:14.884 --> 01:17:17.397
in terms of the ordering of the loop.

NOTE Confidence: 0.801133118181818

01:17:17.400 --> 01:17:18.360
It seemed like it was this.

NOTE Confidence: 0.801133118181818

01:17:18.360 --> 01:17:20.166
The thing that essentially reruns the

NOTE Confidence: 0.801133118181818

01:17:20.166 --> 01:17:22.037
vector algorithm for each syllable portion.

NOTE Confidence: 0.801133118181818

01:17:22.037 --> 01:17:23.933
Yeah, this does the updating part of that,

NOTE Confidence: 0.801133118181818

01:17:23.940 --> 01:17:25.844
but then it continues up to the top.

NOTE Confidence: 0.60250404

01:17:29.950 --> 01:17:31.240
Starts it again.

NOTE Confidence: 0.60250404

01:17:31.240 --> 01:17:32.530
Eat another advances.

NOTE Confidence: 0.60250404

01:17:32.530 --> 01:17:33.541
Yeah, advances first,

NOTE Confidence: 0.60250404

01:17:33.541 --> 01:17:35.900
after it does all that stuff OK,

NOTE Confidence: 0.60250404

01:17:35.900 --> 01:17:38.522
but I think that's because it

NOTE Confidence: 0.60250404

01:17:38.522 --> 01:17:41.480
has to initialize the values first.

NOTE Confidence: 0.60250404

01:17:41.480 --> 01:17:43.260
Right, so because the first?

NOTE Confidence: 0.60250404

01:17:43.260 --> 01:17:46.347
Well it's because the first iteration of

NOTE Confidence: 0.60250404

01:17:46.347 --> 01:17:48.888
this trunking algorithm is is unique, right?

NOTE Confidence: 0.60250404

01:17:48.888 --> 01:17:50.128
Because you thought you need

NOTE Confidence: 0.60250404

01:17:50.128 --> 01:17:51.508
this load everything and say hey

NOTE Confidence: 0.60250404

01:17:51.508 --> 01:17:52.719
we found the best stuff and if

NOTE Confidence: 0.60250404

01:17:52.719 --> 01:17:54.160
you do the comparisons that it's

NOTE Confidence: 0.60250404

01:17:54.160 --> 01:17:55.380
wrong because you just compare

NOTE Confidence: 0.60250404

01:17:55.380 --> 01:17:56.700
it against zero or whatever.

NOTE Confidence: 0.60250404

01:17:56.700 --> 01:17:56.960
Yeah?

NOTE Confidence: 0.94600317

01:18:00.120 --> 01:18:03.210
So yeah. Ohm.

NOTE Confidence: 0.774479626

01:18:05.520 --> 01:18:06.670
Yeah, and then we're done.

NOTE Confidence: 0.774479626

01:18:06.670 --> 01:18:08.770
And then at the end.

NOTE Confidence: 0.774479626

01:18:08.770 --> 01:18:10.898
We just do the tail, which is the normal.

NOTE Confidence: 0.774479626

01:18:10.898 --> 01:18:12.383
And then we do this.

NOTE Confidence: 0.774479626

01:18:12.390 --> 01:18:14.558
I checked that all the numbers match up.

NOTE Confidence: 0.774479626

01:18:14.560 --> 01:18:15.967
It's good. Yeah, because at the end

NOTE Confidence: 0.774479626

01:18:15.967 --> 01:18:17.362
you don't want that copy paste or

NOTE Confidence: 0.774479626

01:18:17.362 --> 01:18:18.780
you saying or when you meant eight.

NOTE Confidence: 0.774479626

01:18:18.780 --> 01:18:21.788
Yeah, so for the test we had last.

NOTE Confidence: 0.774479626

01:18:21.790 --> 01:18:24.646
Last good known me in element.

NOTE Confidence: 0.774479626

01:18:24.650 --> 01:18:27.630
So this is the normal.

NOTE Confidence: 0.774479626

01:18:27.630 --> 01:18:30.610
Naive, Lou. UM?

NOTE Confidence: 0.726215035555556

01:18:35.300 --> 01:18:38.333
And this is a the normal min Max loop.

NOTE Confidence: 0.726215035555556

01:18:38.340 --> 01:18:40.344
We verify that that's the same

NOTE Confidence: 0.726215035555556

01:18:40.344 --> 01:18:43.040
as what we do in minmax. Uhm?

NOTE Confidence: 0.85877999

01:18:45.680 --> 01:18:46.950
Yeah, and so he tests.

NOTE Confidence: 0.785260978

01:18:49.020 --> 01:18:54.200
He generates various sizes of. UM?

NOTE Confidence: 0.796435835555556

01:19:01.760 --> 01:19:05.408
Of vectors. OK, so they're saying only one

NOTE Confidence: 0.796435835555556

01:19:05.408 --> 01:19:08.345
per, so I I think we need to make sure.

NOTE Confidence: 0.943863076153846

01:19:13.970 --> 01:19:16.665
Yeah, we need to make sure that

NOTE Confidence: 0.943863076153846

01:19:16.665 --> 01:19:19.850
we get the actual special cases.

NOTE Confidence: 0.943863076153846

01:19:19.850 --> 01:19:21.740
Yeah, it's it's random, which is good.

NOTE Confidence: 0.705807247875

01:19:24.740 --> 01:19:28.065
But the the extreme complexity

NOTE Confidence: 0.705807247875

01:19:28.065 --> 01:19:33.060
of this code, I think, demands.

NOTE Confidence: 0.705807247875

01:19:33.060 --> 01:19:34.660
A little more focused testing.

NOTE Confidence: 0.705807247875

01:19:34.660 --> 01:19:35.990
In addition to what's here.

NOTE Confidence: 0.773784825833333

01:19:41.710 --> 01:19:43.033
The way that I was less concerned

NOTE Confidence: 0.773784825833333

01:19:43.033 --> 01:19:44.189
about with like finding count.

NOTE Confidence: 0.773784825833333

01:19:44.190 --> 01:19:46.566
Yeah, because especially because

NOTE Confidence: 0.773784825833333

01:19:46.566 --> 01:19:49.536
finding count didn't really introduce.

NOTE Confidence: 0.773784825833333

01:19:49.540 --> 01:19:50.290
He sort of, you know,

NOTE Confidence: 0.773784825833333

01:19:50.290 --> 01:19:53.755
shrunken portion and entities whenever,

NOTE Confidence: 0.773784825833333

01:19:53.755 --> 01:19:54.695
whenever we've got these

NOTE Confidence: 0.773784825833333

01:19:54.695 --> 01:19:55.870
magic numbers like you know,

NOTE Confidence: 0.773784825833333

01:19:55.870 --> 01:19:59.900
16 in the code that creates that.

NOTE Confidence: 0.773784825833333

01:19:59.900 --> 01:20:02.959
We've been bit by this before the.

NOTE Confidence: 0.773784825833333

01:20:02.960 --> 01:20:04.652
And what was it?

NOTE Confidence: 0.773784825833333

01:20:04.652 --> 01:20:08.734
We ran into a bug where it was a sort.

NOTE Confidence: 0.773784825833333

01:20:08.734 --> 01:20:12.160
I want to say it was a ranges.

NOTE Confidence: 0.773784825833333

01:20:12.160 --> 01:20:13.530
Either range of sort or

NOTE Confidence: 0.773784825833333

01:20:13.530 --> 01:20:14.900
stable sword or partial sort.

NOTE Confidence: 0.773784825833333

01:20:14.900 --> 01:20:17.380
I think it might have been stable sort.

NOTE Confidence: 0.773784825833333

01:20:17.380 --> 01:20:20.398
We only tested it for like

NOTE Confidence: 0.773784825833333

01:20:20.400 --> 01:20:21.537
1617 something elements.

NOTE Confidence: 0.773784825833333

01:20:21.537 --> 01:20:23.811
There's a hard coded constant in

NOTE Confidence: 0.773784825833333

01:20:23.811 --> 01:20:26.363
there that when we get over 32 we do

NOTE Confidence: 0.773784825833333

01:20:26.363 --> 01:20:28.900
special fancy stuff and the code didn't

NOTE Confidence: 0.773784825833333

01:20:28.900 --> 01:20:31.360
work for large numbers of elements.

NOTE Confidence: 0.773784825833333

01:20:31.360 --> 01:20:33.166
So whenever we see a constant the

NOTE Confidence: 0.773784825833333

01:20:33.166 --> 01:20:35.130
code we need to test on the side.

NOTE Confidence: 0.773784825833333

01:20:35.130 --> 01:20:38.439
Very, very well called coverage.

NOTE Confidence: 0.752463273333333

01:20:41.320 --> 01:20:43.138
How does playing code coverage work?

NOTE Confidence: 0.752463273333333

01:20:43.140 --> 01:20:45.620
If you compiled the code,

NOTE Confidence: 0.752463273333333

01:20:45.620 --> 01:20:48.140
the actual CPP file with MSVC.

NOTE Confidence: 0.752463273333333

01:20:48.140 --> 01:20:49.108
I have no idea.

NOTE Confidence: 0.752463273333333

01:20:49.108 --> 01:20:50.560
I've never run client code coverage.

NOTE Confidence: 0.752463273333333

01:20:50.560 --> 01:20:52.604
In theory that would be an interesting

NOTE Confidence: 0.752463273333333

01:20:52.604 --> 01:20:54.128
metric to capture in practice

NOTE Confidence: 0.752463273333333

01:20:54.128 --> 01:20:55.748
because we're so heavily templated,

NOTE Confidence: 0.752463273333333

01:20:55.750 --> 01:20:58.420
we've never really explored code coverage.

NOTE Confidence: 0.752463273333333

01:20:58.420 --> 01:20:59.736
Not saying that it wouldn't be bad,

NOTE Confidence: 0.752463273333333

01:20:59.740 --> 01:21:00.920
or would it be good,

NOTE Confidence: 0.752463273333333

01:21:00.920 --> 01:21:03.640
but we are so far from having that as a

NOTE Confidence: 0.752463273333333

01:21:03.712 --> 01:21:07.668
heuristic for a metric that we could look at.

NOTE Confidence: 0.752463273333333

01:21:07.670 --> 01:21:10.414
I I would I can sort of.

NOTE Confidence: 0.752463273333333

01:21:10.420 --> 01:21:11.340
I mean, yeah we could.

NOTE Confidence: 0.752463273333333

01:21:11.340 --> 01:21:12.168
We could bench coverage,

NOTE Confidence: 0.752463273333333

01:21:12.168 --> 01:21:14.179
but I think I think that the asking a lot.

NOTE Confidence: 0.752463273333333

01:21:14.180 --> 01:21:16.360
Yeah, I think so too.

NOTE Confidence: 0.752463273333333

01:21:16.360 --> 01:21:17.098
Here I think.

NOTE Confidence: 0.728879483636364

01:21:19.880 --> 01:21:22.175
Yeah, these are, yeah completely

NOTE Confidence: 0.728879483636364

01:21:22.175 --> 01:21:25.060
equal vectors vectors of equal chunks.

NOTE Confidence: 0.728879483636364

01:21:25.060 --> 01:21:27.280
I'm thinking focusing testing on

NOTE Confidence: 0.728879483636364

01:21:27.280 --> 01:21:30.157
the duplicate cases would be very

NOTE Confidence: 0.728879483636364

01:21:30.157 --> 01:21:32.636
interesting cases where we know

NOTE Confidence: 0.728879483636364

01:21:32.636 --> 01:21:35.006
we're gonna have duplicates in

NOTE Confidence: 0.728879483636364

01:21:35.006 --> 01:21:37.939
the same positions or the same.

NOTE Confidence: 0.728879483636364

01:21:37.940 --> 01:21:40.110
Modulo and you consider this.

NOTE Confidence: 0.786137735555556

01:22:03.030 --> 01:22:04.494
The code is reasonably

NOTE Confidence: 0.786137735555556

01:22:04.494 --> 01:22:06.324
like it's been fact about,

NOTE Confidence: 0.786137735555556

01:22:06.330 --> 01:22:08.248
that all the trade stuff is centralized,

NOTE Confidence: 0.786137735555556

01:22:08.250 --> 01:22:10.338
so I am not as concerned that we're

NOTE Confidence: 0.786137735555556

01:22:10.338 --> 01:22:12.056
gonna find something that only fails

NOTE Confidence: 0.786137735555556

01:22:12.056 --> 01:22:14.499
for like 2 bytes and not for 8 bytes.

NOTE Confidence: 0.786137735555556

01:22:14.500 --> 01:22:15.718
There's a little bit of that

NOTE Confidence: 0.786137735555556

01:22:15.718 --> 01:22:16.530
because the portion size,

NOTE Confidence: 0.786137735555556

01:22:16.530 --> 01:22:18.350
but having at least some coverage that

NOTE Confidence: 0.786137735555556

01:22:18.350 --> 01:22:20.314
OK if we've got a duplicate element

NOTE Confidence: 0.786137735555556

01:22:20.314 --> 01:22:22.302
here and here and they're both the

NOTE Confidence: 0.786137735555556

01:22:22.302 --> 01:22:24.246
minimum we need to find the first one.

NOTE Confidence: 0.786137735555556

01:22:24.250 --> 01:22:25.442
We're running minmax element,

NOTE Confidence: 0.786137735555556

01:22:25.442 --> 01:22:28.390
we need to find the last one for the maximum.

NOTE Confidence: 0.786137735555556

01:22:28.390 --> 01:22:30.399
Yeah, just having one case that would

NOTE Confidence: 0.786137735555556

01:22:30.399 --> 01:22:32.290
really make you feel better about.

NOTE Confidence: 0.7483466

01:22:34.920 --> 01:22:36.890
Yeah yeah, this is this.

NOTE Confidence: 0.7483466

01:22:36.890 --> 01:22:37.352
Definitely good.

NOTE Confidence: 0.7483466

01:22:37.352 --> 01:22:38.592
It's a good start. Yeah.

NOTE Confidence: 0.7483466

01:22:38.592 --> 01:22:41.088
And so the other reason why I think

NOTE Confidence: 0.7483466

01:22:41.088 --> 01:22:43.548
that we need a little bit more

NOTE Confidence: 0.7483466

01:22:43.548 --> 01:22:45.410
interesting is that we're using.

NOTE Confidence: 0.7483466

01:22:45.410 --> 01:22:46.590
The random number generator,

NOTE Confidence: 0.7483466

01:22:46.590 --> 01:22:49.712
just as a quick way to spin out. Sort of,

NOTE Confidence: 0.7483466

01:22:49.712 --> 01:22:51.668
you know reasonable looking coverage,

NOTE Confidence: 0.7483466

01:22:51.668 --> 01:22:54.116
but it's specifically not a randomized

NOTE Confidence: 0.7483466

01:22:54.116 --> 01:22:56.104
test case that's generating new

NOTE Confidence: 0.7483466

01:22:56.104 --> 01:22:58.180
numbers every time we run it.

NOTE Confidence: 0.7483466

01:22:58.180 --> 01:22:59.713
This is deterministic,

NOTE Confidence: 0.7483466

01:22:59.713 --> 01:23:02.156
preceding it always with 1729 or

NOTE Confidence: 0.7483466

01:23:02.156 --> 01:23:03.542
whatever he chose the seed to be.

NOTE Confidence: 0.7483466

01:23:03.550 --> 01:23:05.020
So every time we run this program,

NOTE Confidence: 0.7483466

01:23:05.020 --> 01:23:07.670
it's always going to generate.

NOTE Confidence: 0.7483466

01:23:07.670 --> 01:23:10.260
Only generates 124 OK. Yeah,

NOTE Confidence: 0.7483466

01:23:10.260 --> 01:23:14.238
so we do get multiple portions for 8 bits.

NOTE Confidence: 0.7483466

01:23:14.240 --> 01:23:16.430
OK 8 byte, 8 wait.

NOTE Confidence: 0.7483466

01:23:16.430 --> 01:23:17.625
Actually do we because they're

NOTE Confidence: 0.7483466

01:23:17.625 --> 01:23:19.349
in the trunk so you might not.

NOTE Confidence: 0.7770486575

01:23:22.120 --> 01:23:23.300
Yeah, because they're their

NOTE Confidence: 0.7770486575

01:23:23.300 --> 01:23:24.480
indices into the column,

NOTE Confidence: 0.7770486575

01:23:24.480 --> 01:23:27.390
so you would need 255.

NOTE Confidence: 0.7770486575

01:23:27.390 --> 01:23:30.360
Times 16. OK, that's pretty.

NOTE Confidence: 0.7770486575

01:23:30.360 --> 01:23:33.896
Yeah like four 4000.

NOTE Confidence: 0.7770486575

01:23:33.896 --> 01:23:37.988
Yeah, I actually don't think.

NOTE Confidence: 0.7770486575

01:23:37.990 --> 01:23:41.410
Let's see, and then for two.

NOTE Confidence: 0.7770486575

01:23:41.410 --> 01:23:42.592
65,000 that's alone.

NOTE Confidence: 0.7770486575

01:23:42.592 --> 01:23:45.350
Now we do need to worry about.

NOTE Confidence: 0.7770486575

01:23:45.350 --> 01:23:46.686
OK, how long does this take to run?

NOTE Confidence: 0.7770486575

01:23:46.690 --> 01:23:48.027
So like for the for the cases

NOTE Confidence: 0.7770486575

01:23:48.027 --> 01:23:49.497
like either 2 by where we've got,

NOTE Confidence: 0.7770486575

01:23:49.500 --> 01:23:50.940
you know 65K or something,

NOTE Confidence: 0.7770486575

01:23:50.940 --> 01:23:52.524
maybe a little bit too much to like.

NOTE Confidence: 0.7770486575

01:23:52.530 --> 01:23:55.484
Test automated having like a little bit

NOTE Confidence: 0.7770486575

01:23:55.484 --> 01:23:58.310
of manual testing would be reasonable,

NOTE Confidence: 0.7770486575

01:23:58.310 --> 01:24:00.574
and of course 232 is trying to extreme.

NOTE Confidence: 0.793612244444444

01:24:02.660 --> 01:24:05.612
But certainly for like the the one by case,

NOTE Confidence: 0.793612244444444

01:24:05.620 --> 01:24:07.840
I think we could test the

NOTE Confidence: 0.793612244444444

01:24:07.840 --> 01:24:09.860
yeah rerun the portion there.

NOTE Confidence: 0.793612244444444

01:24:09.860 --> 01:24:12.000
Because that's definitely it.

NOTE Confidence: 0.793612244444444

01:24:12.000 --> 01:24:13.011
Yeah, it's it's.

NOTE Confidence: 0.793612244444444

01:24:13.011 --> 01:24:15.033
It's the worst in the sense

NOTE Confidence: 0.793612244444444

01:24:15.033 --> 01:24:16.680
that it's control flow.

NOTE Confidence: 0.793612244444444

01:24:16.680 --> 01:24:18.240
Which state and control flow

NOTE Confidence: 0.793612244444444

01:24:18.240 --> 01:24:19.800
are things to worry about?

NOTE Confidence: 0.9519199

01:24:54.320 --> 01:24:54.760
Yeah.

NOTE Confidence: 0.900274754285714

01:25:00.960 --> 01:25:02.448
I mean, if necessary,

NOTE Confidence: 0.900274754285714

01:25:02.448 --> 01:25:04.308
we could explore extending this

NOTE Confidence: 0.900274754285714

01:25:04.308 --> 01:25:06.834
test to be truly randomized to the

NOTE Confidence: 0.900274754285714

01:25:06.834 --> 01:25:08.930
strategy that we've used elsewhere,

NOTE Confidence: 0.900274754285714

01:25:08.930 --> 01:25:12.906
which is like the sort of the the

NOTE Confidence: 0.900274754285714

01:25:12.906 --> 01:25:15.228
second highest level of stringency is.

NOTE Confidence: 0.900274754285714

01:25:15.228 --> 01:25:17.220
We get the test to generate

NOTE Confidence: 0.900274754285714

01:25:17.290 --> 01:25:18.918
random values at runtime,

NOTE Confidence: 0.900274754285714

01:25:18.920 --> 01:25:20.754
and we have to log the seed,

NOTE Confidence: 0.900274754285714

01:25:20.760 --> 01:25:23.076
and then we say OK, if this test fails,

NOTE Confidence: 0.900274754285714

01:25:23.076 --> 01:25:24.480
do not ignore and rerun it.

NOTE Confidence: 0.900274754285714

01:25:24.480 --> 01:25:25.890
You must report this to the

NOTE Confidence: 0.900274754285714

01:25:25.890 --> 01:25:27.339
maintainers and give us this seed,

NOTE Confidence: 0.900274754285714

01:25:27.340 --> 01:25:28.712
and then we can replicate that failing

NOTE Confidence: 0.900274754285714

01:25:28.712 --> 01:25:30.910
run up, and we do that for CARICOM.

NOTE Confidence: 0.900274754285714

01:25:30.910 --> 01:25:33.606
We do that for a couple other tests

NOTE Confidence: 0.900274754285714

01:25:33.610 --> 01:25:35.932
where there may be such obscure

NOTE Confidence: 0.900274754285714

01:25:35.932 --> 01:25:37.877
failures that the cumulative coverage

NOTE Confidence: 0.900274754285714

01:25:37.877 --> 01:25:40.509
of running it over and over in the

NOTE Confidence: 0.900274754285714

01:25:40.509 --> 01:25:42.389
harness could grant stuff here.

NOTE Confidence: 0.900274754285714

01:25:42.390 --> 01:25:45.206
I don't necessarily know that we need that,

NOTE Confidence: 0.900274754285714

01:25:45.210 --> 01:25:46.866
but that is something that we can have.

NOTE Confidence: 0.900274754285714

01:25:46.870 --> 01:25:48.620
The ultimate is pure exhaustive,

NOTE Confidence: 0.900274754285714

01:25:48.620 --> 01:25:50.870
just like every possible value for

NOTE Confidence: 0.900274754285714

01:25:50.870 --> 01:25:54.790
min and Max element, it's not.

NOTE Confidence: 0.900274754285714

01:25:54.790 --> 01:25:56.338
It's a lot harder to do because you got

NOTE Confidence: 0.900274754285714

01:25:56.338 --> 01:25:58.289
to worry about duplicates and non duplicates,

NOTE Confidence: 0.900274754285714

01:25:58.290 --> 01:26:00.768
so you can't just like test all

NOTE Confidence: 0.900274754285714

01:26:00.768 --> 01:26:02.370
combinations is there in one.

NOTE Confidence: 0.900274754285714

01:26:02.370 --> 01:26:03.282
I don't think exhausted

NOTE Confidence: 0.900274754285714

01:26:03.282 --> 01:26:04.422
is the reason we're here,

NOTE Confidence: 0.900274754285714

01:26:04.430 --> 01:26:06.415
but certainly having some focus

NOTE Confidence: 0.900274754285714

01:26:06.415 --> 01:26:09.160
test cases of this is the same.

NOTE Confidence: 0.900274754285714

01:26:09.160 --> 01:26:11.510
All the portions or whatever.

NOTE Confidence: 0.900274754285714

01:26:11.510 --> 01:26:11.979
Complexity,

NOTE Confidence: 0.900274754285714

01:26:11.979 --> 01:26:12.448
yeah,

NOTE Confidence: 0.900274754285714

01:26:12.448 --> 01:26:14.793
we're we're definitely gonna fudge

NOTE Confidence: 0.900274754285714

01:26:14.793 --> 01:26:16.200
the complexity requirement.

NOTE Confidence: 0.900274754285714

01:26:16.200 --> 01:26:17.880
The fun thing is that if we know

NOTE Confidence: 0.900274754285714

01:26:17.880 --> 01:26:18.600
that it's less,

NOTE Confidence: 0.900274754285714

01:26:18.600 --> 01:26:20.520
then they can't observe how many

NOTE Confidence: 0.900274754285714

01:26:20.520 --> 01:26:22.400
times we're revoking their predicate.

NOTE Confidence: 0.900274754285714

01:26:22.400 --> 01:26:24.234
And are they going to complain if

NOTE Confidence: 0.900274754285714

01:26:24.234 --> 01:26:26.381
we come back to them unless wall

NOTE Confidence: 0.900274754285714

01:26:26.381 --> 01:26:28.331
clock time that they expected because

NOTE Confidence: 0.900274754285714

01:26:28.389 --> 01:26:30.099
we ran a vectorized algorithm?

NOTE Confidence: 0.900274754285714

01:26:30.100 --> 01:26:31.843
As long as we're not like messing

NOTE Confidence: 0.900274754285714

01:26:31.843 --> 01:26:33.160
with the asymptotic complexity,

NOTE Confidence: 0.900274754285714

01:26:33.160 --> 01:26:35.486
which would be very bad, we are though,

NOTE Confidence: 0.900274754285714

01:26:35.486 --> 01:26:38.970
are we changing end to end login in

NOTE Confidence: 0.900274754285714

01:26:38.970 --> 01:26:41.700
terms of and the number of elements?

NOTE Confidence: 0.900274754285714

01:26:41.700 --> 01:26:41.982
Yes,

NOTE Confidence: 0.900274754285714

01:26:41.982 --> 01:26:44.238
the case where when when does that happen?

NOTE Confidence: 0.900274754285714

01:26:44.240 --> 01:26:46.580
Because if you have multiple portions

NOTE Confidence: 0.900274754285714

01:26:46.580 --> 01:26:49.538
you do the horizontal part multiple times.

NOTE Confidence: 0.775556454545455

01:26:52.160 --> 01:26:53.618
But the horizontal part is constant

NOTE Confidence: 0.775556454545455

01:26:53.618 --> 01:26:55.213
time for number of chunk, right?

NOTE Confidence: 0.775556454545455

01:26:55.213 --> 01:26:57.334
Or for the size of the ports?

NOTE Confidence: 0.775556454545455

01:26:57.340 --> 01:26:58.558
Like the size of the portion is

NOTE Confidence: 0.775556454545455

01:26:58.558 --> 01:27:00.920
determined by the element size, right?

NOTE Confidence: 0.775556454545455

01:27:00.920 --> 01:27:04.368
Yeah, but it does end log N comparisons.

NOTE Confidence: 0.775556454545455

01:27:04.370 --> 01:27:06.064
OK, so I'm working well it does,

NOTE Confidence: 0.775556454545455

01:27:06.070 --> 01:27:08.641
you know four log 4 comparison?

NOTE Confidence: 0.775556454545455

01:27:08.641 --> 01:27:10.027
Yeah, but that's constant in terms

NOTE Confidence: 0.775556454545455

01:27:10.027 --> 01:27:11.694
of the number of elements, right?

NOTE Confidence: 0.775556454545455

01:27:11.694 --> 01:27:13.086
Sorry elements size.

NOTE Confidence: 0.775556454545455

01:27:13.086 --> 01:27:16.460
Yeah, but you it's times. Ohh.

NOTE Confidence: 0.775556454545455

01:27:16.460 --> 01:27:17.876
So what I'm saying is imagine

NOTE Confidence: 0.775556454545455

01:27:17.876 --> 01:27:19.539
you've got a one byte element.

NOTE Confidence: 0.775556454545455

01:27:19.540 --> 01:27:23.759
We know that the portion size is 256

NOTE Confidence: 0.775556454545455

01:27:23.759 --> 01:27:27.112
elements so we will run the algorithm

NOTE Confidence: 0.775556454545455

01:27:27.112 --> 01:27:31.115
N number of elements in the whole thing

NOTE Confidence: 0.775556454545455

01:27:31.115 --> 01:27:34.230
divided by 256 times that many times.

NOTE Confidence: 0.775556454545455

01:27:34.230 --> 01:27:35.820
We're going to run the vector

NOTE Confidence: 0.775556454545455

01:27:35.820 --> 01:27:37.184
algorithm that's on over 256.

NOTE Confidence: 0.775556454545455

01:27:37.184 --> 01:27:38.400
Then you're saying we're

NOTE Confidence: 0.775556454545455

01:27:38.400 --> 01:27:41.940
going to do this extra.

NOTE Confidence: 0.775556454545455

01:27:41.940 --> 01:27:43.578
That is, that is going to be

NOTE Confidence: 0.775556454545455

01:27:43.578 --> 01:27:45.319
fixed in terms of the number 256,

NOTE Confidence: 0.775556454545455

01:27:45.320 --> 01:27:48.520
so it's constant, but.

NOTE Confidence: 0.775556454545455

01:27:48.520 --> 01:27:50.810
It adds.

NOTE Confidence: 0.775556454545455

01:27:50.810 --> 01:27:51.040
Like

NOTE Confidence: 0.91438264

01:27:53.160 --> 01:27:53.540
it?

NOTE Confidence: 0.84929383

01:27:58.020 --> 01:28:02.068
It still adds like an act like a.

NOTE Confidence: 0.84929383

01:28:02.070 --> 01:28:05.164
A number of comparisons that depends on.

NOTE Confidence: 0.84929383

01:28:05.170 --> 01:28:06.880
Yeah, yeah. It's essentially saying instead

NOTE Confidence: 0.84929383

01:28:06.880 --> 01:28:08.700
of running like exactly in comparisons,

NOTE Confidence: 0.84929383

01:28:08.700 --> 01:28:10.870
we're around like you know

NOTE Confidence: 0.84929383

01:28:10.870 --> 01:28:12.660
1.2 or 1.01 or something.

NOTE Confidence: 0.84929383

01:28:12.660 --> 01:28:15.150
And yeah, but it's still linear.

NOTE Confidence: 0.84929383

01:28:15.150 --> 01:28:17.392
It's a constant factor. Yeah, yeah, yeah,

NOTE Confidence: 0.84929383

01:28:17.392 --> 01:28:19.858
and since it's not really observable,

NOTE Confidence: 0.84929383

01:28:19.860 --> 01:28:21.449
I think we can get away with

NOTE Confidence: 0.84929383

01:28:21.449 --> 01:28:22.790
it like I view this.

NOTE Confidence: 0.84929383

01:28:22.790 --> 01:28:25.738
Yeah, it's definitely I.

NOTE Confidence: 0.84929383

01:28:25.740 --> 01:28:27.726
If you complain about this, like.

NOTE Confidence: 0.84929383

01:28:27.726 --> 01:28:29.430
Yeah yeah you want.

NOTE Confidence: 0.84929383

01:28:29.430 --> 01:28:31.725
Do you want us to make your code faster

NOTE Confidence: 0.84929383

01:28:31.725 --> 01:28:33.930
enough like I think what we're doing

NOTE Confidence: 0.84929383

01:28:33.930 --> 01:28:36.427
here is strictly less weird and standard

NOTE Confidence: 0.84929383

01:28:36.427 --> 01:28:38.322
bending than our debug comparisons

NOTE Confidence: 0.84929383

01:28:38.322 --> 01:28:40.877
where we do take things like hey,

NOTE Confidence: 0.84929383

01:28:40.880 --> 01:28:42.518
you know you're only allowed in comparisons

NOTE Confidence: 0.84929383

01:28:42.518 --> 01:28:43.999
of the issues to find predicate,

NOTE Confidence: 0.84929383

01:28:44.000 --> 01:28:46.224
we can only find do it twice only.

NOTE Confidence: 0.84929383

01:28:46.230 --> 01:28:47.486
Find the complexity when

NOTE Confidence: 0.84929383

01:28:47.486 --> 01:28:49.056
we make the code slower.

NOTE Confidence: 0.84929383

01:28:49.060 --> 01:28:50.053
Yeah, yeah, yeah,

NOTE Confidence: 0.84929383

01:28:50.053 --> 01:28:52.740
very few people complain when we get past.

NOTE Confidence: 0.84929383

01:28:52.740 --> 01:28:54.246
Let's see what is the types,

NOTE Confidence: 0.84929383

01:28:54.250 --> 01:28:55.629
I don't know if camera is camera.

NOTE Confidence: 0.757525037777778

01:28:57.740 --> 01:28:58.950
I'm trying to find the

NOTE Confidence: 0.757525037777778

01:28:58.950 --> 01:28:59.918
on the compiler warning.

NOTE Confidence: 0.757525037777778

01:28:59.920 --> 01:29:03.898
Yeah, one mode was a clean.

NOTE Confidence: 0.757525037777778

01:29:03.900 --> 01:29:07.316
You know, I'm not an enum class.

NOTE Confidence: 0.757525037777778

01:29:07.320 --> 01:29:11.480
Yes, oh, I think it was in there.

NOTE Confidence: 0.757525037777778

01:29:11.480 --> 01:29:12.956
Yeah, it's a normal, you know.

NOTE Confidence: 0.757525037777778

01:29:12.960 --> 01:29:15.200
So in I guess.

NOTE Confidence: 0.757525037777778

01:29:15.200 --> 01:29:16.396
Yeah, the underlying type.

NOTE Confidence: 0.757525037777778

01:29:16.396 --> 01:29:18.190
The default to be interior and

NOTE Confidence: 0.757525037777778

01:29:18.248 --> 01:29:19.718
then mode itself is another,

NOTE Confidence: 0.757525037777778

01:29:19.720 --> 01:29:22.272
so it's you know equals enum or enum

NOTE Confidence: 0.757525037777778

01:29:22.272 --> 01:29:25.180
and enum and enum and the actual

NOTE Confidence: 0.757525037777778

01:29:25.180 --> 01:29:28.010
variable was a template parameter right?

NOTE Confidence: 0.757525037777778

01:29:28.010 --> 01:29:29.720
I mean non type template parameter.

NOTE Confidence: 0.757525037777778

01:29:29.720 --> 01:29:31.880
Yes, I suspect that's significant

NOTE Confidence: 0.757525037777778

01:29:31.880 --> 01:29:34.040
as well as a constant.

NOTE Confidence: 0.757525037777778

01:29:34.040 --> 01:29:36.260
Was the warning something like conditional

NOTE Confidence: 0.757525037777778

01:29:36.260 --> 01:29:38.330
expression was constant or something?

NOTE Confidence: 0.757525037777778

01:29:38.330 --> 01:29:40.646
It it's an if constexpr prayer.

NOTE Confidence: 0.757525037777778

01:29:40.650 --> 01:29:42.078
Yeah, the computers had a little

NOTE Confidence: 0.757525037777778

01:29:42.078 --> 01:29:43.616
trouble with or the best acting

NOTE Confidence: 0.757525037777778

01:29:43.616 --> 01:29:44.956
classes had a little trouble.

NOTE Confidence: 0.757525037777778

01:29:44.960 --> 01:29:47.522
Maybe fix it that that was just

NOTE Confidence: 0.757525037777778

01:29:47.522 --> 01:29:49.775
in with certainly wouldn't be the

NOTE Confidence: 0.757525037777778

01:29:49.775 --> 01:29:51.660
first time if Constexpr complained

NOTE Confidence: 0.757525037777778

01:29:51.724 --> 01:29:53.348
about a constant expression.

NOTE Confidence: 0.757525037777778

01:29:53.350 --> 01:29:56.574
So essentially it would be for a while.

NOTE Confidence: 0.757525037777778

01:29:56.580 --> 01:29:57.910
Tyler warning and with the

NOTE Confidence: 0.757525037777778

01:29:57.910 --> 01:29:58.708
self contained repro,

NOTE Confidence: 0.757525037777778

01:29:58.710 --> 01:30:00.089
we should just report it's part of

NOTE Confidence: 0.757525037777778

01:30:00.089 --> 01:30:01.953
you know that the east wall is one is

NOTE Confidence: 0.757525037777778

01:30:01.953 --> 01:30:03.230
egregious and probably not necessary.

NOTE Confidence: 0.757525037777778

01:30:03.230 --> 01:30:03.412
Yeah,

NOTE Confidence: 0.757525037777778

01:30:03.412 --> 01:30:04.686
that would definitely need to be fixed.

NOTE Confidence: 0.706580796090909

01:30:07.770 --> 01:30:09.146
At the end I would like to at

NOTE Confidence: 0.706580796090909

01:30:09.146 --> 01:30:10.259
least understand what we're trying

NOTE Confidence: 0.706580796090909

01:30:10.259 --> 01:30:11.474
to permanent work around there

NOTE Confidence: 0.706580796090909

01:30:11.474 --> 01:30:12.449
before permanent work around.

NOTE Confidence: 0.665896308461538

01:30:26.490 --> 01:30:28.198
And playing Jack, it is yeah 5:30

NOTE Confidence: 0.665896308461538

01:30:28.198 --> 01:30:30.150
so we should worry about dinosaurs.

NOTE Confidence: 0.665896308461538

01:30:30.150 --> 01:30:32.220
Yeah, this is very enlightening.

NOTE Confidence: 0.665896308461538

01:30:32.220 --> 01:30:34.775
I did not understand this

NOTE Confidence: 0.665896308461538

01:30:34.775 --> 01:30:37.330
PR when I first glanced.

NOTE Confidence: 0.665896308461538

01:30:37.330 --> 01:30:39.976
Any like an entire day at least?

NOTE Confidence: 0.665896308461538

01:30:39.980 --> 01:30:42.970
Maybe like 2 days to.

NOTE Confidence: 0.665896308461538

01:30:42.970 --> 01:30:45.028
Well, an entire day of work like

NOTE Confidence: 0.665896308461538

01:30:45.028 --> 01:30:47.507
spread over a couple days to actually.

NOTE Confidence: 0.665896308461538

01:30:47.510 --> 01:30:49.330
Decipher what the hell is going on.

NOTE Confidence: 0.665896308461538

01:30:49.330 --> 01:30:52.340
But I mean the actual algorithm is

NOTE Confidence: 0.665896308461538

01:30:52.340 --> 01:30:54.497
not that horrible. It's kind of.

NOTE Confidence: 0.665896308461538

01:30:54.497 --> 01:30:55.942
It's just having to handle

NOTE Confidence: 0.665896308461538

01:30:55.942 --> 01:30:58.060
all of 145 sign in and sign.

NOTE Confidence: 0.665896308461538

01:30:58.060 --> 01:30:59.887
It's kind of well, I'm going to call min.

NOTE Confidence: 0.665896308461538

01:30:59.890 --> 01:31:01.962
I'm going to call vectorized min in

NOTE Confidence: 0.665896308461538

01:31:01.962 --> 01:31:03.958
chunks and then what do I do next?

NOTE Confidence: 0.665896308461538

01:31:03.960 --> 01:31:06.669
And it kind of leads you to this conclusion,

NOTE Confidence: 0.665896308461538

01:31:06.670 --> 01:31:08.882
yeah, but the speedups from the vectorized

NOTE Confidence: 0.665896308461538

01:31:08.882 --> 01:31:11.048
algorithms are so amazing that it is

NOTE Confidence: 0.665896308461538

01:31:11.048 --> 01:31:12.788
well worth especially for this this,

NOTE Confidence: 0.665896308461538

01:31:12.790 --> 01:31:13.903
this really cool.

NOTE Confidence: 0.665896308461538

01:31:13.903 --> 01:31:15.758
Yeah, this is because you're

NOTE Confidence: 0.665896308461538

01:31:15.758 --> 01:31:17.508
breaking the the inner loop.

NOTE Confidence: 0.665896308461538

01:31:17.510 --> 01:31:19.442
And anything if you do the

NOTE Confidence: 0.665896308461538

01:31:19.442 --> 01:31:21.110
naive wouldn't even know that.

NOTE Confidence: 0.665896308461538

01:31:21.110 --> 01:31:22.928
I don't know if we were doing that before,

NOTE Confidence: 0.665896308461538

01:31:22.930 --> 01:31:25.240
but. If you do the naive loop,

NOTE Confidence: 0.665896308461538

01:31:25.240 --> 01:31:27.244
each iteration of the loop is

NOTE Confidence: 0.665896308461538

01:31:27.244 --> 01:31:29.310
dependent on the last iteration.

NOTE Confidence: 0.665896308461538

01:31:29.310 --> 01:31:30.982
Yeah, like nothing better.

NOTE Confidence: 0.665896308461538

01:31:30.982 --> 01:31:33.072
Do you like one comparison?

NOTE Confidence: 0.665896308461538

01:31:33.080 --> 01:31:35.555
You like one you like 2 comparisons, right?

NOTE Confidence: 0.665896308461538

01:31:35.555 --> 01:31:36.980
One for the actual comparison,

NOTE Confidence: 0.665896308461538

01:31:36.980 --> 01:31:38.120
and then one for the loop,

NOTE Confidence: 0.665896308461538

01:31:38.120 --> 01:31:39.440
and then you just sit there

NOTE Confidence: 0.665896308461538

01:31:39.440 --> 01:31:40.320
on the next comparison.

NOTE Confidence: 0.665896308461538

01:31:40.320 --> 01:31:41.008
Wait, yeah,

NOTE Confidence: 0.665896308461538

01:31:41.008 --> 01:31:43.416
waiting for the result to be available.

NOTE Confidence: 0.665896308461538

01:31:43.420 --> 01:31:46.180
And I actually think implementing this

NOTE Confidence: 0.665896308461538

01:31:46.180 --> 01:31:48.760
exact algorithm in scale our code.

NOTE Confidence: 0.665896308461538

01:31:48.760 --> 01:31:50.056
Might improve performance,

NOTE Confidence: 0.665896308461538

01:31:50.056 --> 01:31:52.774
but now that we haven't or might

NOTE Confidence: 0.665896308461538

01:31:52.774 --> 01:31:54.159
improve performance even when we

NOTE Confidence: 0.665896308461538

01:31:54.159 --> 01:31:56.000
can't use the vectorized version,

NOTE Confidence: 0.665896308461538

01:31:56.000 --> 01:31:56.524
yeah unfortunately.

NOTE Confidence: 0.665896308461538

01:31:56.524 --> 01:31:58.096
Then we start running into the

NOTE Confidence: 0.665896308461538

01:31:58.096 --> 01:31:59.512
if somebody's noticing how times

NOTE Confidence: 0.665896308461538

01:31:59.512 --> 01:32:00.636
are revoking their predicate.

NOTE Confidence: 0.665896308461538

01:32:00.640 --> 01:32:02.300
Then we do start losing.

NOTE Confidence: 0.665896308461538

01:32:02.300 --> 01:32:02.780
Yeah,

NOTE Confidence: 0.665896308461538

01:32:02.780 --> 01:32:05.180
well when actually no because

NOTE Confidence: 0.665896308461538

01:32:05.180 --> 01:32:08.398
we don't have to do any login.

NOTE Confidence: 0.665896308461538

01:32:08.400 --> 01:32:09.780
Because the same number, no.

NOTE Confidence: 0.665896308461538

01:32:09.780 --> 01:32:14.016
So what we're duplicating comparisons here.

NOTE Confidence: 0.665896308461538

01:32:14.020 --> 01:32:15.952
I see if you just rearrange the

NOTE Confidence: 0.665896308461538

01:32:15.952 --> 01:32:18.107
order in which we do the comparison.

NOTE Confidence: 0.665896308461538

01:32:18.110 --> 01:32:19.664
More of them when we do it.

NOTE Confidence: 0.665896308461538

01:32:19.670 --> 01:32:21.200
If when we do the comparison,

NOTE Confidence: 0.665896308461538

01:32:21.200 --> 01:32:25.868
the size of the type increases.

NOTE Confidence: 0.665896308461538

01:32:25.870 --> 01:32:26.938
Right, so if we.

NOTE Confidence: 0.935134325

01:32:30.300 --> 01:32:31.528
Like if we do.

NOTE Confidence: 0.6610034

01:32:34.540 --> 01:32:36.728
This. I let's see.

NOTE Confidence: 0.915603305

01:32:39.770 --> 01:32:42.470
Yeah, so we do this comparison and we get

NOTE Confidence: 0.915603305

01:32:42.470 --> 01:32:44.989
this and then when we do the next one.

NOTE Confidence: 0.915603305

01:32:44.990 --> 01:32:49.960
We we only compare.

NOTE Confidence: 0.915603305

01:32:49.960 --> 01:32:53.296
Like we just only do this.

NOTE Confidence: 0.915603305

01:32:53.300 --> 01:32:55.253
Right and the minimum of three and four and

NOTE Confidence: 0.915603305

01:32:55.253 --> 01:32:57.323
the minimum of four and three are the same.

NOTE Confidence: 0.915603305

01:32:57.330 --> 01:33:01.074
Hmm, we know that, and so we just.

NOTE Confidence: 0.915603305

01:33:01.080 --> 01:33:04.100
We mask those bits out and put it that way.

NOTE Confidence: 0.915603305

01:33:04.100 --> 01:33:05.829
Yeah, we would be avoiding the very

NOTE Confidence: 0.915603305

01:33:05.829 --> 01:33:07.411
long dependency chain by doing them in

NOTE Confidence: 0.915603305

01:33:07.411 --> 01:33:08.924
a different order and sort of keeping

NOTE Confidence: 0.915603305

01:33:08.924 --> 01:33:10.556
more results suspended in the error.

NOTE Confidence: 0.915603305

01:33:10.560 --> 01:33:12.120
Yeah, more complexity on that.

NOTE Confidence: 0.915603305

01:33:12.120 --> 01:33:13.716
We need to worry about wait,

NOTE Confidence: 0.915603305

01:33:13.720 --> 01:33:14.960
what if we end early?

NOTE Confidence: 0.915603305

01:33:14.960 --> 01:33:17.480
We don't have multiple 4 or whatever

NOTE Confidence: 0.915603305

01:33:17.480 --> 01:33:19.510
elements but could be feasible.

NOTE Confidence: 0.915603305

01:33:19.510 --> 01:33:21.778
Yeah, if that would keep the same,

NOTE Confidence: 0.915603305

01:33:21.780 --> 01:33:24.020
so that's an idea.

NOTE Confidence: 0.915603305

01:33:24.020 --> 01:33:28.300
Even for user defined types of course.

NOTE Confidence: 0.915603305

01:33:28.300 --> 01:33:29.980
They also you know if it's a user

NOTE Confidence: 0.915603305

01:33:29.980 --> 01:33:31.555
defined type and it has a less

NOTE Confidence: 0.915603305

01:33:31.555 --> 01:33:32.903
operator and the less operator doing

NOTE Confidence: 0.915603305

01:33:32.903 --> 01:33:34.511
a bunch of stuff then it might be

NOTE Confidence: 0.915603305

01:33:34.511 --> 01:33:37.096
that you know it's kind of enough.

NOTE Confidence: 0.915603305

01:33:37.100 --> 01:33:37.564
Yeah, yeah,

NOTE Confidence: 0.915603305

01:33:37.564 --> 01:33:38.956
at that point we have questions

NOTE Confidence: 0.915603305

01:33:38.956 --> 01:33:40.518
like is it diminishing returns.

NOTE Confidence: 0.915603305

01:33:40.520 --> 01:33:41.984
Is this really worth spending a

NOTE Confidence: 0.915603305

01:33:41.984 --> 01:33:42.960
lot of information complexity?

NOTE Confidence: 0.915603305

01:33:42.960 --> 01:33:43.612
Whereas Ohh,

NOTE Confidence: 0.915603305

01:33:43.612 --> 01:33:45.568
you're running min element unlike integers,

NOTE Confidence: 0.915603305

01:33:45.570 --> 01:33:46.920
you know integers are super common.

NOTE Confidence: 0.915603305

01:33:46.920 --> 01:33:47.264
So yeah,

NOTE Confidence: 0.915603305

01:33:47.264 --> 01:33:48.468
I mean this is like an order

NOTE Confidence: 0.915603305

01:33:48.468 --> 01:33:49.459
of magnitude speedup.

NOTE Confidence: 0.915603305

01:33:49.460 --> 01:33:51.620
Yeah, we will do almost anything

NOTE Confidence: 0.915603305

01:33:51.620 --> 01:33:53.890
for an order of magnitude.

NOTE Confidence: 0.915603305

01:33:53.890 --> 01:33:56.149
The common types.

NOTE Confidence: 0.915603305

01:33:56.150 --> 01:33:57.440
So yeah, that's an idea.

NOTE Confidence: 0.915603305

01:33:57.440 --> 01:33:58.760
And then there's,

NOTE Confidence: 0.915603305

01:33:58.760 --> 01:33:59.640
you know.

NOTE Confidence: 0.915603305

01:33:59.640 --> 01:34:01.148
Twiddling around with like?

NOTE Confidence: 0.553085302

01:34:04.070 --> 01:34:05.780
D vector or D templating.

NOTE Confidence: 0.553085302

01:34:05.780 --> 01:34:07.262
This a little bit and rolling

NOTE Confidence: 0.553085302

01:34:07.262 --> 01:34:09.209
some of the stuff that's done at

NOTE Confidence: 0.553085302

01:34:09.209 --> 01:34:10.719
compile time here into runtime.

NOTE Confidence: 0.553085302

01:34:10.720 --> 01:34:13.328
That'll make stuff slower.

NOTE Confidence: 0.553085302

01:34:13.330 --> 01:34:14.970
Either it either won't matter,

NOTE Confidence: 0.553085302

01:34:14.970 --> 01:34:16.902
it will make stuff slower and absolute

NOTE Confidence: 0.553085302

01:34:16.902 --> 01:34:18.610
characters on a micro benchmark.

NOTE Confidence: 0.553085302

01:34:18.610 --> 01:34:21.704
If you're only testing one element size.

NOTE Confidence: 0.553085302

01:34:21.710 --> 01:34:23.554
But if you do,

NOTE Confidence: 0.553085302

01:34:23.554 --> 01:34:27.030
if you call these with multiple sizes.

NOTE Confidence: 0.553085302

01:34:27.030 --> 01:34:29.286
In a row it it could help performance.

NOTE Confidence: 0.553085302

01:34:29.290 --> 01:34:30.650
Yeah that might not be a pure win.

NOTE Confidence: 0.553085302

01:34:30.650 --> 01:34:34.420
So yeah, I believe that it's a lot of work.

NOTE Confidence: 0.553085302

01:34:34.420 --> 01:34:40.316
And it also might be very CPU specific.

NOTE Confidence: 0.553085302

01:34:40.320 --> 01:34:43.020
I'm sorry, yeah.

NOTE Confidence: 0.553085302

01:34:43.020 --> 01:34:43.642
This changes,

NOTE Confidence: 0.553085302

01:34:43.642 --> 01:34:45.197
I already requested changes so.

NOTE Confidence: 0.916611272

01:34:49.590 --> 01:34:52.600
Yeah, that's kind of the.

NOTE Confidence: 0.916611272

01:34:52.600 --> 01:34:55.408
Because a lot of that is like tucking.

NOTE Confidence: 0.916611272

01:34:55.410 --> 01:34:58.002
Like tucking branches and

NOTE Confidence: 0.916611272

01:34:58.002 --> 01:35:00.594
comparisons and stuff in.

NOTE Confidence: 0.916611272

01:35:00.600 --> 01:35:02.310
After specific vector and basically

NOTE Confidence: 0.916611272

01:35:02.310 --> 01:35:03.864
saying oh, the processor is gonna

NOTE Confidence: 0.916611272

01:35:03.864 --> 01:35:05.160
be busy doing this other thing,

NOTE Confidence: 0.916611272

01:35:05.160 --> 01:35:06.936
so I may as well keep

NOTE Confidence: 0.916611272

01:35:06.936 --> 01:35:08.120
all the execution units.

NOTE Confidence: 0.916611272

01:35:08.120 --> 01:35:09.639
Yeah, I may as well do this.

NOTE Confidence: 0.916611272

01:35:09.640 --> 01:35:11.608
I may as well do this extra work.

NOTE Confidence: 0.916611272

01:35:11.610 --> 01:35:14.406
Yeah it's like in exchange for

NOTE Confidence: 0.916611272

01:35:14.406 --> 01:35:17.640
not for you know not not not

NOTE Confidence: 0.916611272

01:35:17.640 --> 01:35:19.940
duplicating the code with templates.

NOTE Confidence: 0.916611272

01:35:19.940 --> 01:35:21.690
I might just do this extra work

NOTE Confidence: 0.916611272

01:35:21.690 --> 01:35:23.470
when I might as well and then.

NOTE Confidence: 0.916611272

01:35:23.470 --> 01:35:24.470
If I use it with,

NOTE Confidence: 0.916611272

01:35:24.470 --> 01:35:26.370
if I use different sizes,

NOTE Confidence: 0.916611272

01:35:26.370 --> 01:35:26.910
everything's already there.

NOTE Confidence: 0.85449779

01:35:29.130 --> 01:35:31.150
But it's yeah. I mean,

NOTE Confidence: 0.85449779

01:35:31.150 --> 01:35:32.298
this is not a lot of code.

NOTE Confidence: 0.85449779

01:35:32.300 --> 01:35:34.644
So yeah, I I don't know how big

NOTE Confidence: 0.85449779

01:35:34.644 --> 01:35:35.840
these instructions are, but.

NOTE Confidence: 0.755910868

01:35:37.940 --> 01:35:38.860
I think it's a lot.

NOTE Confidence: 0.755910868

01:35:38.860 --> 01:35:40.477
It's a lot for maintainers to understand,

NOTE Confidence: 0.755910868

01:35:40.480 --> 01:35:42.580
so I'm happy with this as

NOTE Confidence: 0.755910868

01:35:42.580 --> 01:35:43.606
an initial improvement.

NOTE Confidence: 0.755910868

01:35:43.606 --> 01:35:45.562
Get that order of magnitude and

NOTE Confidence: 0.755910868

01:35:45.562 --> 01:35:47.893
then later on we can think about

NOTE Confidence: 0.755910868

01:35:47.893 --> 01:35:49.185
potentially tuning it more.

NOTE Confidence: 0.755910868

01:35:49.190 --> 01:35:52.568
Worried about like the correctness issues?

NOTE Confidence: 0.755910868

01:35:52.570 --> 01:35:55.650
Ohh great looks like.

NOTE Confidence: 0.755910868

01:35:55.650 --> 01:35:58.209
Already been fixed.

NOTE Confidence: 0.755910868

01:35:58.210 --> 01:36:00.010
When was this fixed? April 8th.

NOTE Confidence: 0.755910868

01:36:00.010 --> 01:36:02.026
Wow yeah, so yeah, this would not

NOTE Confidence: 0.755910868

01:36:02.026 --> 01:36:04.107
yet have shipped in a public preview,

NOTE Confidence: 0.755910868

01:36:04.110 --> 01:36:05.377
so Alex would not have seen it.

NOTE Confidence: 0.755910868

01:36:05.380 --> 01:36:06.864
Didn't we just, ohh yeah, it's.

NOTE Confidence: 0.755910868

01:36:06.864 --> 01:36:09.856
But we're the VS release is so we're

NOTE Confidence: 0.755910868

01:36:09.856 --> 01:36:13.047
going to be shipping on a fast frequency,

NOTE Confidence: 0.755910868

01:36:13.050 --> 01:36:15.070
but the latency is significant.

NOTE Confidence: 0.755910868

01:36:15.070 --> 01:36:16.710
So stuff that was like checked in and

NOTE Confidence: 0.755910868

01:36:16.710 --> 01:36:18.307
should we just give it a transition?

NOTE Confidence: 0.755910868

01:36:18.310 --> 01:36:21.806
VSO, yes, that would be reasonable to site,

NOTE Confidence: 0.755910868

01:36:21.810 --> 01:36:25.743
but I would cite the where the PR number.

NOTE Confidence: 0.755910868

01:36:25.750 --> 01:36:27.330
Yeah the PR number.

NOTE Confidence: 0.755910868

01:36:27.330 --> 01:36:30.070
Because that way we can look at

NOTE Confidence: 0.755910868

01:36:30.070 --> 01:36:31.902
it so MSVC PR blog because that

NOTE Confidence: 0.755910868

01:36:31.902 --> 01:36:33.274
way we can go to directly say,

NOTE Confidence: 0.755910868

01:36:33.280 --> 01:36:36.118
OK, Jonathan fixed this in April.

NOTE Confidence: 0.755910868

01:36:36.120 --> 01:36:36.638
It's available.

NOTE Confidence: 0.755910868

01:36:36.638 --> 01:36:36.897
Actually,

NOTE Confidence: 0.755910868

01:36:36.897 --> 01:36:38.980
we should know when this is gonna ship.

NOTE Confidence: 0.755910868

01:36:38.980 --> 01:36:42.312
This is gonna be 17 to preview

NOTE Confidence: 0.755910868

01:36:42.312 --> 01:36:44.180
two sorry yes 17.

NOTE Confidence: 0.755910868

01:36:44.180 --> 01:36:45.392
Two preview two.

NOTE Confidence: 0.755910868

01:36:45.392 --> 01:36:48.743
Yeah but no seven sorry 17 three preview

NOTE Confidence: 0.755910868

01:36:48.743 --> 01:36:51.774
22 just 17 too many seventeens 17.

NOTE Confidence: 0.755910868

01:36:51.780 --> 01:36:53.005
Two just went general viability

NOTE Confidence: 0.755910868

01:36:53.005 --> 01:36:54.737
17 three Preview 2 is the next

NOTE Confidence: 0.755910868

01:36:54.737 --> 01:36:55.872
one that's going to contain

NOTE Confidence: 0.755910868

01:36:55.872 --> 01:36:57.249
all sorts of awesome fixes.

NOTE Confidence: 0.755910868

01:36:57.250 --> 01:36:58.969
But we have to specify date in the future.

NOTE Confidence: 0.755910868

01:36:58.970 --> 01:36:59.262
Yeah,

NOTE Confidence: 0.755910868

01:36:59.262 --> 01:37:01.598
we have to be one behind though because.

NOTE Confidence: 0.755910868

01:37:01.600 --> 01:37:03.930
Premium mobile like we can't

NOTE Confidence: 0.755910868

01:37:03.930 --> 01:37:05.860
just make the change now no.

NOTE Confidence: 0.755910868

01:37:05.860 --> 01:37:09.190
No we can't but but the the transition

NOTE Confidence: 0.755910868

01:37:09.190 --> 01:37:11.290
comment could be ohh transition

NOTE Confidence: 0.755910868

01:37:11.290 --> 01:37:13.780
comma 17 three Preview 2 why do

NOTE Confidence: 0.755910868

01:37:13.780 --> 01:37:16.346
you do this and that will be the

NOTE Confidence: 0.755910868

01:37:16.346 --> 01:37:18.241
reminder that when somebody goes

NOTE Confidence: 0.755910868

01:37:18.241 --> 01:37:20.975
and updates the tool set if it's 17

NOTE Confidence: 0.755910868

01:37:20.975 --> 01:37:23.995
three Preview 2 to go get rid of the

NOTE Confidence: 0.755910868

01:37:23.995 --> 01:37:27.808
work around let's see where is the thing.

NOTE Confidence: 0.755910868

01:37:27.810 --> 01:37:29.630
I think you could look for mode

NOTE Confidence: 0.755910868

01:37:29.630 --> 01:37:31.690
and I think you might have just.

NOTE Confidence: 0.755910868

01:37:31.690 --> 01:37:33.434
Pass one of them.

NOTE Confidence: 0.755910868

01:37:33.434 --> 01:37:34.306
Yeah here.

NOTE Confidence: 0.8078885

01:37:37.490 --> 01:37:37.710
OK.

NOTE Confidence: 0.5301966

01:37:54.100 --> 01:37:57.448
Auto linker doesn't do the installation.

NOTE Confidence: 0.5301966

01:37:57.450 --> 01:38:01.125
Yeah that yeah. Also, it's a common.

NOTE Confidence: 0.5301966

01:38:01.130 --> 01:38:05.360
Yes, I do love searching for that. Uh.

NOTE Confidence: 0.866707513333333

01:38:07.430 --> 01:38:10.148
What can I put to separate, recommend,

NOTE Confidence: 0.866707513333333

01:38:10.148 --> 01:38:13.226
cut out the MSVC bit, make the

NOTE Confidence: 0.866707513333333

01:38:13.226 --> 01:38:15.638
comment just say 17 three Preview 2.

NOTE Confidence: 0.866707513333333

01:38:15.638 --> 01:38:17.880
That's all we need in the source code.

NOTE Confidence: 0.07565439

01:38:20.640 --> 01:38:24.220
Then if you yeah, close the code

NOTE Confidence: 0.07565439

01:38:24.220 --> 01:38:26.319
block and then your comment here.

NOTE Confidence: 0.07565439

01:38:26.320 --> 01:38:30.128
Psych, MSD CPR law and that will be.

NOTE Confidence: 0.85759042

01:38:43.260 --> 01:38:44.380
So that's good. Yeah,

NOTE Confidence: 0.85759042

01:38:44.380 --> 01:38:46.837
this is part of our long term strategy

NOTE Confidence: 0.85759042

01:38:46.837 --> 01:38:49.315
of preventing us from drowning in an

NOTE Confidence: 0.85759042

01:38:49.315 --> 01:38:51.439
endless sea of compiler workarounds.

NOTE Confidence: 0.85759042

01:38:51.440 --> 01:38:53.420
Like we always get some,

NOTE Confidence: 0.85759042

01:38:53.420 --> 01:38:55.841
but we gotta get rid of them at some

NOTE Confidence: 0.85759042

01:38:55.841 --> 01:38:57.689
point and consistently commenting them

NOTE Confidence: 0.85759042

01:38:57.689 --> 01:39:00.329
is the way to avoid having tutors

NOTE Confidence: 0.85759042

01:39:00.329 --> 01:39:02.777
that end up being like a decade old.

NOTE Confidence: 0.85759042

01:39:02.780 --> 01:39:05.916
Or just weird bits of code that nobody

NOTE Confidence: 0.85759042

01:39:05.916 --> 01:39:07.792
can remember. What we were doing.

NOTE Confidence: 0.85759042

01:39:07.792 --> 01:39:09.780
Yeah Ohh Karen asked what the rationale

NOTE Confidence: 0.85759042

01:39:09.780 --> 01:39:11.824
is and I think we've covered it.

NOTE Confidence: 0.85759042

01:39:11.830 --> 01:39:15.120
Which is that it makes.

NOTE Confidence: 0.85759042

01:39:15.120 --> 01:39:18.340
The Min, Max and Min Max algorithms

NOTE Confidence: 0.85759042

01:39:18.340 --> 01:39:22.060
like 10 or 20 times faster, yeah?

NOTE Confidence: 0.85759042

01:39:22.060 --> 01:39:25.250
It's a huge speed up.

NOTE Confidence: 0.85759042

01:39:25.250 --> 01:39:26.560
And yeah, and the rationale

NOTE Confidence: 0.85759042

01:39:26.560 --> 01:39:29.280
behind why that is, it's like.

NOTE Confidence: 0.85759042

01:39:29.280 --> 01:39:32.570
Vector instruction is good and.

NOTE Confidence: 0.85759042

01:39:32.570 --> 01:39:33.680
Huge dependency,

NOTE Confidence: 0.85759042

01:39:33.680 --> 01:39:35.900
you know interloop dependencies.

NOTE Confidence: 0.85759042

01:39:35.900 --> 01:39:36.899
Not good, yeah,

NOTE Confidence: 0.85759042

01:39:36.899 --> 01:39:39.230
and the ability to make code automatically

NOTE Confidence: 0.85759042

01:39:39.292 --> 01:39:40.812
fast when somebody upgrades is

NOTE Confidence: 0.85759042

01:39:40.812 --> 01:39:43.029
like just the the best thing ever.

NOTE Confidence: 0.85759042

01:39:43.030 --> 01:39:45.230
And not only is it an interloop dependency,

NOTE Confidence: 0.85759042

01:39:45.230 --> 01:39:49.040
but it's also kind of unpredictable,

NOTE Confidence: 0.85759042

01:39:49.040 --> 01:39:51.360
yeah?

NOTE Confidence: 0.85759042

01:39:51.360 --> 01:39:53.958
Yeah, if you have random data

NOTE Confidence: 0.85759042

01:39:53.958 --> 01:39:56.510
that that comparison is gonna be.

NOTE Confidence: 0.85759042

01:39:56.510 --> 01:39:58.350
It's gonna be taken in half the time,

NOTE Confidence: 0.85759042

01:39:58.350 --> 01:39:59.710
yeah yeah yeah excellent.

NOTE Confidence: 0.85759042

01:39:59.710 --> 01:40:01.750
Excellent point really so so you

NOTE Confidence: 0.85759042

01:40:01.811 --> 01:40:03.629
you you really can't win there.

NOTE Confidence: 0.814393592857143

01:40:06.550 --> 01:40:10.148
Yeah, so this is a substantial speedup,

NOTE Confidence: 0.814393592857143

01:40:10.150 --> 01:40:13.078
and the proposed future directions are

NOTE Confidence: 0.814393592857143

01:40:13.078 --> 01:40:17.190
in a VX2 version and an AVX 512 version.

NOTE Confidence: 0.814393592857143

01:40:17.190 --> 01:40:18.470
We have to benchmark it,

NOTE Confidence: 0.814393592857143

01:40:18.470 --> 01:40:20.360
because obviously moving up to

NOTE Confidence: 0.814393592857143

01:40:20.360 --> 01:40:22.250
bigger vectors uses more memory.

NOTE Confidence: 0.814393592857143

01:40:22.250 --> 01:40:26.714
Yeah, and also. And so with the previous

NOTE Confidence: 0.814393592857143

01:40:26.720 --> 01:40:29.936
8X512 PR that we were unable to find

NOTE Confidence: 0.814393592857143

01:40:29.940 --> 01:40:32.956
actual speedups from that, so I if P.

NOTE Confidence: 0.814393592857143

01:40:32.960 --> 01:40:35.486
X2 has legit actually speed up, yeah, 3X2.

NOTE Confidence: 0.814393592857143

01:40:35.486 --> 01:40:37.552
We've seen quite good results 3X512.

NOTE Confidence: 0.814393592857143

01:40:37.552 --> 01:40:39.208
We would definitely need to make

NOTE Confidence: 0.814393592857143

01:40:39.208 --> 01:40:41.194
sure that it's going to be faster

NOTE Confidence: 0.814393592857143

01:40:41.194 --> 01:40:42.574
before committing any code there.

NOTE Confidence: 0.814393592857143

01:40:42.580 --> 01:40:44.740
Yeah, plus, it's available is

NOTE Confidence: 0.814393592857143

01:40:44.740 --> 01:40:46.922
still quite limited, but for AVX,

NOTE Confidence: 0.814393592857143

01:40:46.922 --> 01:40:49.466
2 AVX 512 it would be nice if

NOTE Confidence: 0.814393592857143

01:40:49.466 --> 01:40:51.908
there's a couple AVX 512 instructions

NOTE Confidence: 0.814393592857143

01:40:51.908 --> 01:40:56.010
that would be great to use, but.

NOTE Confidence: 0.814393592857143

01:40:56.010 --> 01:40:56.500
Yeah.

NOTE Confidence: 0.759436176

01:40:58.960 --> 01:41:00.500
So yeah, that's not PR.

NOTE Confidence: 0.759436176

01:41:00.500 --> 01:41:01.596
It's a neat PR.

NOTE Confidence: 0.759436176

01:41:01.596 --> 01:41:03.240
Hopefully we can get it merged.

NOTE Confidence: 0.759436176

01:41:03.240 --> 01:41:04.134
Relatively soon, yeah,

NOTE Confidence: 0.759436176

01:41:04.134 --> 01:41:06.220
I'll take a look at it soon.

NOTE Confidence: 0.759436176

01:41:06.220 --> 01:41:08.444
Hopefully we can get it soon for 17.

NOTE Confidence: 0.759436176

01:41:08.450 --> 01:41:09.629
Three preview three.

NOTE Confidence: 0.759436176

01:41:09.629 --> 01:41:11.987
Yeah, which is the next thing

NOTE Confidence: 0.759436176

01:41:11.987 --> 01:41:14.250
that our code is flowing into.

NOTE Confidence: 0.835188748181818

01:41:16.810 --> 01:41:18.265
Yeah, and then we'll eventually

NOTE Confidence: 0.835188748181818

01:41:18.265 --> 01:41:20.070
have to port it to neon.

NOTE Confidence: 0.835188748181818

01:41:20.070 --> 01:41:22.320
Yes, there's a separate PR

NOTE Confidence: 0.835188748181818

01:41:22.320 --> 01:41:25.010
for extending all this to R64.

NOTE Confidence: 0.835188748181818

01:41:25.010 --> 01:41:27.780
Well, it only does reverse.

NOTE Confidence: 0.835188748181818

01:41:27.780 --> 01:41:29.838
Which is what we had vectorized

NOTE Confidence: 0.835188748181818

01:41:29.838 --> 01:41:31.590
before Alex cause teeth ended

NOTE Confidence: 0.835188748181818

01:41:31.590 --> 01:41:33.330
stuff yeah but yeah yeah we're

NOTE Confidence: 0.835188748181818

01:41:33.330 --> 01:41:34.800
gonna need to you know have

NOTE Confidence: 0.835188748181818

01:41:34.800 --> 01:41:35.860
additional follow up PR's too.

NOTE Confidence: 0.835188748181818

01:41:35.860 --> 01:41:36.460
Yeah but.

NOTE Confidence: 0.89773556

01:41:38.710 --> 01:41:40.411
Yeah, I mean now that we have

NOTE Confidence: 0.89773556

01:41:40.411 --> 01:41:41.730
the structure of this code,

NOTE Confidence: 0.89773556

01:41:41.730 --> 01:41:43.446
doing it in neon is good.

NOTE Confidence: 0.89773556

01:41:43.450 --> 01:41:45.990
We do need to discuss.

NOTE Confidence: 0.89773556

01:41:45.990 --> 01:41:47.680
Our general strategy for once,

NOTE Confidence: 0.89773556

01:41:47.680 --> 01:41:48.892
we have vectorized

NOTE Confidence: 0.89773556

01:41:48.892 --> 01:41:50.508
algorithms for multiple Isas.

NOTE Confidence: 0.9009116

01:41:52.750 --> 01:41:56.878
But yeah. That's for another time.

NOTE Confidence: 0.9009116

01:41:56.880 --> 01:41:58.833
So yeah, I think that about wraps it up.

NOTE Confidence: 0.671079193333333

01:42:02.000 --> 01:42:02.888
Cool thanks everyone.

NOTE Confidence: 0.7335779

01:42:05.240 --> 01:42:08.148
Yeah, any remaining questions.

NOTE Confidence: 0.753100198461538

01:42:14.270 --> 01:42:16.961
It looks like that's it in the at least

NOTE Confidence: 0.753100198461538

01:42:16.961 --> 01:42:19.190
put everybody to sleep. And yeah,

NOTE Confidence: 0.753100198461538

01:42:19.190 --> 01:42:20.870
probably stop the recording now, yeah?
