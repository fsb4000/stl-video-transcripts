WEBVTT

NOTE duration:"01:37:58"

NOTE recognizability:0.761

NOTE language:en-us

NOTE Confidence: 0.754214719230769

00:00:17.050 --> 00:00:19.262
OK, hi everyone and welcome back to

NOTE Confidence: 0.754214719230769

00:00:19.262 --> 00:00:21.230
another VC libraries Open code review.

NOTE Confidence: 0.754214719230769

00:00:21.230 --> 00:00:24.363
I'm today we'll be looking at P12O6R7

NOTE Confidence: 0.754214719230769

00:00:24.363 --> 00:00:26.128
conversions from ranges to containers.

NOTE Confidence: 0.754214719230769

00:00:26.130 --> 00:00:27.666
Again, we looked at it during

NOTE Confidence: 0.754214719230769

00:00:27.666 --> 00:00:29.110
the last video code review,

NOTE Confidence: 0.754214719230769

00:00:29.110 --> 00:00:33.268
but as this is a very large PR adding

NOTE Confidence: 0.754214719230769

00:00:33.270 --> 00:00:36.581
7186 lines and removing or modifying 275,

NOTE Confidence: 0.754214719230769

00:00:36.581 --> 00:00:38.749
we did not get through all of it,

NOTE Confidence: 0.754214719230769

00:00:38.750 --> 00:00:41.126
so I will try to get through as

NOTE Confidence: 0.754214719230769

00:00:41.126 --> 00:00:43.707
much as I can in today's session.

NOTE Confidence: 0.754214719230769

00:00:43.710 --> 00:00:45.410
As we catch up, uh,

NOTE Confidence: 0.754214719230769

00:00:45.410 --> 00:00:48.230
after the previous partial code review,

NOTE Confidence: 0.754214719230769

00:00:48.230 --> 00:00:52.280
my uh, submitted 6 comments and

NOTE Confidence: 0.754214719230769

00:00:52.280 --> 00:00:55.393
then Casey pushed 6 commits here,

NOTE Confidence: 0.754214719230769

00:00:55.393 --> 00:00:58.448
so I will try to see what has

NOTE Confidence: 0.754214719230769

00:00:58.448 --> 00:01:01.528
changed in the last couple of weeks,

NOTE Confidence: 0.754214719230769

00:01:01.530 --> 00:01:04.970
and then we'll resume reviewing.

NOTE Confidence: 0.754214719230769

00:01:04.970 --> 00:01:05.752
So actually,

NOTE Confidence: 0.754214719230769

00:01:05.752 --> 00:01:08.489
let me also expand what I commented

NOTE Confidence: 0.754214719230769

00:01:08.489 --> 00:01:11.643
on as a reminder of what we looked at.

NOTE Confidence: 0.754214719230769

00:01:11.650 --> 00:01:13.904
Remember, we looked at the list container.

NOTE Confidence: 0.754214719230769

00:01:13.910 --> 00:01:16.570
We looked at some of the common

NOTE Confidence: 0.754214719230769

00:01:16.570 --> 00:01:19.566
changes to X utility. OK, so.

NOTE Confidence: 0.754214719230769

00:01:19.566 --> 00:01:22.256
Let's go to files changed.

NOTE Confidence: 0.754214719230769

00:01:22.260 --> 00:01:22.928
Let's go to this.

NOTE Confidence: 0.754214719230769

00:01:22.928 --> 00:01:24.449
PR is not quite as large as it seems,

NOTE Confidence: 0.754214719230769

00:01:24.450 --> 00:01:26.610
because many of the changes are test code.

NOTE Confidence: 0.754214719230769

00:01:26.610 --> 00:01:28.986
The actual product changes are less.

NOTE Confidence: 0.754214719230769

00:01:28.990 --> 00:01:31.339
So I'm going to Alt click on the Chevron

NOTE Confidence: 0.754214719230769

00:01:31.339 --> 00:01:33.797
and expand and then minimize everything.

NOTE Confidence: 0.754214719230769

00:01:33.800 --> 00:01:34.706
There we go.

NOTE Confidence: 0.754214719230769

00:01:34.706 --> 00:01:37.696
OK, so I'm going to use get here to

NOTE Confidence: 0.754214719230769

00:01:37.696 --> 00:01:40.078
show changes since my last review.

NOTE Confidence: 0.754214719230769

00:01:40.080 --> 00:01:43.069
This will select the last six commits.

NOTE Confidence: 0.754214719230769

00:01:43.070 --> 00:01:43.673
Yeah,

NOTE Confidence: 0.754214719230769

00:01:43.673 --> 00:01:47.291
including comments or changes in response

NOTE Confidence: 0.754214719230769

00:01:47.291 --> 00:01:50.048
to our contributor miscoe's comments,

NOTE Confidence: 0.754214719230769

00:01:50.048 --> 00:01:51.470
so that's great,

NOTE Confidence: 0.754214719230769

00:01:51.470 --> 00:01:52.230
OK?

NOTE Confidence: 0.804713595714286

00:01:54.470 --> 00:01:57.494
So we've got some changes to deck.

NOTE Confidence: 0.804713595714286

00:01:57.500 --> 00:02:01.250
These are actually fairly large changes.

NOTE Confidence: 0.804713595714286

00:02:01.250 --> 00:02:02.798
OK, so some of these containers

NOTE Confidence: 0.804713595714286

00:02:02.798 --> 00:02:04.230
I haven't even looked at yet,

NOTE Confidence: 0.804713595714286

00:02:04.230 --> 00:02:07.121
so I am not going to look

NOTE Confidence: 0.804713595714286

00:02:07.121 --> 00:02:10.109
at for these recent changes.

NOTE Confidence: 0.804713595714286

00:02:10.110 --> 00:02:11.220
Changes to the containers that

NOTE Confidence: 0.804713595714286

00:02:11.220 --> 00:02:12.540
I haven't even looked at yet.

NOTE Confidence: 0.804713595714286

00:02:12.540 --> 00:02:15.015
I'll simply review those when we get to them,

NOTE Confidence: 0.804713595714286

00:02:15.020 --> 00:02:16.910
but we'll look at list and I think I

NOTE Confidence: 0.804713595714286

00:02:16.910 --> 00:02:18.670
might have looked forward last time.

NOTE Confidence: 0.804713595714286

00:02:18.670 --> 00:02:21.078
We'll look at forward list as well.

NOTE Confidence: 0.804713595714286

00:02:21.080 --> 00:02:22.000
So we got forward lists.

NOTE Confidence: 0.804713595714286

00:02:22.000 --> 00:02:23.272
We got lists there.

NOTE Confidence: 0.804713595714286

00:02:23.272 --> 00:02:25.180
And then I see some elderidge

NOTE Confidence: 0.804713595714286

00:02:25.247 --> 00:02:26.999
issues have been submitted,

NOTE Confidence: 0.804713595714286

00:02:27.000 --> 00:02:31.473
and then we also looked at X utility OK.

NOTE Confidence: 0.804713595714286

00:02:31.480 --> 00:02:34.378
I want to understand what's happening here.

NOTE Confidence: 0.804713595714286

00:02:34.380 --> 00:02:38.980
OK, so these changes are not too big in list.

NOTE Confidence: 0.804713595714286

00:02:38.980 --> 00:02:39.542
This is.

NOTE Confidence: 0.804713595714286

00:02:39.542 --> 00:02:41.790
I remember a preexisting issue that I had

NOTE Confidence: 0.804713595714286

00:02:41.849 --> 00:02:44.099
noticed where assign took two iterators.

NOTE Confidence: 0.804713595714286

00:02:44.100 --> 00:02:46.020
So this is saying hey list.

NOTE Confidence: 0.804713595714286

00:02:46.020 --> 00:02:47.844
I have a range of things I would

NOTE Confidence: 0.804713595714286

00:02:47.844 --> 00:02:49.416
like to replace your contents

NOTE Confidence: 0.804713595714286

00:02:49.416 --> 00:02:51.938
with this other range and before

NOTE Confidence: 0.804713595714286

00:02:51.938 --> 00:02:54.733
we unwrap iterators like vector

NOTE Confidence: 0.804713595714286

00:02:54.733 --> 00:02:57.720
iterators down to raw pointers,

NOTE Confidence: 0.804713595714286

00:02:57.720 --> 00:02:59.400
we conventionally need to verify them,

NOTE Confidence: 0.804713595714286

00:02:59.400 --> 00:03:00.625
which means we go through

NOTE Confidence: 0.804713595714286

00:03:00.625 --> 00:03:01.850
a helper function in debug.

NOTE Confidence: 0.804713595714286

00:03:01.850 --> 00:03:04.290
Code and this makes sure that the iterators

NOTE Confidence: 0.804713595714286

00:03:04.290 --> 00:03:06.458
belong to the same parent container,

NOTE Confidence: 0.804713595714286

00:03:06.460 --> 00:03:08.128
so you don't accidentally

NOTE Confidence: 0.804713595714286

00:03:08.128 --> 00:03:10.213
say VEC one dot begin.

NOTE Confidence: 0.804713595714286

00:03:10.220 --> 00:03:12.425
VEC 2 dot end unrelated iterators would

NOTE Confidence: 0.804713595714286

00:03:12.425 --> 00:03:15.209
be bad and for random access iterators.

NOTE Confidence: 0.804713595714286

00:03:15.210 --> 00:03:17.690
This verifies that the iterator

NOTE Confidence: 0.804713595714286

00:03:17.690 --> 00:03:19.178
is not transposed,

NOTE Confidence: 0.804713595714286

00:03:19.180 --> 00:03:21.100
they need to be in the order first

NOTE Confidence: 0.804713595714286

00:03:21.100 --> 00:03:23.096
last and if you give us last first,

NOTE Confidence: 0.804713595714286

00:03:23.100 --> 00:03:23.840
that's incorrect.

NOTE Confidence: 0.804713595714286

00:03:23.840 --> 00:03:26.430
So that's what ADL verify range does.

NOTE Confidence: 0.804713595714286

00:03:26.430 --> 00:03:28.278
And we need to call that before

NOTE Confidence: 0.804713595714286

00:03:28.278 --> 00:03:29.933
unwrapping down to rough pointers

NOTE Confidence: 0.804713595714286

00:03:29.933 --> 00:03:31.139
or something unchecked,

NOTE Confidence: 0.804713595714286

00:03:31.140 --> 00:03:31.980
so that change is good.

NOTE Confidence: 0.804713595714286

00:03:31.980 --> 00:03:32.890
That was a pre existing.

NOTE Confidence: 0.804713595714286

00:03:32.890 --> 00:03:35.729
Thank you in forward list.

NOTE Confidence: 0.804713595714286

00:03:35.729 --> 00:03:37.744
Let's see what's happening here.

NOTE Confidence: 0.804713595714286

00:03:37.750 --> 00:03:40.390
So.

NOTE Confidence: 0.804713595714286

00:03:40.390 --> 00:03:42.190
The new Prepend range function and

NOTE Confidence: 0.804713595714286

00:03:42.190 --> 00:03:44.150
I do not remember seeing this.

NOTE Confidence: 0.804713595714286

00:03:44.150 --> 00:03:46.859
This might actually be new to me.

NOTE Confidence: 0.804713595714286

00:03:46.860 --> 00:03:49.009
We used to call the public function

NOTE Confidence: 0.804713595714286

00:03:49.009 --> 00:03:51.093
insert range after and now Casey's

NOTE Confidence: 0.804713595714286

00:03:51.093 --> 00:03:52.557
calling an internal function.

NOTE Confidence: 0.804713595714286

00:03:52.560 --> 00:03:55.955
This is presumably being done for efficiency.

NOTE Confidence: 0.804713595714286

00:03:55.960 --> 00:03:58.162
So call the internal insert range

NOTE Confidence: 0.804713595714286

00:03:58.162 --> 00:04:01.138
after and tell us we're going to pass

NOTE Confidence: 0.804713595714286

00:04:01.138 --> 00:04:03.696
our before head pointer to a node.

NOTE Confidence: 0.804713595714286

00:04:03.696 --> 00:04:05.172
That's the internal replacement

NOTE Confidence: 0.804713595714286

00:04:05.172 --> 00:04:06.340
for before begin,

NOTE Confidence: 0.804713595714286

00:04:06.340 --> 00:04:07.795
and then instead of passing

NOTE Confidence: 0.804713595714286

00:04:07.795 --> 00:04:08.668
the range directly,

NOTE Confidence: 0.804713595714286

00:04:08.670 --> 00:04:10.644
we can get iterators into it and

NOTE Confidence: 0.804713595714286

00:04:10.644 --> 00:04:13.158
they can be unchecked iterators here.

NOTE Confidence: 0.804713595714286

00:04:13.160 --> 00:04:14.645
We don't need any verification

NOTE Confidence: 0.804713595714286

00:04:14.645 --> 00:04:16.661
because with the range we know we

NOTE Confidence: 0.804713595714286

00:04:16.661 --> 00:04:18.299
can grab first and last or begin

NOTE Confidence: 0.804713595714286

00:04:18.299 --> 00:04:20.023
and end without transposing them

NOTE Confidence: 0.804713595714286

00:04:20.023 --> 00:04:21.459
or getting wrong parents.

NOTE Confidence: 0.804713595714286

00:04:21.460 --> 00:04:22.948
So ranges you begin is unchecked.

NOTE Confidence: 0.804713595714286

00:04:22.950 --> 00:04:24.080
Begin our internal function range

NOTE Confidence: 0.804713595714286

00:04:24.080 --> 00:04:26.560
ranges you in range, that's good.

NOTE Confidence: 0.804713595714286

00:04:26.560 --> 00:04:29.160
Insert range after is changing.

NOTE Confidence: 0.804713595714286

00:04:29.160 --> 00:04:30.822
It looks like a large change

NOTE Confidence: 0.804713595714286

00:04:30.822 --> 00:04:32.428
because the classes are being

NOTE Confidence: 0.804713595714286

00:04:32.428 --> 00:04:34.180
renamed apparently for consistency.

NOTE Confidence: 0.804713595714286

00:04:34.180 --> 00:04:36.856
So template class inner class sent

NOTE Confidence: 0.804713595714286

00:04:36.856 --> 00:04:39.110
for Sentinel iterator insert range

NOTE Confidence: 0.804713595714286

00:04:39.110 --> 00:04:40.664
after because this is internal

NOTE Confidence: 0.804713595714286

00:04:40.664 --> 00:04:42.880
Now this will take a node Porter.

NOTE Confidence: 0.804713595714286

00:04:42.880 --> 00:04:44.578
This is our internal node pointer

NOTE Confidence: 0.804713595714286

00:04:44.578 --> 00:04:46.552
type rather than a fully wrapped

NOTE Confidence: 0.804713595714286

00:04:46.552 --> 00:04:48.120
constant iterator which participates

NOTE Confidence: 0.804713595714286

00:04:48.120 --> 00:04:50.615
in debug checking and all that node

NOTE Confidence: 0.804713595714286

00:04:50.615 --> 00:04:52.355
and interfirst concept in the last

NOTE Confidence: 0.73778617375

00:04:52.360 --> 00:04:54.504
insert inclusive first last

NOTE Confidence: 0.73778617375

00:04:54.504 --> 00:04:56.648
exclusive after P node.

NOTE Confidence: 0.73778617375

00:04:56.650 --> 00:04:58.370
Comment was correctly updated.

NOTE Confidence: 0.73778617375

00:04:58.370 --> 00:05:00.950
We don't need any verify because

NOTE Confidence: 0.73778617375

00:05:01.018 --> 00:05:03.138
this is internal and working

NOTE Confidence: 0.73778617375

00:05:03.138 --> 00:05:04.834
with unchecked node putter.

NOTE Confidence: 0.73778617375

00:05:04.840 --> 00:05:06.996
If the range is empty then simply

NOTE Confidence: 0.73778617375

00:05:06.996 --> 00:05:09.185
take that pointer to a node and wrap

NOTE Confidence: 0.73778617375

00:05:09.185 --> 00:05:11.060
it up in iterator and return it.

NOTE Confidence: 0.73778617375

00:05:11.060 --> 00:05:12.730
Otherwise do the same behavior,

NOTE Confidence: 0.73778617375

00:05:12.730 --> 00:05:14.120
but what we're being given

NOTE Confidence: 0.73778617375

00:05:14.120 --> 00:05:15.510
is just the P notes.

NOTE Confidence: 0.73778617375

00:05:15.510 --> 00:05:16.574
We don't need to say we're putter.

NOTE Confidence: 0.73778617375

00:05:16.580 --> 00:05:17.537
That's all good.

NOTE Confidence: 0.73778617375

00:05:17.537 --> 00:05:19.132
Then the public insert after

NOTE Confidence: 0.73778617375

00:05:19.132 --> 00:05:21.158
this is where the check moves.

NOTE Confidence: 0.73778617375

00:05:21.160 --> 00:05:23.959
So if we're in error debug level equals two.

NOTE Confidence: 0.73778617375

00:05:23.960 --> 00:05:26.756
Verify that the where iterators container.

NOTE Confidence: 0.73778617375

00:05:26.760 --> 00:05:29.288
This is how our internal function to find.

NOTE Confidence: 0.73778617375

00:05:29.290 --> 00:05:31.695
An iterator's parent container that

NOTE Confidence: 0.73778617375

00:05:31.695 --> 00:05:35.551
needs to be re address so it needs to

NOTE Confidence: 0.73778617375

00:05:35.551 --> 00:05:38.509
be the stood address of my permit L2.

NOTE Confidence: 0.73778617375

00:05:38.510 --> 00:05:39.662
This bit here I can't remember

NOTE Confidence: 0.73778617375

00:05:39.662 --> 00:05:41.103
if I talked about this in a

NOTE Confidence: 0.73778617375

00:05:41.103 --> 00:05:41.947
previous video code review,

NOTE Confidence: 0.73778617375

00:05:41.950 --> 00:05:45.460
but this is related to our.

NOTE Confidence: 0.73778617375

00:05:45.460 --> 00:05:47.480
Uh, compressed pair optimization,

NOTE Confidence: 0.73778617375

00:05:47.480 --> 00:05:49.500
to avoid storing allocators,

NOTE Confidence: 0.73778617375

00:05:49.500 --> 00:05:51.236
because if an allocator state list which is

NOTE Confidence: 0.73778617375

00:05:51.236 --> 00:05:53.060
the case for vast majority of allocators,

NOTE Confidence: 0.73778617375

00:05:53.060 --> 00:05:55.229
we don't want to spend an extra byte or

NOTE Confidence: 0.73778617375

00:05:55.229 --> 00:05:57.034
actually 4 or 8 bytes in the container,

NOTE Confidence: 0.73778617375

00:05:57.040 --> 00:06:03.436
and this lives in a base class to avoid

NOTE Confidence: 0.73778617375

00:06:03.436 --> 00:06:06.126
having too much machinery dependent

NOTE Confidence: 0.73778617375

00:06:06.126 --> 00:06:09.659
on things like the allocators size,

NOTE Confidence: 0.73778617375

00:06:09.660 --> 00:06:11.536
type and different type and all that.

NOTE Confidence: 0.73778617375

00:06:11.540 --> 00:06:12.520
So a lot of machinery.

NOTE Confidence: 0.73778617375

00:06:12.520 --> 00:06:16.480
But it all exists there for a reason if.

NOTE Confidence: 0.73778617375

00:06:16.480 --> 00:06:17.842
That where iterators

NOTE Confidence: 0.73778617375

00:06:17.842 --> 00:06:19.658
parent container is wrong.

NOTE Confidence: 0.73778617375

00:06:19.660 --> 00:06:21.680
We say forward list erase

NOTE Confidence: 0.73778617375

00:06:21.680 --> 00:06:23.296
after iterator outside range.

NOTE Confidence: 0.73778617375

00:06:23.300 --> 00:06:24.164
This is bug.

NOTE Confidence: 0.73778617375

00:06:24.164 --> 00:06:25.604
This was clearly copy pasted

NOTE Confidence: 0.73778617375

00:06:25.604 --> 00:06:26.720
from another function,

NOTE Confidence: 0.73778617375

00:06:26.720 --> 00:06:28.898
but it should say insert after.

NOTE Confidence: 0.73778617375

00:06:28.900 --> 00:06:31.014
I will remember this for the moment

NOTE Confidence: 0.73778617375

00:06:31.014 --> 00:06:32.990
I'll go comment on the full diff.

NOTE Confidence: 0.73778617375

00:06:32.990 --> 00:06:34.271
I actually forget what happens if I

NOTE Confidence: 0.73778617375

00:06:34.271 --> 00:06:35.659
comment on a sub range of commits.

NOTE Confidence: 0.73778617375

00:06:35.660 --> 00:06:36.500
I think it would work,

NOTE Confidence: 0.73778617375

00:06:36.500 --> 00:06:39.140
but I prefer to do it on the full diff.

NOTE Confidence: 0.73778617375

00:06:39.140 --> 00:06:41.534
I see that happening as well for

NOTE Confidence: 0.73778617375

00:06:41.534 --> 00:06:43.299
insert range after down here,

NOTE Confidence: 0.73778617375

00:06:43.300 --> 00:06:44.220
so I'll comment on that.

NOTE Confidence: 0.73778617375

00:06:44.220 --> 00:06:45.748
That's forward list otherwise.

NOTE Confidence: 0.73778617375

00:06:45.748 --> 00:06:46.894
This is fine.

NOTE Confidence: 0.73778617375

00:06:46.900 --> 00:06:50.974
We pass reporter to the internal function.

NOTE Confidence: 0.73778617375

00:06:50.980 --> 00:06:52.768
Here same check,

NOTE Confidence: 0.73778617375

00:06:52.768 --> 00:06:54.556
same incorrect assertion.

NOTE Confidence: 0.73778617375

00:06:54.560 --> 00:06:56.541
Return insert range after reporter and then

NOTE Confidence: 0.73778617375

00:06:56.541 --> 00:06:58.919
if we give a range we say you begin UN.

NOTE Confidence: 0.73778617375

00:06:58.920 --> 00:07:00.492
So this is fine.

NOTE Confidence: 0.73778617375

00:07:00.492 --> 00:07:02.064
It's only the sum.

NOTE Confidence: 0.73778617375

00:07:02.070 --> 00:07:04.554
Assertion comment I always check this

NOTE Confidence: 0.73778617375

00:07:04.554 --> 00:07:06.683
because the validity of comments

NOTE Confidence: 0.73778617375

00:07:06.683 --> 00:07:08.683
and strings and assertions they

NOTE Confidence: 0.73778617375

00:07:08.683 --> 00:07:11.026
are not checked by the compiler

NOTE Confidence: 0.73778617375

00:07:11.026 --> 00:07:13.357
and they are a common source of

NOTE Confidence: 0.73778617375

00:07:13.357 --> 00:07:15.705
copy paste errors or other things

NOTE Confidence: 0.73778617375

00:07:15.705 --> 00:07:17.720
that need to be modified.

NOTE Confidence: 0.73778617375

00:07:17.720 --> 00:07:19.298
But those changes are otherwise good.

NOTE Confidence: 0.73778617375

00:07:19.300 --> 00:07:20.707
Let's see what's happening in extra utility.

NOTE Confidence: 0.73778617375

00:07:20.710 --> 00:07:22.369
I remember talking about copy move in

NOTE Confidence: 0.73778617375

00:07:22.369 --> 00:07:24.077
and seeing that it was replicating all

NOTE Confidence: 0.73778617375

00:07:24.077 --> 00:07:26.039
the stuff that copy memmove is doing here.

NOTE Confidence: 0.73778617375

00:07:26.040 --> 00:07:27.500
This is being mostly centralized,

NOTE Confidence: 0.73778617375

00:07:27.500 --> 00:07:29.740
so if you're saying if you're calling

NOTE Confidence: 0.73778617375

00:07:29.740 --> 00:07:31.409
our internal function copy move in

NOTE Confidence: 0.73778617375

00:07:31.410 --> 00:07:32.957
first thing we'll do is we'll copy.

NOTE Confidence: 0.73778617375

00:07:32.960 --> 00:07:35.144
The move, we'll give it the 1st.

NOTE Confidence: 0.73778617375

00:07:35.150 --> 00:07:36.963
We'll give it first plus count for

NOTE Confidence: 0.73778617375

00:07:36.963 --> 00:07:38.989
the end and then the destination.

NOTE Confidence: 0.73778617375

00:07:38.990 --> 00:07:40.562
That's our result.

NOTE Confidence: 0.73778617375

00:07:40.562 --> 00:07:44.230
If the contiguous iterator output is a

NOTE Confidence: 0.773074501818182

00:07:44.324 --> 00:07:46.716
pointer, we can just return it directly,

NOTE Confidence: 0.773074501818182

00:07:46.720 --> 00:07:48.068
otherwise and then here.

NOTE Confidence: 0.773074501818182

00:07:48.068 --> 00:07:49.753
Casey has a nice comment.

NOTE Confidence: 0.773074501818182

00:07:49.760 --> 00:07:50.876
Result is unused,

NOTE Confidence: 0.773074501818182

00:07:50.876 --> 00:07:53.480
so the compiler can optimize it away.

NOTE Confidence: 0.773074501818182

00:07:53.480 --> 00:07:57.140
Return dest plus static cast art.

NOTE Confidence: 0.773074501818182

00:07:57.140 --> 00:08:00.320
OK, so that's fine.

NOTE Confidence: 0.773074501818182

00:08:00.320 --> 00:08:04.086
It is interesting that this does not

NOTE Confidence: 0.773074501818182

00:08:04.086 --> 00:08:07.469
cause unused variable compiler warnings.

NOTE Confidence: 0.773074501818182

00:08:07.470 --> 00:08:11.677
I would potentially have expected to see.

NOTE Confidence: 0.773074501818182

00:08:11.680 --> 00:08:14.110
I may be unused, however.

NOTE Confidence: 0.773074501818182

00:08:14.110 --> 00:08:17.590
Uh, unlike a preprocessor like an if dev,

NOTE Confidence: 0.773074501818182

00:08:17.590 --> 00:08:20.209
Umm, the compiler can in theory see that the

NOTE Confidence: 0.773074501818182

00:08:20.209 --> 00:08:22.989
if constexpr could conditionally use this,

NOTE Confidence: 0.773074501818182

00:08:22.990 --> 00:08:24.638
so I'm not going to comment here as

NOTE Confidence: 0.773074501818182

00:08:24.638 --> 00:08:26.587
long as there are no compiler warnings.

NOTE Confidence: 0.773074501818182

00:08:26.590 --> 00:08:27.006
I'm happy.

NOTE Confidence: 0.773074501818182

00:08:27.006 --> 00:08:28.254
And if there were compiler warnings,

NOTE Confidence: 0.773074501818182

00:08:28.260 --> 00:08:30.930
we could just silence them.

NOTE Confidence: 0.773074501818182

00:08:30.930 --> 00:08:32.850
Next up, copy and unchecked.

NOTE Confidence: 0.773074501818182

00:08:32.850 --> 00:08:34.962
I remember there was talk about

NOTE Confidence: 0.773074501818182

00:08:34.962 --> 00:08:36.782
or my talk about whether size

NOTE Confidence: 0.773074501818182

00:08:36.782 --> 00:08:38.018
T was always the correct type.

NOTE Confidence: 0.773074501818182

00:08:38.020 --> 00:08:40.405
This is now being templated

NOTE Confidence: 0.773074501818182

00:08:40.405 --> 00:08:43.260
on an integer type size tie.

NOTE Confidence: 0.773074501818182

00:08:43.260 --> 00:08:44.403
Then if def.

NOTE Confidence: 0.773074501818182

00:08:44.403 --> 00:08:46.689
CPP Lib Concepts when that's available,

NOTE Confidence: 0.773074501818182

00:08:46.690 --> 00:08:48.755
we can have an internal static assert

NOTE Confidence: 0.773074501818182

00:08:48.755 --> 00:08:50.970
that this had better be integer like

NOTE Confidence: 0.773074501818182

00:08:50.970 --> 00:08:53.252
it can't literally be as integral V

NOTE Confidence: 0.773074501818182

00:08:53.252 --> 00:08:55.295
because this could accept things like

NOTE Confidence: 0.773074501818182

00:08:55.295 --> 00:08:59.046
the 128 type that IOTA View uses internally.

NOTE Confidence: 0.773074501818182

00:08:59.050 --> 00:09:01.950
But if we find at compile time that we are

NOTE Confidence: 0.773074501818182

00:09:02.023 --> 00:09:04.648
eligible for the memmove optimization,

NOTE Confidence: 0.773074501818182

00:09:04.650 --> 00:09:05.770
then we're definitely working

NOTE Confidence: 0.773074501818182

00:09:05.770 --> 00:09:07.450
with things that fit in memory,

NOTE Confidence: 0.773074501818182

00:09:07.450 --> 00:09:10.110
so we can Statcast to size T

NOTE Confidence: 0.773074501818182

00:09:10.110 --> 00:09:12.000
without worrying about overflow.

NOTE Confidence: 0.773074501818182

00:09:12.000 --> 00:09:14.380
What's going on down here?

NOTE Confidence: 0.773074501818182

00:09:14.380 --> 00:09:16.372
There's talk about, UM.

NOTE Confidence: 0.773074501818182

00:09:16.372 --> 00:09:18.862
Whether we needed some of

NOTE Confidence: 0.773074501818182

00:09:18.862 --> 00:09:21.140
the static asserts UM,

NOTE Confidence: 0.773074501818182

00:09:21.140 --> 00:09:24.020
and we decided that they were not necessary.

NOTE Confidence: 0.773074501818182

00:09:24.020 --> 00:09:26.386
So that's why this is being dropped.

NOTE Confidence: 0.773074501818182

00:09:26.390 --> 00:09:28.988
And same here.

NOTE Confidence: 0.773074501818182

00:09:28.990 --> 00:09:30.929
This expression will just have to compile

NOTE Confidence: 0.773074501818182

00:09:30.929 --> 00:09:32.920
and then this count can be constant.

NOTE Confidence: 0.773074501818182

00:09:32.920 --> 00:09:33.086
OK,

NOTE Confidence: 0.773074501818182

00:09:33.086 --> 00:09:33.750
so that looks good.

NOTE Confidence: 0.773074501818182

00:09:33.750 --> 00:09:35.094
So now let's go to the full diff

NOTE Confidence: 0.773074501818182

00:09:35.094 --> 00:09:36.462
and I'll comment on forward list

NOTE Confidence: 0.773074501818182

00:09:36.462 --> 00:09:37.692
before I forget anything else.

NOTE Confidence: 0.844641180454546

00:09:43.190 --> 00:09:45.665
And also I may quickly check to see if

NOTE Confidence: 0.844641180454546

00:09:45.665 --> 00:09:47.728
there's any other copy pasted if there

NOTE Confidence: 0.844641180454546

00:09:47.728 --> 00:09:50.228
if that exists in other files, then I'll

NOTE Confidence: 0.844641180454546

00:09:50.228 --> 00:09:52.216
just want to say please audit globally.

NOTE Confidence: 0.844641180454546

00:09:52.220 --> 00:09:56.916
OK, so it's forward list. We had.

NOTE Confidence: 0.844641180454546

00:09:56.916 --> 00:10:00.288
Here, yeah, that's incorrect.

NOTE Confidence: 0.844641180454546

00:10:00.290 --> 00:10:01.522
That's an STL verify.

NOTE Confidence: 0.844641180454546

00:10:01.522 --> 00:10:03.723
So basically anywhere that says STL Verify

NOTE Confidence: 0.844641180454546

00:10:03.723 --> 00:10:06.075
is that the first occurrence in this file.

NOTE Confidence: 0.233282684

00:10:08.120 --> 00:10:09.730
It's 22.

NOTE Confidence: 0.785051741578947

00:10:11.920 --> 00:10:13.663
Yeah, here it is. So I can

NOTE Confidence: 0.785051741578947

00:10:13.663 --> 00:10:15.324
say it curves below and I'll

NOTE Confidence: 0.785051741578947

00:10:15.324 --> 00:10:17.560
edit it if I find another. OK.

NOTE Confidence: 0.83806306

00:10:20.140 --> 00:10:27.220
So. This function is insert after.

NOTE Confidence: 0.83806306

00:10:27.220 --> 00:10:34.590
But the. STL verify message says.

NOTE Confidence: 0.8168899575

00:10:36.720 --> 00:10:39.380
Erase after occurs below.

NOTE Confidence: 0.7100834325

00:10:41.790 --> 00:10:45.408
For insert range after still says

NOTE Confidence: 0.7100834325

00:10:45.408 --> 00:10:47.955
erase after. Sir, right after.

NOTE Confidence: 0.7100834325

00:10:47.955 --> 00:10:50.882
OK, we got comment number one. Uh,

NOTE Confidence: 0.7100834325

00:10:50.882 --> 00:10:52.898
let's see if any other classes are effective,

NOTE Confidence: 0.7100834325

00:10:52.900 --> 00:10:55.798
so I'm going to pop open everything.

NOTE Confidence: 0.7100834325

00:10:55.800 --> 00:10:56.982
Let's scan 4.

NOTE Confidence: 0.7100834325

00:10:56.982 --> 00:10:59.740
Still verify how many currencies only 10.

NOTE Confidence: 0.7100834325

00:10:59.740 --> 00:11:05.460
That's not too bad. That's pre-existing.

NOTE Confidence: 0.7100834325

00:11:05.460 --> 00:11:09.085
Commented. The second one that

NOTE Confidence: 0.7100834325

00:11:09.085 --> 00:11:11.985
I commented on preexisting.

NOTE Confidence: 0.7100834325

00:11:11.990 --> 00:11:14.839
OK, here we've got a new one.

NOTE Confidence: 0.7100834325

00:11:14.840 --> 00:11:16.685
This one is debatable because

NOTE Confidence: 0.7100834325

00:11:16.685 --> 00:11:18.530
we just say list insert.

NOTE Confidence: 0.7100834325

00:11:18.530 --> 00:11:20.805
Here it was actually the member function.

NOTE Confidence: 0.7100834325

00:11:20.810 --> 00:11:24.330
I argue we probably should say insert range.

NOTE Confidence: 0.7100834325

00:11:24.330 --> 00:11:31.820
Uh, I'll comment here. I. This is.

NOTE Confidence: 0.7100834325

00:11:31.820 --> 00:11:36.740
Beta ball. Well, I'll say.

NOTE Confidence: 0.7100834325

00:11:36.740 --> 00:11:37.270
See.

NOTE Confidence: 0.692316404

00:11:47.590 --> 00:11:49.420
Yeah OK, I'll say Umm,

NOTE Confidence: 0.692316404

00:11:49.420 --> 00:11:52.619
this is trying to decide how to

NOTE Confidence: 0.692316404

00:11:52.619 --> 00:11:54.889
phrase it debatably on issue.

NOTE Confidence: 0.692316404

00:11:54.890 --> 00:11:59.450
But as this function is.

NOTE Confidence: 0.692316404

00:11:59.450 --> 00:12:04.000
Insert range the estl verify.

NOTE Confidence: 0.692316404

00:12:04.000 --> 00:12:08.038
Message. Should probably.

NOTE Confidence: 0.692316404

00:12:08.038 --> 00:12:11.150
Say that. 2.

NOTE Confidence: 0.743332758888889

00:12:41.980 --> 00:12:43.528
OK, let's perforate this.

NOTE Confidence: 0.743332758888889

00:12:43.528 --> 00:12:45.463
This is debatably an issue,

NOTE Confidence: 0.743332758888889

00:12:45.470 --> 00:12:47.584
but as this function is insert range,

NOTE Confidence: 0.743332758888889

00:12:47.590 --> 00:12:48.674
the still verify message

NOTE Confidence: 0.743332758888889

00:12:48.674 --> 00:12:50.029
should probably say that too.

NOTE Confidence: 0.743332758888889

00:12:50.030 --> 00:12:51.425
Insert isn't exactly wrong if

NOTE Confidence: 0.743332758888889

00:12:51.425 --> 00:12:53.129
interpreted as a general term and

NOTE Confidence: 0.743332758888889

00:12:53.129 --> 00:12:54.429
not a specific function name.

NOTE Confidence: 0.743332758888889

00:12:54.430 --> 00:12:55.760
If we had mentioned it in backticks,

NOTE Confidence: 0.743332758888889

00:12:55.760 --> 00:12:59.130
then it would definitely need to change. OK.

NOTE Confidence: 0.743332758888889

00:12:59.130 --> 00:13:00.850
I'll assume Casey will want to change that,

NOTE Confidence: 0.743332758888889

00:13:00.850 --> 00:13:02.470
but if he thinks it's reasonable,

NOTE Confidence: 0.743332758888889

00:13:02.470 --> 00:13:04.718
then I suppose I wouldn't argue too much.

NOTE Confidence: 0.797504702575

00:13:07.010 --> 00:13:12.106
And. Here we just have a very generic

NOTE Confidence: 0.797504702575

00:13:12.110 --> 00:13:15.958
comment string iterator incompatible.

NOTE Confidence: 0.797504702575

00:13:15.960 --> 00:13:17.367
I don't know if I like that.

NOTE Confidence: 0.797504702575

00:13:17.370 --> 00:13:19.130
That really seems like it was copy pasted.

NOTE Confidence: 0.797504702575

00:13:19.130 --> 00:13:21.386
Uh, but it was copy pasted from insert.

NOTE Confidence: 0.797504702575

00:13:21.390 --> 00:13:22.870
Insert just says string

NOTE Confidence: 0.797504702575

00:13:22.870 --> 00:13:23.610
iterator incompatible.

NOTE Confidence: 0.797504702575

00:13:23.610 --> 00:13:24.778
OK, we're following precedent.

NOTE Confidence: 0.797504702575

00:13:24.778 --> 00:13:27.330
Can't argue with that. No comment.

NOTE Confidence: 0.797504702575

00:13:27.330 --> 00:13:30.090
What's the final occurrence?

NOTE Confidence: 0.797504702575

00:13:30.090 --> 00:13:32.230
Here are replaced with range

NOTE Confidence: 0.797504702575

00:13:32.230 --> 00:13:35.512
that's two iterators and we say

NOTE Confidence: 0.797504702575

00:13:35.512 --> 00:13:37.153
string iterators incompatible.

NOTE Confidence: 0.797504702575

00:13:37.160 --> 00:13:40.088
Presumably copied from.

NOTE Confidence: 0.797504702575

00:13:40.090 --> 00:13:42.596
Replace Yep, OK, so that files question.

NOTE Confidence: 0.797504702575

00:13:42.600 --> 00:13:44.126
OK, so it's not a global issue,

NOTE Confidence: 0.797504702575

00:13:44.130 --> 00:13:45.815
it's just definitely two and

NOTE Confidence: 0.797504702575

00:13:45.815 --> 00:13:48.398
forward list and a debatable one in.

NOTE Confidence: 0.769767425

00:13:50.700 --> 00:13:53.136
Uh, what was it list itself.

NOTE Confidence: 0.769767425

00:13:53.140 --> 00:13:55.156
OK, so that's all still verifies.

NOTE Confidence: 0.769767425

00:13:55.160 --> 00:13:57.364
Uh, now, let's see.

NOTE Confidence: 0.769767425

00:13:57.364 --> 00:14:00.119
But there is to review.

NOTE Confidence: 0.769767425

00:14:00.120 --> 00:14:02.568
OK, so I had apparently reviewed

NOTE Confidence: 0.769767425

00:14:02.568 --> 00:14:03.856
algorithm and I will score.

NOTE Confidence: 0.769767425

00:14:03.856 --> 00:14:05.170
I think our move some code

NOTE Confidence: 0.769767425

00:14:05.223 --> 00:14:06.369
movement and algorithm.

NOTE Confidence: 0.769767425

00:14:06.370 --> 00:14:07.270
Here's all the tests.

NOTE Confidence: 0.769767425

00:14:07.270 --> 00:14:08.170
I'm just scrolling through

NOTE Confidence: 0.769767425

00:14:08.170 --> 00:14:09.179
and then feature test,

NOTE Confidence: 0.769767425

00:14:09.180 --> 00:14:11.940
macro test and algorithm hit

NOTE Confidence: 0.769767425

00:14:11.940 --> 00:14:14.700
the code movement for get

NOTE Confidence: 0.769767425

00:14:14.804 --> 00:14:17.360
final iterator unwrapped.

NOTE Confidence: 0.769767425

00:14:17.360 --> 00:14:17.850
OK.

NOTE Confidence: 0.751182815555556

00:14:20.370 --> 00:14:24.447
So now. Let's take a look at X utility.

NOTE Confidence: 0.751182815555556

00:14:24.450 --> 00:14:26.556
Should be able to sign off on this because

NOTE Confidence: 0.751182815555556

00:14:26.556 --> 00:14:28.926
I just looked at the incremental changes.

NOTE Confidence: 0.751182815555556

00:14:28.930 --> 00:14:32.170
So this was the fusing of the ranges,

NOTE Confidence: 0.751182815555556

00:14:32.170 --> 00:14:33.310
copying them, move on to simpler.

NOTE Confidence: 0.751182815555556

00:14:33.310 --> 00:14:35.180
Now we looked at that.

NOTE Confidence: 0.751182815555556

00:14:35.180 --> 00:14:37.838
Copy and unchecked.

NOTE Confidence: 0.751182815555556

00:14:37.840 --> 00:14:41.966
Sentinel copycat this is where

NOTE Confidence: 0.751182815555556

00:14:41.966 --> 00:14:44.076
we remove the static asserts.

NOTE Confidence: 0.751182815555556

00:14:44.080 --> 00:14:45.048
Get Finder and wrap.

NOTE Confidence: 0.751182815555556

00:14:45.048 --> 00:14:47.349
This is the code that was exactly moving.

NOTE Confidence: 0.751182815555556

00:14:47.350 --> 00:14:49.500
It's the largest addition here.

NOTE Confidence: 0.751182815555556

00:14:49.500 --> 00:14:52.100
Here we're changing the Sentinel

NOTE Confidence: 0.751182815555556

00:14:52.100 --> 00:14:54.652
copycat called it copying my move on.

NOTE Confidence: 0.751182815555556

00:14:54.652 --> 00:14:56.251
OK, so this I think we can now

NOTE Confidence: 0.751182815555556

00:14:56.251 --> 00:14:57.708
call done since I do remember

NOTE Confidence: 0.751182815555556

00:14:57.708 --> 00:14:59.088
getting through this whole header.

NOTE Confidence: 0.751182815555556

00:14:59.090 --> 00:15:01.538
And then we looked at lists.

NOTE Confidence: 0.751182815555556

00:15:01.540 --> 00:15:02.414
Spark this.

NOTE Confidence: 0.751182815555556

00:15:02.414 --> 00:15:05.473
This has also changed since last view.

NOTE Confidence: 0.751182815555556

00:15:05.480 --> 00:15:07.379
I I see what I see what GitHub does.

NOTE Confidence: 0.751182815555556

00:15:07.380 --> 00:15:08.928
It's if I mark something viewed

NOTE Confidence: 0.751182815555556

00:15:08.928 --> 00:15:10.550
when they cleared the check mark.

NOTE Confidence: 0.751182815555556

00:15:10.550 --> 00:15:11.630
That's where that changed since

NOTE Confidence: 0.751182815555556

00:15:11.630 --> 00:15:12.710
the last view comes from.

NOTE Confidence: 0.668134374545455

00:15:15.570 --> 00:15:16.825
Interesting that I'd mark list

NOTE Confidence: 0.668134374545455

00:15:16.825 --> 00:15:18.540
as viewed and not X utility.

NOTE Confidence: 0.668134374545455

00:15:18.540 --> 00:15:19.590
I wonder if I had actually gone

NOTE Confidence: 0.668134374545455

00:15:19.590 --> 00:15:20.529
through all of extra utility.

NOTE Confidence: 0.668134374545455

00:15:20.530 --> 00:15:23.236
I could have sworn I did.

NOTE Confidence: 0.668134374545455

00:15:23.240 --> 00:15:24.752
I'm a little bit nervous about marking

NOTE Confidence: 0.668134374545455

00:15:24.752 --> 00:15:26.305
something as reviewed when I have not

NOTE Confidence: 0.668134374545455

00:15:26.305 --> 00:15:27.385
actually gone through it exhaustively.

NOTE Confidence: 0.838014134736842

00:15:33.700 --> 00:15:34.916
I had a comment on the very last

NOTE Confidence: 0.838014134736842

00:15:34.916 --> 00:15:35.905
line that strongly implies that

NOTE Confidence: 0.838014134736842

00:15:35.905 --> 00:15:37.189
I got through this whole thing.

NOTE Confidence: 0.759338851428571

00:15:46.010 --> 00:15:47.494
Yeah, it's really this that I know.

NOTE Confidence: 0.759338851428571

00:15:47.500 --> 00:15:49.337
I verified large code movement. OK,

NOTE Confidence: 0.759338851428571

00:15:49.337 --> 00:15:52.353
I'm pretty sure I've reviewed this all file.

NOTE Confidence: 0.759338851428571

00:15:52.360 --> 00:15:54.653
Try not to get too bogged down in obsessing

NOTE Confidence: 0.759338851428571

00:15:54.653 --> 00:15:56.437
over what I have seen and not seen.

NOTE Confidence: 0.817812096363636

00:15:58.800 --> 00:16:01.019
OK so list I believe I also

NOTE Confidence: 0.817812096363636

00:16:01.019 --> 00:16:02.450
reviewed this whole thing.

NOTE Confidence: 0.791693050909091

00:16:04.810 --> 00:16:07.168
I'll scan through it so we've

NOTE Confidence: 0.791693050909091

00:16:07.168 --> 00:16:09.510
got the Sentinel Conn Sentinel.

NOTE Confidence: 0.791693050909091

00:16:09.510 --> 00:16:11.634
Stood move first.

NOTE Confidence: 0.791693050909091

00:16:11.634 --> 00:16:15.882
For adding the new tag constructors.

NOTE Confidence: 0.791693050909091

00:16:15.890 --> 00:16:17.636
And inserting the initializer list here.

NOTE Confidence: 0.791693050909091

00:16:17.640 --> 00:16:19.016
This is just unwrapping.

NOTE Confidence: 0.791693050909091

00:16:19.016 --> 00:16:19.706
Remember, being confused

NOTE Confidence: 0.791693050909091

00:16:19.706 --> 00:16:20.744
as to why it was happening,

NOTE Confidence: 0.791693050909091

00:16:20.750 --> 00:16:23.550
but I didn't object.

NOTE Confidence: 0.791693050909091

00:16:23.550 --> 00:16:26.350
Prepend range append range.

NOTE Confidence: 0.791693050909091

00:16:26.350 --> 00:16:27.295
Assign and checked.

NOTE Confidence: 0.791693050909091

00:16:27.295 --> 00:16:29.185
Now we're going through and looking

NOTE Confidence: 0.791693050909091

00:16:29.185 --> 00:16:31.248
at how the nodes are being reused.

NOTE Confidence: 0.791693050909091

00:16:31.250 --> 00:16:33.637
We've got the verify that was added.

NOTE Confidence: 0.858405906

00:16:37.060 --> 00:16:38.910
This is also just unwrapping.

NOTE Confidence: 0.851654052

00:16:41.120 --> 00:16:43.479
This is the new assertion I'm.

NOTE Confidence: 0.851654052

00:16:43.479 --> 00:16:44.793
This might have even been pre-existing

NOTE Confidence: 0.851654052

00:16:44.793 --> 00:16:46.019
or existing in the last year,

NOTE Confidence: 0.851654052

00:16:46.020 --> 00:16:47.800
and I didn't notice it.

NOTE Confidence: 0.851654052

00:16:47.800 --> 00:16:51.400
And then the final deduction guide.

NOTE Confidence: 0.851654052

00:16:51.400 --> 00:16:53.533
OK, so I believe the list is good now.

NOTE Confidence: 0.851654052

00:16:53.540 --> 00:16:54.877
Let's take a look at forward list.

NOTE Confidence: 0.851654052

00:16:54.880 --> 00:16:56.380
I think that's the one that

NOTE Confidence: 0.851654052

00:16:56.380 --> 00:16:58.379
I ran out of time last time.

NOTE Confidence: 0.851654052

00:16:58.380 --> 00:16:59.526
Yeah, because I looked at it.

NOTE Confidence: 0.851654052

00:16:59.530 --> 00:17:00.662
I was like, OK.

NOTE Confidence: 0.851654052

00:17:00.662 --> 00:17:02.418
It differs enough that I do need

NOTE Confidence: 0.851654052

00:17:02.418 --> 00:17:03.860
to spend a lot of brain cycles

NOTE Confidence: 0.851654052

00:17:03.913 --> 00:17:05.509
making sure that it's all good.

NOTE Confidence: 0.851654052

00:17:05.510 --> 00:17:09.550
OK, so if Dev CPP Lib containers ranges,

NOTE Confidence: 0.851654052

00:17:09.550 --> 00:17:13.609
this is the new feature test macro I am.

NOTE Confidence: 0.851654052

00:17:13.610 --> 00:17:15.470
Going to check that it is

NOTE Confidence: 0.851654052

00:17:15.470 --> 00:17:16.710
actually the right spelling.

NOTE Confidence: 0.851654052

00:17:16.710 --> 00:17:20.189
OK, both plurals that is looking good.

NOTE Confidence: 0.851654052

00:17:20.190 --> 00:17:22.014
Yep, because if you say if DEF total

NOTE Confidence: 0.851654052

00:17:22.014 --> 00:17:24.007
typo then it'll just never be activated.

NOTE Confidence: 0.851654052

00:17:24.010 --> 00:17:25.450
Presumably the testing would catch that,

NOTE Confidence: 0.851654052

00:17:25.450 --> 00:17:27.730
but you never know.

NOTE Confidence: 0.851654052

00:17:27.730 --> 00:17:30.040
Completed on is this a container compatible

NOTE Confidence: 0.851654052

00:17:30.040 --> 00:17:32.409
range for tie forward list tag from

NOTE Confidence: 0.851654052

00:17:32.409 --> 00:17:34.389
range T then perfect forward range.

NOTE Confidence: 0.851654052

00:17:34.390 --> 00:17:37.295
Refer frange construct my pair which is

NOTE Confidence: 0.851654052

00:17:37.295 --> 00:17:40.573
the contains the allocator from nothing. OK,

NOTE Confidence: 0.851654052

00:17:40.573 --> 00:17:43.050
then we need an F list insert after opt two.

NOTE Confidence: 0.851654052

00:17:43.050 --> 00:17:44.954
This provides exception safety.

NOTE Confidence: 0.851654052

00:17:44.954 --> 00:17:48.300
Insert OPP from our newly constructed getal.

NOTE Confidence: 0.851654052

00:17:48.300 --> 00:17:50.960
Umm, use that insert opt to append

NOTE Confidence: 0.851654052

00:17:50.960 --> 00:17:52.100
a range unchecked.

NOTE Confidence: 0.851654052

00:17:52.100 --> 00:17:54.170
Here we take the range and

NOTE Confidence: 0.851654052

00:17:54.170 --> 00:17:55.820
get unchecked iterators to it.

NOTE Confidence: 0.851654052

00:17:55.820 --> 00:17:56.380
That's good.

NOTE Confidence: 0.785796625714286

00:17:58.680 --> 00:18:00.997
So after we've attached all those nodes,

NOTE Confidence: 0.785796625714286

00:18:01.000 --> 00:18:03.990
we can allocate a proxy and then

NOTE Confidence: 0.785796625714286

00:18:03.990 --> 00:18:06.360
finally attach the nodes before head.

NOTE Confidence: 0.785796625714286

00:18:06.360 --> 00:18:06.939
That's interesting that

NOTE Confidence: 0.785796625714286

00:18:06.939 --> 00:18:08.097
we do it in that order.

NOTE Confidence: 0.785796625714286

00:18:08.100 --> 00:18:09.636
Why do we do it in that order?

NOTE Confidence: 0.889078882

00:18:11.980 --> 00:18:13.985
That's consistent with what we

NOTE Confidence: 0.889078882

00:18:13.985 --> 00:18:15.990
did for the range constructor.

NOTE Confidence: 0.889078882

00:18:15.990 --> 00:18:18.918
Can't argue with that.

NOTE Confidence: 0.889078882

00:18:18.920 --> 00:18:19.835
The move constructor?

NOTE Confidence: 0.889078882

00:18:19.835 --> 00:18:21.055
Yeah, that's totally different.

NOTE Confidence: 0.889078882

00:18:21.060 --> 00:18:21.966
OK, that's good.

NOTE Confidence: 0.889078882

00:18:21.966 --> 00:18:23.476
Next if you have arrange,

NOTE Confidence: 0.889078882

00:18:23.480 --> 00:18:25.256
an allocator will be very similar.

NOTE Confidence: 0.889078882

00:18:25.260 --> 00:18:26.862
First you construct.

NOTE Confidence: 0.889078882

00:18:26.862 --> 00:18:29.300
My pair, which is that compressed air

NOTE Confidence: 0.889078882

00:18:29.300 --> 00:18:31.005
machinery with the allocator and then

NOTE Confidence: 0.889078882

00:18:31.005 --> 00:18:32.430
otherwise everything is the same.

NOTE Confidence: 0.889078882

00:18:32.430 --> 00:18:33.570
It's too bad we can't delegate,

NOTE Confidence: 0.889078882

00:18:33.570 --> 00:18:35.886
but we found that delegated constructors

NOTE Confidence: 0.889078882

00:18:35.890 --> 00:18:38.788
have undesirable effects on codegen here.

NOTE Confidence: 0.889078882

00:18:38.790 --> 00:18:40.650
OK, so that's all good.

NOTE Confidence: 0.889078882

00:18:40.650 --> 00:18:41.980
Next we have prepended range.

NOTE Confidence: 0.889078882

00:18:41.980 --> 00:18:44.446
If Dev CPP containers ranges again.

NOTE Confidence: 0.889078882

00:18:44.450 --> 00:18:46.518
Template container compatible range

NOTE Confidence: 0.889078882

00:18:46.518 --> 00:18:49.103
OK call this unchecked helper

NOTE Confidence: 0.889078882

00:18:49.103 --> 00:18:51.810
insert range after or head ranges

NOTE Confidence: 0.889078882

00:18:51.810 --> 00:18:54.450
you begin ranges you end OK.

NOTE Confidence: 0.889078882

00:18:54.450 --> 00:18:56.034
And of course there's no end range for

NOTE Confidence: 0.889078882

00:18:56.034 --> 00:18:57.208
forward list because we don't know

NOTE Confidence: 0.889078882

00:18:57.208 --> 00:18:59.570
where the end is a sign sign unchecked.

NOTE Confidence: 0.889078882

00:18:59.570 --> 00:19:02.456
This is being updated consent in the

NOTE Confidence: 0.889078882

00:19:02.456 --> 00:19:04.730
can be passed by constant value.

NOTE Confidence: 0.889078882

00:19:04.730 --> 00:19:06.434
This next can also be top over cons.

NOTE Confidence: 0.889078882

00:19:06.440 --> 00:19:10.740
That's a nice correctness improvement.

NOTE Confidence: 0.889078882

00:19:10.740 --> 00:19:13.146
Here this is just a cleanup.

NOTE Confidence: 0.889078882

00:19:13.150 --> 00:19:15.089
Instead of testing my first next again,

NOTE Confidence: 0.889078882

00:19:15.090 --> 00:19:16.574
we just started next.

NOTE Confidence: 0.889078882

00:19:16.574 --> 00:19:18.768
Let's just test next. That's fine.

NOTE Confidence: 0.889078882

00:19:18.768 --> 00:19:20.538
It's also not too invasive.

NOTE Confidence: 0.889078882

00:19:20.540 --> 00:19:22.236
If I saw a lot of invasive cleanup

NOTE Confidence: 0.889078882

00:19:22.236 --> 00:19:23.890
site asked for them to be separated,

NOTE Confidence: 0.889078882

00:19:23.890 --> 00:19:26.590
and then here append range unchecked

NOTE Confidence: 0.889078882

00:19:26.590 --> 00:19:29.943
Casey's moving you first because we no

NOTE Confidence: 0.889078882

00:19:29.943 --> 00:19:32.166
longer need it. That seems reasonable.

NOTE Confidence: 0.889078882

00:19:32.166 --> 00:19:33.738
It is passed by modifiable value

NOTE Confidence: 0.889078882

00:19:33.738 --> 00:19:35.297
for some user defined iterators.

NOTE Confidence: 0.889078882

00:19:35.300 --> 00:19:36.468
That could help things.

NOTE Confidence: 0.889078882

00:19:36.468 --> 00:19:37.636
It should never hurt.

NOTE Confidence: 0.889078882

00:19:37.640 --> 00:19:37.920
Umm,

NOTE Confidence: 0.889078882

00:19:37.920 --> 00:19:39.320
same sort of change here.

NOTE Confidence: 0.889078882

00:19:39.320 --> 00:19:42.800
Mark next is top of contest

NOTE Confidence: 0.889078882

00:19:42.800 --> 00:19:45.385
reasonable OK sign range if dev

NOTE Confidence: 0.889078882

00:19:45.385 --> 00:19:46.989
containers ranges template compatible

NOTE Confidence: 0.889078882

00:19:46.989 --> 00:19:48.916
range assign range call assign

NOTE Confidence: 0.889078882

00:19:48.916 --> 00:19:51.100
unchecked with you begin you end.

NOTE Confidence: 0.889078882

00:19:51.100 --> 00:19:53.068
That's all good.

NOTE Confidence: 0.889078882

00:19:53.070 --> 00:19:55.428
OK, we're changing access control here.

NOTE Confidence: 0.889078882

00:19:55.430 --> 00:19:58.446
I want to make sure that we're not.

NOTE Confidence: 0.889078882

00:19:58.450 --> 00:19:59.955
Having redundant access specifiers were

NOTE Confidence: 0.889078882

00:19:59.955 --> 00:20:01.770
clearly public here for insert after,

NOTE Confidence: 0.889078882

00:20:01.770 --> 00:20:02.640
so we switched to private.

NOTE Confidence: 0.889078882

00:20:02.640 --> 00:20:03.588
Then we go back to public,

NOTE Confidence: 0.889078882

00:20:03.590 --> 00:20:04.120
that's good.

NOTE Confidence: 0.863112820909091

00:20:09.320 --> 00:20:10.904
OK, the reason I'm pausing is

NOTE Confidence: 0.863112820909091

00:20:10.904 --> 00:20:13.061
because I was just thinking, UM,

NOTE Confidence: 0.863112820909091

00:20:13.061 --> 00:20:16.848
we've had serious 23 changes here in

NOTE Confidence: 0.863112820909091

00:20:16.848 --> 00:20:20.040
the if depths, but when we switch

NOTE Confidence: 0.863112820909091

00:20:20.040 --> 00:20:21.810
to public and then define insert

NOTE Confidence: 0.863112820909091

00:20:21.870 --> 00:20:23.778
range after that's unconditional.

NOTE Confidence: 0.863112820909091

00:20:23.780 --> 00:20:27.780
This happens even in C + 14 mode.

NOTE Confidence: 0.863112820909091

00:20:27.780 --> 00:20:29.736
But it's OK because this is

NOTE Confidence: 0.863112820909091

00:20:29.736 --> 00:20:31.295
actually being extracted out. The.

NOTE Confidence: 0.863112820909091

00:20:31.295 --> 00:20:33.335
Public insert after is going to call it

NOTE Confidence: 0.863112820909091

00:20:33.335 --> 00:20:35.607
so it doesn't need to be unconditional.

NOTE Confidence: 0.863112820909091

00:20:35.610 --> 00:20:38.165
OK, so there is some refactoring here,

NOTE Confidence: 0.863112820909091

00:20:38.170 --> 00:20:40.030
but it's for a good purpose.

NOTE Confidence: 0.863112820909091

00:20:40.030 --> 00:20:41.530
It's not just a random cleanup,

NOTE Confidence: 0.863112820909091

00:20:41.530 --> 00:20:43.360
so it's fine.

NOTE Confidence: 0.706769883333333

00:20:46.090 --> 00:20:48.340
OK, so extracting out private

NOTE Confidence: 0.706769883333333

00:20:48.340 --> 00:20:51.170
machinery template on ITER and

NOTE Confidence: 0.706769883333333

00:20:51.170 --> 00:20:52.955
possibly different Sentinel.

NOTE Confidence: 0.706769883333333

00:20:52.960 --> 00:20:54.898
Turn the iterator insert range after,

NOTE Confidence: 0.706769883333333

00:20:54.900 --> 00:20:55.920
otherwise it's going to look

NOTE Confidence: 0.706769883333333

00:20:55.920 --> 00:20:56.940
very similar to the signature.

NOTE Confidence: 0.706769883333333

00:20:56.940 --> 00:20:58.620
I'm sorry about that.

NOTE Confidence: 0.706769883333333

00:20:58.620 --> 00:21:02.205
I'm considerate where it's going to be utter

NOTE Confidence: 0.706769883333333

00:21:02.205 --> 00:21:04.680
enode then interfirst consentino last.

NOTE Confidence: 0.706769883333333

00:21:04.680 --> 00:21:06.940
OK, insert inclusive first last

NOTE Confidence: 0.706769883333333

00:21:06.940 --> 00:21:09.200
exclusive after P node comments

NOTE Confidence: 0.706769883333333

00:21:09.278 --> 00:21:10.808
been updated at first is last

NOTE Confidence: 0.706769883333333

00:21:10.808 --> 00:21:11.810
and we have nothing to do.

NOTE Confidence: 0.706769883333333

00:21:11.810 --> 00:21:13.340
Return make it RP node.

NOTE Confidence: 0.706769883333333

00:21:13.340 --> 00:21:17.690
Otherwise get that first insert after

NOTE Confidence: 0.706769883333333

00:21:17.690 --> 00:21:20.832
Reiki helper from the allocator.

NOTE Confidence: 0.706769883333333

00:21:20.832 --> 00:21:25.752
Chain up the new nodes to it by moving

NOTE Confidence: 0.706769883333333

00:21:25.752 --> 00:21:28.668
1st and it's passed by modifiable

NOTE Confidence: 0.706769883333333

00:21:28.668 --> 00:21:31.748
value and then once they're all.

NOTE Confidence: 0.706769883333333

00:21:31.750 --> 00:21:36.518
Attached then attach after.

NOTE Confidence: 0.706769883333333

00:21:36.520 --> 00:21:39.440
He noted the where and make it her.

NOTE Confidence: 0.706769883333333

00:21:39.440 --> 00:21:41.130
This provides strong exception safety.

NOTE Confidence: 0.897794491538461

00:21:45.110 --> 00:21:46.942
I think I had a question last time

NOTE Confidence: 0.897794491538461

00:21:46.942 --> 00:21:48.597
about whether it was necessary, UM,

NOTE Confidence: 0.897794491538461

00:21:48.597 --> 00:21:50.619
but that ended up short circuiting

NOTE Confidence: 0.897794491538461

00:21:50.619 --> 00:21:52.880
because there's no better way to do it.

NOTE Confidence: 0.897794491538461

00:21:52.880 --> 00:21:54.568
There's like no more convenient way to do

NOTE Confidence: 0.897794491538461

00:21:54.568 --> 00:21:56.500
it like this actually is quite convenient.

NOTE Confidence: 0.897794491538461

00:21:56.500 --> 00:21:57.880
It handles the loop for us,

NOTE Confidence: 0.897794491538461

00:21:57.880 --> 00:21:59.700
so we're not paying any extra costs,

NOTE Confidence: 0.897794491538461

00:21:59.700 --> 00:22:06.760
so this is fine. Public OK. Umm?

NOTE Confidence: 0.897794491538461

00:22:06.760 --> 00:22:08.020
We commented about what's interesting

NOTE Confidence: 0.897794491538461

00:22:08.020 --> 00:22:10.158
is if you look at the full division,

NOTE Confidence: 0.897794491538461

00:22:10.160 --> 00:22:11.702
this is just change this being

NOTE Confidence: 0.897794491538461

00:22:11.702 --> 00:22:12.730
damaged for no reason.

NOTE Confidence: 0.6678278508

00:22:19.140 --> 00:22:19.980
What's funny is that, uh,

NOTE Confidence: 0.6678278508

00:22:19.980 --> 00:22:21.756
the message isn't even right anymore.

NOTE Confidence: 0.6678278508

00:22:21.760 --> 00:22:24.360
UM, the message used to be right forward.

NOTE Confidence: 0.6678278508

00:22:24.360 --> 00:22:26.520
List insert after location

NOTE Confidence: 0.6678278508

00:22:26.520 --> 00:22:28.680
incompatible because the where

NOTE Confidence: 0.6678278508

00:22:28.680 --> 00:22:31.299
iterators parent container is not us,

NOTE Confidence: 0.6678278508

00:22:31.300 --> 00:22:33.505
then it's being changed to forward list

NOTE Confidence: 0.6678278508

00:22:33.505 --> 00:22:35.239
erase after iterator outside range.

NOTE Confidence: 0.6678278508

00:22:35.240 --> 00:22:38.800
But we're not saying erase after some range,

NOTE Confidence: 0.6678278508

00:22:38.800 --> 00:22:43.736
the where has no relationship to 1st last.

NOTE Confidence: 0.6678278508

00:22:43.740 --> 00:22:46.204
No, that message is actually really bogus.

NOTE Confidence: 0.6678278508

00:22:46.210 --> 00:22:48.754
Same with insert range after it

NOTE Confidence: 0.6678278508

00:22:48.754 --> 00:22:50.458
should be where is not compatible.

NOTE Confidence: 0.872311208888889

00:22:52.670 --> 00:22:54.632
Yeah OK, I I need to expand this comment.

NOTE Confidence: 0.635826498571429

00:22:58.310 --> 00:23:02.966
Additionally, UM that message.

NOTE Confidence: 0.635826498571429

00:23:02.966 --> 00:23:06.458
Is changing from.

NOTE Confidence: 0.635826498571429

00:23:06.460 --> 00:23:10.100
Location incompatible.

NOTE Confidence: 0.635826498571429

00:23:10.100 --> 00:23:15.170
To. Better outside range.

NOTE Confidence: 0.635826498571429

00:23:15.170 --> 00:23:21.440
But I believe that's incorrect. OK.

NOTE Confidence: 0.635826498571429

00:23:21.440 --> 00:23:24.200
That this function is insert after,

NOTE Confidence: 0.635826498571429

00:23:24.200 --> 00:23:25.928
but they ask to verify message

NOTE Confidence: 0.635826498571429

00:23:25.928 --> 00:23:27.119
says erase after. Additionally,

NOTE Confidence: 0.635826498571429

00:23:27.119 --> 00:23:29.352
the message is changing from location and

NOTE Confidence: 0.635826498571429

00:23:29.352 --> 00:23:31.099
compatible to iterator outside range,

NOTE Confidence: 0.635826498571429

00:23:31.100 --> 00:23:32.260
but I believe that's incorrect.

NOTE Confidence: 0.635826498571429

00:23:32.260 --> 00:23:34.437
Occurs below for insert range after OK.

NOTE Confidence: 0.635826498571429

00:23:34.440 --> 00:23:37.566
Casey know what I'm Speaking of.

NOTE Confidence: 0.635826498571429

00:23:37.570 --> 00:23:40.026
And then all this stuff is being extracted.

NOTE Confidence: 0.635826498571429

00:23:40.030 --> 00:23:42.010
Return insert range after we're putter,

NOTE Confidence: 0.635826498571429

00:23:42.010 --> 00:23:43.678
unwrap first unwrap last,

NOTE Confidence: 0.635826498571429

00:23:43.678 --> 00:23:46.037
because we've already adial verified OK,

NOTE Confidence: 0.635826498571429

00:23:46.037 --> 00:23:47.906
so now the function is just being

NOTE Confidence: 0.635826498571429

00:23:47.906 --> 00:23:49.610
reduced to do the verification.

NOTE Confidence: 0.635826498571429

00:23:49.610 --> 00:23:52.235
Or sorry functions being reduced to an

NOTE Confidence: 0.635826498571429

00:23:52.235 --> 00:23:54.928
ideal to check the container parent,

NOTE Confidence: 0.635826498571429

00:23:54.930 --> 00:23:58.955
verify the range and then unwrap everything.

NOTE Confidence: 0.635826498571429

00:23:58.960 --> 00:23:59.598
OK then,

NOTE Confidence: 0.635826498571429

00:23:59.598 --> 00:24:01.193
if defc live containers ranges

NOTE Confidence: 0.635826498571429

00:24:01.193 --> 00:24:04.195
we're in 23 mode and if template on

NOTE Confidence: 0.635826498571429

00:24:04.195 --> 00:24:05.775
container compatible range insert

NOTE Confidence: 0.635826498571429

00:24:05.775 --> 00:24:08.173
range after again no notice guard

NOTE Confidence: 0.635826498571429

00:24:08.173 --> 00:24:10.113
because this is modifying function

NOTE Confidence: 0.635826498571429

00:24:10.120 --> 00:24:11.597
you could easily call it and then

NOTE Confidence: 0.635826498571429

00:24:11.597 --> 00:24:13.099
drop the return value on the floor.

NOTE Confidence: 0.635826498571429

00:24:13.100 --> 00:24:14.890
We're going to insert after

NOTE Confidence: 0.635826498571429

00:24:14.890 --> 00:24:16.322
consideration where range refer

NOTE Confidence: 0.635826498571429

00:24:16.322 --> 00:24:17.939
frange when we're on IDL two,

NOTE Confidence: 0.635826498571429

00:24:17.940 --> 00:24:19.350
make sure that we're as container

NOTE Confidence: 0.635826498571429

00:24:19.350 --> 00:24:21.297
is equal to the status of my L2.

NOTE Confidence: 0.635826498571429

00:24:21.297 --> 00:24:23.559
We talked about the message called

NOTE Confidence: 0.635826498571429

00:24:23.559 --> 00:24:25.950
insert range after with where putter.

NOTE Confidence: 0.635826498571429

00:24:25.950 --> 00:24:27.490
You begin, you end of the range.

NOTE Confidence: 0.635826498571429

00:24:27.490 --> 00:24:28.708
OK, that's good.

NOTE Confidence: 0.635826498571429

00:24:28.708 --> 00:24:31.144
And then finally a deduction guide.

NOTE Confidence: 0.635826498571429

00:24:31.150 --> 00:24:31.666
UM,

NOTE Confidence: 0.635826498571429

00:24:31.666 --> 00:24:34.762
if dev containers ranges template on

NOTE Confidence: 0.635826498571429

00:24:34.762 --> 00:24:38.312
a ranges input range R&amp;amp;G and a class

NOTE Confidence: 0.635826498571429

00:24:38.312 --> 00:24:40.699
Alec that defaults to allocator for ranges.

NOTE Confidence: 0.635826498571429

00:24:40.700 --> 00:24:43.250
Range value to RNG enable if

NOTE Confidence: 0.635826498571429

00:24:43.250 --> 00:24:46.000
it looks like an allocator.

NOTE Confidence: 0.635826498571429

00:24:46.000 --> 00:24:48.646
OK, that's right forward list from where,

NOTE Confidence: 0.635826498571429

00:24:48.650 --> 00:24:50.945
uh, tag instructor range rifraf

NOTE Confidence: 0.635826498571429

00:24:50.945 --> 00:24:53.240
Alec is Alec Prince Pren.

NOTE Confidence: 0.635826498571429

00:24:53.240 --> 00:24:54.950
Reduce forward list ranges range

NOTE Confidence: 0.635826498571429

00:24:54.950 --> 00:24:57.255
of value to range L OK,

NOTE Confidence: 0.635826498571429

00:24:57.255 --> 00:25:00.230
this deduction guide is good.

NOTE Confidence: 0.635826498571429

00:25:00.230 --> 00:25:00.490
OK,

NOTE Confidence: 0.635826498571429

00:25:00.490 --> 00:25:02.310
so that's a forward list we got.

NOTE Confidence: 0.635826498571429

00:25:02.310 --> 00:25:05.159
Listen forward list so I remember looking

NOTE Confidence: 0.635826498571429

00:25:05.159 --> 00:25:07.938
at vector and thinking it was big.

NOTE Confidence: 0.635826498571429

00:25:07.940 --> 00:25:10.383
Let's see shall we warm U with

NOTE Confidence: 0.635826498571429

00:25:10.383 --> 00:25:12.240
another node like container?

NOTE Confidence: 0.635826498571429

00:25:12.240 --> 00:25:13.548
Let's look at uh.

NOTE Confidence: 0.682144802666666

00:25:16.000 --> 00:25:18.009
X trees the cot? Let's look at

NOTE Confidence: 0.682144802666666

00:25:18.009 --> 00:25:20.417
X tree 1st and then map and set.

NOTE Confidence: 0.682144802666666

00:25:20.420 --> 00:25:21.470
Trying to build up the

NOTE Confidence: 0.682144802666666

00:25:21.470 --> 00:25:22.520
courage to look at vector.

NOTE Confidence: 0.682144802666666

00:25:22.520 --> 00:25:26.076
OK, so xtree it's node base,

NOTE Confidence: 0.682144802666666

00:25:26.076 --> 00:25:27.536
so it's gonna seem similar.

NOTE Confidence: 0.682144802666666

00:25:27.540 --> 00:25:29.913
We are clearly public for insert and

NOTE Confidence: 0.682144802666666

00:25:29.913 --> 00:25:31.674
then we're switching into protected

NOTE Confidence: 0.682144802666666

00:25:31.674 --> 00:25:33.369
because our drive classes will

NOTE Confidence: 0.682144802666666

00:25:33.369 --> 00:25:35.813
need to see this before we go back

NOTE Confidence: 0.682144802666666

00:25:35.813 --> 00:25:37.260
to public template intersectional

NOTE Confidence: 0.682144802666666

00:25:37.260 --> 00:25:39.060
avoid insert range unchecked

NOTE Confidence: 0.682144802666666

00:25:39.060 --> 00:25:41.280
that our first consent analas

NOTE Confidence: 0.682144802666666

00:25:41.280 --> 00:25:43.576
consult on my head is get scary,

NOTE Confidence: 0.682144802666666

00:25:43.580 --> 00:25:46.238
which is our scary data structure.

NOTE Confidence: 0.682144802666666

00:25:46.240 --> 00:25:48.940
Scary is a technical term actually.

NOTE Confidence: 0.682144802666666

00:25:48.940 --> 00:25:50.550
My head. This points to the Sentinel.

NOTE Confidence: 0.682144802666666

00:25:50.550 --> 00:25:54.198
Code for as long as we have not

NOTE Confidence: 0.682144802666666

00:25:54.198 --> 00:25:56.374
encountered the last increment

NOTE Confidence: 0.682144802666666

00:25:56.374 --> 00:25:59.866
1st and placement before my head.

NOTE Confidence: 0.682144802666666

00:25:59.870 --> 00:26:01.170
The element to your first.

NOTE Confidence: 0.682144802666666

00:26:01.170 --> 00:26:02.376
OK, that's how we insert nodes.

NOTE Confidence: 0.682144802666666

00:26:02.380 --> 00:26:04.456
It's good. Go back to public.

NOTE Confidence: 0.682144802666666

00:26:04.460 --> 00:26:06.196
So all of this is being extracted,

NOTE Confidence: 0.682144802666666

00:26:06.200 --> 00:26:08.639
we verify and then we pass the unwrap first,

NOTE Confidence: 0.682144802666666

00:26:08.640 --> 00:26:11.405
unwrap last and then this is going

NOTE Confidence: 0.682144802666666

00:26:11.405 --> 00:26:13.716
U here exactly moving except for

NOTE Confidence: 0.682144802666666

00:26:13.716 --> 00:26:15.990
you first being renamed at first.

NOTE Confidence: 0.682144802666666

00:26:15.990 --> 00:26:16.750
That's good,

NOTE Confidence: 0.682144802666666

00:26:16.750 --> 00:26:19.030
so it's being generalized if Dev

NOTE Confidence: 0.682144802666666

00:26:19.030 --> 00:26:20.703
cclub containers ranges template

NOTE Confidence: 0.682144802666666

00:26:20.703 --> 00:26:22.395
container compatible range for

NOTE Confidence: 0.682144802666666

00:26:22.395 --> 00:26:24.801
insert range range for range insert

NOTE Confidence: 0.682144802666666

00:26:24.801 --> 00:26:26.847
range and checked you begin range

NOTE Confidence: 0.682144802666666

00:26:26.847 --> 00:26:29.010
you inrange just insert everything.

NOTE Confidence: 0.682144802666666

00:26:29.010 --> 00:26:31.154
And effective containers ranges

NOTE Confidence: 0.682144802666666

00:26:31.154 --> 00:26:33.078
OK for the input list.

NOTE Confidence: 0.682144802666666

00:26:33.078 --> 00:26:35.160
We can call insert range unchecked.

NOTE Confidence: 0.682144802666666

00:26:35.160 --> 00:26:36.728
And pass with pointers.

NOTE Confidence: 0.682144802666666

00:26:36.728 --> 00:26:39.720
Yep, that's a nice optimization.

NOTE Confidence: 0.682144802666666

00:26:39.720 --> 00:26:41.198
OK, X tree is good.

NOTE Confidence: 0.682144802666666

00:26:41.198 --> 00:26:42.798
Let's take a look at the actual

NOTE Confidence: 0.682144802666666

00:26:42.798 --> 00:26:44.762
drive containers map and set up.

NOTE Confidence: 0.682144802666666

00:26:44.762 --> 00:26:45.666
Here's map.

NOTE Confidence: 0.682144802666666

00:26:45.666 --> 00:26:48.830
So all the tag constructors are being.

NOTE Confidence: 0.682144802666666

00:26:48.830 --> 00:26:49.360
Lumped together,

NOTE Confidence: 0.682144802666666

00:26:49.360 --> 00:26:49.890
I'm here.

NOTE Confidence: 0.682144802666666

00:26:49.890 --> 00:26:51.215
I'm not doing the exhaustive

NOTE Confidence: 0.682144802666666

00:26:51.215 --> 00:26:52.468
out against the standard,

NOTE Confidence: 0.682144802666666

00:26:52.470 --> 00:26:54.036
I'm just looking at the code

NOTE Confidence: 0.682144802666666

00:26:54.036 --> 00:26:55.881
itself trying to make me see if

NOTE Confidence: 0.682144802666666

00:26:55.881 --> 00:26:57.375
it makes sense and is consistent.

NOTE Confidence: 0.682144802666666

00:26:57.380 --> 00:26:59.340
Umm, if people have containers,

NOTE Confidence: 0.682144802666666

00:26:59.340 --> 00:27:02.244
ranges and if OK, so I'm gonna ask.

NOTE Confidence: 0.682144802666666

00:27:02.250 --> 00:27:04.450
Review these template on container

NOTE Confidence: 0.682144802666666

00:27:04.450 --> 00:27:06.650
compatible range for the value

NOTE Confidence: 0.682144802666666

00:27:06.722 --> 00:27:08.320
type range map constructor

NOTE Confidence: 0.682144802666666

00:27:08.320 --> 00:27:10.538
tagged from range T range.

NOTE Confidence: 0.682144802666666

00:27:10.538 --> 00:27:12.428
Refer for range nothing coskey

NOTE Confidence: 0.682144802666666

00:27:12.428 --> 00:27:14.804
compare of Pred Konski compare of

NOTE Confidence: 0.682144802666666

00:27:14.804 --> 00:27:16.789
Pred Consolator type profile or

NOTE Confidence: 0.682144802666666

00:27:16.789 --> 00:27:18.869
just console locator type profile.

NOTE Confidence: 0.731391171818182

00:27:21.070 --> 00:27:24.244
This one should default to my

NOTE Confidence: 0.731391171818182

00:27:24.244 --> 00:27:26.990
base key compare Pren Pran.

NOTE Confidence: 0.731391171818182

00:27:26.990 --> 00:27:29.430
This is the type.

NOTE Confidence: 0.731391171818182

00:27:29.430 --> 00:27:31.068
I wanna see if this is pre-existing.

NOTE Confidence: 0.731391171818182

00:27:31.070 --> 00:27:33.107
We try to construct temporaries with braces,

NOTE Confidence: 0.731391171818182

00:27:33.110 --> 00:27:34.214
but it is preexisting.

NOTE Confidence: 0.731391171818182

00:27:34.214 --> 00:27:37.600
We do, say parents here, that's fine.

NOTE Confidence: 0.731391171818182

00:27:37.600 --> 00:27:39.200
But if we have a period, we should use it.

NOTE Confidence: 0.731391171818182

00:27:39.200 --> 00:27:40.558
We have a pretty now we should

NOTE Confidence: 0.731391171818182

00:27:40.558 --> 00:27:41.979
use both if we have just the,

NOTE Confidence: 0.731391171818182

00:27:41.980 --> 00:27:45.388
we should say key, compare it out OK.

NOTE Confidence: 0.731391171818182

00:27:45.390 --> 00:27:48.228
And then this insert range unchecked,

NOTE Confidence: 0.731391171818182

00:27:48.230 --> 00:27:49.166
give it ranges.

NOTE Confidence: 0.731391171818182

00:27:49.166 --> 00:27:51.590
You begin range ranges you and range OK,

NOTE Confidence: 0.731391171818182

00:27:51.590 --> 00:27:53.750
all those constructors are good.

NOTE Confidence: 0.731391171818182

00:27:53.750 --> 00:27:57.208
Uh, next uh map has deduction guides.

NOTE Confidence: 0.731391171818182

00:27:57.210 --> 00:27:59.148
Uh, while these guides are repose,

NOTE Confidence: 0.731391171818182

00:27:59.150 --> 00:28:02.888
if dev people containers ranges endif.

NOTE Confidence: 0.731391171818182

00:28:02.890 --> 00:28:05.634
OK, and it makes sense to stack these

NOTE Confidence: 0.731391171818182

00:28:05.634 --> 00:28:08.619
within the has CXX 17 guard around all of.

NOTE Confidence: 0.843758508

00:28:11.370 --> 00:28:12.990
Of the deduction guides,

NOTE Confidence: 0.843758508

00:28:12.990 --> 00:28:15.015
generally we do not like

NOTE Confidence: 0.843758508

00:28:15.015 --> 00:28:17.377
to nest these ifs too much.

NOTE Confidence: 0.843758508

00:28:17.380 --> 00:28:19.284
We'd rather say if has 17 and

NOTE Confidence: 0.843758508

00:28:19.284 --> 00:28:22.156
if if has 20 and if for like

NOTE Confidence: 0.843758508

00:28:22.156 --> 00:28:23.740
just different member functions.

NOTE Confidence: 0.843758508

00:28:23.740 --> 00:28:24.924
Even though strictly speaking

NOTE Confidence: 0.843758508

00:28:24.924 --> 00:28:26.700
20 is a subset of 17.

NOTE Confidence: 0.843758508

00:28:26.700 --> 00:28:29.376
However, 17 is when class template

NOTE Confidence: 0.843758508

00:28:29.376 --> 00:28:31.160
argument deduction was added,

NOTE Confidence: 0.843758508

00:28:31.160 --> 00:28:33.544
and it's natural to guard all of the

NOTE Confidence: 0.843758508

00:28:33.544 --> 00:28:35.678
guides with 17 and then additionally

NOTE Confidence: 0.843758508

00:28:35.678 --> 00:28:38.380
light up new constructors with the if Dev,

NOTE Confidence: 0.843758508

00:28:38.380 --> 00:28:39.885
so this is fine and consistent with

NOTE Confidence: 0.843758508

00:28:39.885 --> 00:28:43.000
what we do elsewhere, I think.

NOTE Confidence: 0.843758508

00:28:43.000 --> 00:28:44.020
Template on ranges,

NOTE Confidence: 0.843758508

00:28:44.020 --> 00:28:45.674
input range, RG class,

NOTE Confidence: 0.843758508

00:28:45.674 --> 00:28:48.596
PR the predicate defaults to less

NOTE Confidence: 0.843758508

00:28:48.600 --> 00:28:51.799
of the range key type of range.

NOTE Confidence: 0.843758508

00:28:51.800 --> 00:28:54.640
Class Alec defaults allocator convert

NOTE Confidence: 0.843758508

00:28:54.640 --> 00:29:00.120
range to alloc type range OK enable if.

NOTE Confidence: 0.843758508

00:29:00.120 --> 00:29:02.514
Several criteria need to be met conjunction,

NOTE Confidence: 0.843758508

00:29:02.520 --> 00:29:05.280
so PR had better not be an allocator.

NOTE Confidence: 0.843758508

00:29:05.280 --> 00:29:07.300
Alloc must be an allocator.

NOTE Confidence: 0.843758508

00:29:07.300 --> 00:29:09.780
OK this.

NOTE Confidence: 0.843758508

00:29:09.780 --> 00:29:12.508
Any constraint prevents some

NOTE Confidence: 0.843758508

00:29:12.508 --> 00:29:14.554
confusion between the.

NOTE Confidence: 0.843758508

00:29:14.560 --> 00:29:16.660
Uh, possible guides when allocators

NOTE Confidence: 0.843758508

00:29:16.660 --> 00:29:18.340
appear in different places,

NOTE Confidence: 0.843758508

00:29:18.340 --> 00:29:19.866
even though it looks like it might

NOTE Confidence: 0.843758508

00:29:19.866 --> 00:29:21.642
should not be necessary map if

NOTE Confidence: 0.843758508

00:29:21.642 --> 00:29:23.628
you're deducing from range T range.

NOTE Confidence: 0.843758508

00:29:23.630 --> 00:29:25.580
Rifraf PR has a default.

NOTE Confidence: 0.843758508

00:29:25.580 --> 00:29:28.764
Alec has a default deduce map of range

NOTE Confidence: 0.843758508

00:29:28.764 --> 00:29:32.820
key type, range range mapped type range,

NOTE Confidence: 0.843758508

00:29:32.820 --> 00:29:34.140
the PRED, and the Alec.

NOTE Confidence: 0.843758508

00:29:34.140 --> 00:29:36.040
OK and then here.

NOTE Confidence: 0.843758508

00:29:36.040 --> 00:29:39.780
If you don't have a party at all.

NOTE Confidence: 0.843758508

00:29:39.780 --> 00:29:45.260
Template on range. Class Alec.

NOTE Confidence: 0.843758508

00:29:45.260 --> 00:29:49.388
OK, so let's see this handles nothing pred.

NOTE Confidence: 0.843758508

00:29:49.390 --> 00:29:52.330
And not this handles what range range.

NOTE Confidence: 0.843758508

00:29:52.330 --> 00:29:53.394
Prad range Pret Alec,

NOTE Confidence: 0.843758508

00:29:53.394 --> 00:29:55.669
but we need one to handle range Alex.

NOTE Confidence: 0.843758508

00:29:55.670 --> 00:29:57.045
That's why Alec appears here

NOTE Confidence: 0.843758508

00:29:57.045 --> 00:29:57.870
without a default.

NOTE Confidence: 0.843758508

00:29:57.870 --> 00:29:58.698
That's Alec.

NOTE Confidence: 0.843758508

00:29:58.698 --> 00:30:02.010
And then Alec could better be an allocator.

NOTE Confidence: 0.843758508

00:30:02.010 --> 00:30:04.585
Map has a constructor that

NOTE Confidence: 0.843758508

00:30:04.585 --> 00:30:06.130
requires takes allocator.

NOTE Confidence: 0.843758508

00:30:06.130 --> 00:30:08.970
And range key range range map type range.

NOTE Confidence: 0.843758508

00:30:08.970 --> 00:30:10.554
The Articat will default to less

NOTE Confidence: 0.843758508

00:30:10.554 --> 00:30:12.259
of the range key type range.

NOTE Confidence: 0.843758508

00:30:12.260 --> 00:30:14.028
Exactly the same here and then the Alec.

NOTE Confidence: 0.843758508

00:30:14.030 --> 00:30:16.250
OK, that guy looks good.

NOTE Confidence: 0.843758508

00:30:16.250 --> 00:30:18.010
Multi map extremely similar changes.

NOTE Confidence: 0.843758508

00:30:18.010 --> 00:30:19.263
I'm just going to be on the

NOTE Confidence: 0.843758508

00:30:19.263 --> 00:30:20.369
lookout for copy paste errors,

NOTE Confidence: 0.843758508

00:30:20.370 --> 00:30:23.266
but I don't expect to see any because

NOTE Confidence: 0.843758508

00:30:23.266 --> 00:30:26.107
there's no like messages or something.

NOTE Confidence: 0.843758508

00:30:26.110 --> 00:30:28.556
So key compare if you have a product, use it.

NOTE Confidence: 0.843758508

00:30:28.556 --> 00:30:29.802
If you have prenatal, use them both.

NOTE Confidence: 0.843758508

00:30:29.802 --> 00:30:31.782
If you have just all use key, compare now.

NOTE Confidence: 0.843758508

00:30:31.782 --> 00:30:33.030
Then insert range.

NOTE Confidence: 0.843758508

00:30:33.030 --> 00:30:34.374
Uncheck from the base class you begin.

NOTE Confidence: 0.843758508

00:30:34.380 --> 00:30:36.615
You end if dev containers

NOTE Confidence: 0.843758508

00:30:36.615 --> 00:30:38.850
ranges multi maps are deducing.

NOTE Confidence: 0.843758508

00:30:38.850 --> 00:30:42.520
We get a compiler if any of this said map.

NOTE Confidence: 0.843758508

00:30:42.520 --> 00:30:43.221
Otherwise,

NOTE Confidence: 0.843758508

00:30:43.221 --> 00:30:47.427
the same defaults the same constraints.

NOTE Confidence: 0.843758508

00:30:47.430 --> 00:30:50.302
Yep PRPR Alex Alec.

NOTE Confidence: 0.843758508

00:30:50.302 --> 00:30:53.764
Yeah, that's all good. OK map is done.

NOTE Confidence: 0.843758508

00:30:53.770 --> 00:30:55.798
Let's take a look at set.

NOTE Confidence: 0.843758508

00:30:55.800 --> 00:30:56.236
OK, again,

NOTE Confidence: 0.843758508

00:30:56.236 --> 00:30:57.544
extremely similar so I can sort

NOTE Confidence: 0.843758508

00:30:57.544 --> 00:30:58.580
of speed through this.

NOTE Confidence: 0.843758508

00:30:58.580 --> 00:31:00.497
I still got to lookout for copy paste errors,

NOTE Confidence: 0.843758508

00:31:00.500 --> 00:31:01.982
but I don't think there's gonna

NOTE Confidence: 0.843758508

00:31:01.982 --> 00:31:02.898
be any key compare.

NOTE Confidence: 0.843758508

00:31:02.898 --> 00:31:04.800
If you have tried to use it right now.

NOTE Confidence: 0.843758508

00:31:04.800 --> 00:31:08.240
Right now is key compare now insert range,

NOTE Confidence: 0.843758508

00:31:08.240 --> 00:31:11.600
uncheck you begin UN end Yep.

NOTE Confidence: 0.843758508

00:31:11.600 --> 00:31:13.700
Uh, these are the guides.

NOTE Confidence: 0.843758508

00:31:13.700 --> 00:31:16.406
If defc build containers ranges here,

NOTE Confidence: 0.843758508

00:31:16.410 --> 00:31:18.517
I want to make sure that nothing

NOTE Confidence: 0.843758508

00:31:18.517 --> 00:31:20.050
was like incorrectly copy pasted

NOTE Confidence: 0.843758508

00:31:20.050 --> 00:31:22.604
from MAM template on input range.

NOTE Confidence: 0.843758508

00:31:22.604 --> 00:31:25.580
If the PR less of ranges

NOTE Confidence: 0.705799353076923

00:31:25.683 --> 00:31:28.350
range value T OK here we don't need

NOTE Confidence: 0.705799353076923

00:31:28.350 --> 00:31:30.080
that internal range key type thing.

NOTE Confidence: 0.705799353076923

00:31:30.080 --> 00:31:31.560
You just get the range of value T.

NOTE Confidence: 0.705799353076923

00:31:31.560 --> 00:31:32.936
But we do need to go into the

NOTE Confidence: 0.705799353076923

00:31:32.936 --> 00:31:33.660
ranges namespace for that.

NOTE Confidence: 0.705799353076923

00:31:33.660 --> 00:31:35.880
So that's that difference.

NOTE Confidence: 0.705799353076923

00:31:35.880 --> 00:31:39.210
Alec is allocator for that thing.

NOTE Confidence: 0.705799353076923

00:31:39.210 --> 00:31:40.806
Umm PR had better not be

NOTE Confidence: 0.705799353076923

00:31:40.806 --> 00:31:41.604
an allocator allocator.

NOTE Confidence: 0.705799353076923

00:31:41.610 --> 00:31:43.250
Should be an allocator.

NOTE Confidence: 0.705799353076923

00:31:43.250 --> 00:31:44.890
OK, that's a good set of ranges.

NOTE Confidence: 0.705799353076923

00:31:44.890 --> 00:31:47.298
Range value T OK.

NOTE Confidence: 0.705799353076923

00:31:47.300 --> 00:31:51.828
And then if you only have the Alec.

NOTE Confidence: 0.705799353076923

00:31:51.830 --> 00:31:54.143
It had better be an allocator to do set

NOTE Confidence: 0.705799353076923

00:31:54.143 --> 00:31:56.146
ranges, range value T, lots of ranges,

NOTE Confidence: 0.705799353076923

00:31:56.150 --> 00:31:59.630
range of value T and Alec OK, that's good.

NOTE Confidence: 0.705799353076923

00:31:59.630 --> 00:32:02.730
Multiset key compare Pred Pred

NOTE Confidence: 0.705799353076923

00:32:02.730 --> 00:32:04.956
key compare you begin you end.

NOTE Confidence: 0.705799353076923

00:32:04.960 --> 00:32:07.990
That's how good guides are

NOTE Confidence: 0.705799353076923

00:32:07.990 --> 00:32:09.808
deducing multi sets.

NOTE Confidence: 0.705799353076923

00:32:09.810 --> 00:32:13.264
This is PRPR Alex Alec got

NOTE Confidence: 0.705799353076923

00:32:13.264 --> 00:32:16.120
the same constraint here.

NOTE Confidence: 0.705799353076923

00:32:16.120 --> 00:32:18.170
Got to be an Alec.

NOTE Confidence: 0.705799353076923

00:32:18.170 --> 00:32:21.680
Yes, OK. That is good.

NOTE Confidence: 0.705799353076923

00:32:21.680 --> 00:32:24.032
Now let's do unordered.

NOTE Confidence: 0.705799353076923

00:32:24.032 --> 00:32:25.208
Humanize that,

NOTE Confidence: 0.705799353076923

00:32:25.210 --> 00:32:28.000
that's xash.

NOTE Confidence: 0.705799353076923

00:32:28.000 --> 00:32:28.242
OK,

NOTE Confidence: 0.705799353076923

00:32:28.242 --> 00:32:29.936
again the same sort of deal where

NOTE Confidence: 0.705799353076923

00:32:29.936 --> 00:32:31.702
we're going to call an internal

NOTE Confidence: 0.705799353076923

00:32:31.702 --> 00:32:32.934
helper insert range unchecked.

NOTE Confidence: 0.705799353076923

00:32:32.940 --> 00:32:33.868
Once we've got unchecked,

NOTE Confidence: 0.705799353076923

00:32:33.868 --> 00:32:35.750
begin unchecked and so nice for efficiency.

NOTE Confidence: 0.74471623

00:32:41.030 --> 00:32:43.228
Here we were clearly public for insert,

NOTE Confidence: 0.74471623

00:32:43.230 --> 00:32:44.325
jump into protected,

NOTE Confidence: 0.74471623

00:32:44.325 --> 00:32:47.202
then go back to public. Excuse me.

NOTE Confidence: 0.74471623

00:32:47.202 --> 00:32:48.780
Template cluster class.

NOTE Confidence: 0.74471623

00:32:48.780 --> 00:32:49.854
Sentinel void insert.

NOTE Confidence: 0.74471623

00:32:49.854 --> 00:32:51.644
Range unchecked it refers consentino

NOTE Confidence: 0.74471623

00:32:51.644 --> 00:32:53.630
last this is extracting the body.

NOTE Confidence: 0.74471623

00:32:53.630 --> 00:32:56.318
Here we want to call the place

NOTE Confidence: 0.74471623

00:32:56.318 --> 00:32:57.470
function member function

NOTE Confidence: 0.74471623

00:32:57.541 --> 00:32:58.759
drfirst that's being extracted.

NOTE Confidence: 0.74471623

00:32:58.759 --> 00:33:00.217
We still need to verify out

NOTE Confidence: 0.74471623

00:33:00.217 --> 00:33:01.419
here and then unwrap both.

NOTE Confidence: 0.74471623

00:33:01.420 --> 00:33:03.170
That's good.

NOTE Confidence: 0.74471623

00:33:03.170 --> 00:33:05.246
We're still in public FDC flip

NOTE Confidence: 0.74471623

00:33:05.246 --> 00:33:06.630
containers ranges template compatible

NOTE Confidence: 0.74471623

00:33:06.683 --> 00:33:08.608
range for our value type range insert

NOTE Confidence: 0.74471623

00:33:08.608 --> 00:33:10.414
range don't need to verify anything

NOTE Confidence: 0.74471623

00:33:10.414 --> 00:33:11.964
just call insert range unchecked

NOTE Confidence: 0.74471623

00:33:11.964 --> 00:33:14.495
you begin you end and then here

NOTE Confidence: 0.74471623

00:33:14.495 --> 00:33:16.400
for efficiency insert range intact

NOTE Confidence: 0.74471623

00:33:16.471 --> 00:33:18.646
eyelids begin ilist end awesome.

NOTE Confidence: 0.74471623

00:33:18.650 --> 00:33:21.212
Yep that's right if DEF OK

NOTE Confidence: 0.74471623

00:33:21.212 --> 00:33:23.350
let's look at unordered map.

NOTE Confidence: 0.74471623

00:33:23.350 --> 00:33:26.080
OK, so here we've got.

NOTE Confidence: 0.74471623

00:33:26.080 --> 00:33:28.096
A zillion deduction guides.

NOTE Confidence: 0.74471623

00:33:28.096 --> 00:33:28.600
OK,

NOTE Confidence: 0.74471623

00:33:28.600 --> 00:33:30.406
so there's enough here that I

NOTE Confidence: 0.74471623

00:33:30.406 --> 00:33:31.997
gotta verify against the standard

NOTE Confidence: 0.74471623

00:33:31.997 --> 00:33:34.300
because we've had issues even in the

NOTE Confidence: 0.74471623

00:33:34.300 --> 00:33:35.908
standard with guides being missed,

NOTE Confidence: 0.74471623

00:33:35.908 --> 00:33:38.538
so I want to make sure we don't

NOTE Confidence: 0.74471623

00:33:38.538 --> 00:33:39.570
miss any here.

NOTE Confidence: 0.74471623

00:33:39.570 --> 00:33:41.988
Let's take a look at unordered.

NOTE Confidence: 0.68810326

00:33:44.030 --> 00:33:44.770
Map.

NOTE Confidence: 0.844177893333333

00:33:47.850 --> 00:33:50.343
Also, I could have sworn that we have one.

NOTE Confidence: 0.844177893333333

00:33:50.350 --> 00:33:53.770
There's one constructor that.

NOTE Confidence: 0.844177893333333

00:33:53.770 --> 00:33:55.670
Was missing in the standard

NOTE Confidence: 0.844177893333333

00:33:55.670 --> 00:33:57.570
itself and we implemented it.

NOTE Confidence: 0.844177893333333

00:33:57.570 --> 00:33:59.406
And we have an LWG issue.

NOTE Confidence: 0.844177893333333

00:33:59.410 --> 00:34:01.590
So the issue here is that if you look at

NOTE Confidence: 0.844177893333333

00:34:01.645 --> 00:34:03.985
all of unordered maps zillion constructors,

NOTE Confidence: 0.844177893333333

00:34:03.990 --> 00:34:05.868
it's sort of handling defaults like

NOTE Confidence: 0.844177893333333

00:34:05.868 --> 00:34:08.310
if you don't pass a hash or whatever,

NOTE Confidence: 0.844177893333333

00:34:08.310 --> 00:34:10.146
and as these things were added

NOTE Confidence: 0.844177893333333

00:34:10.146 --> 00:34:12.290
over time due to an oversight,

NOTE Confidence: 0.844177893333333

00:34:12.290 --> 00:34:14.768
one or two combinations were omitted.

NOTE Confidence: 0.844177893333333

00:34:14.770 --> 00:34:15.784
Let me. Actually,

NOTE Confidence: 0.844177893333333

00:34:15.784 --> 00:34:17.136
this is interesting and

NOTE Confidence: 0.844177893333333

00:34:17.136 --> 00:34:18.540
interesting to talk about.

NOTE Confidence: 0.844177893333333

00:34:18.540 --> 00:34:20.340
Let me bring this up so I've got a

NOTE Confidence: 0.844177893333333

00:34:20.340 --> 00:34:21.989
bookmark for the LBG table of contents.

NOTE Confidence: 0.844177893333333

00:34:21.990 --> 00:34:24.566
I'm pretty sure I filed this issue,

NOTE Confidence: 0.844177893333333

00:34:24.570 --> 00:34:25.930
but it was not recent,

NOTE Confidence: 0.844177893333333

00:34:25.930 --> 00:34:27.649
so it's going to be maybe near the middle.

NOTE Confidence: 0.844177893333333

00:34:27.650 --> 00:34:30.457
I would have talked about probably unordered.

NOTE Confidence: 0.844177893333333

00:34:30.460 --> 00:34:32.372
I don't know if I would have said

NOTE Confidence: 0.844177893333333

00:34:32.372 --> 00:34:33.960
unordered positive there's 43 occurrences.

NOTE Confidence: 0.844177893333333

00:34:33.960 --> 00:34:35.226
See if I can find this.

NOTE Confidence: 0.884568626666667

00:34:37.340 --> 00:34:39.278
I would have talked about constructors.

NOTE Confidence: 0.57166327

00:34:41.480 --> 00:34:43.049
Not preserve functions.

NOTE Confidence: 0.57166327

00:34:43.049 --> 00:34:44.618
More missing allocator.

NOTE Confidence: 0.57166327

00:34:44.620 --> 00:34:46.116
Extended constructors for unordered.

NOTE Confidence: 0.57166327

00:34:46.116 --> 00:34:48.518
Yeah, this seems right, and it's new,

NOTE Confidence: 0.57166327

00:34:48.520 --> 00:34:50.557
meaning it has not been addressed yet.

NOTE Confidence: 0.57166327

00:34:50.560 --> 00:34:52.336
Oh this is Billy.

NOTE Confidence: 0.57166327

00:34:52.336 --> 00:34:55.400
OK was not me. Thanks Billy.

NOTE Confidence: 0.57166327

00:34:55.400 --> 00:34:58.905
We suggest where is the

NOTE Confidence: 0.57166327

00:34:58.905 --> 00:35:01.008
current proposed resolution?

NOTE Confidence: 0.57166327

00:35:01.010 --> 00:35:03.310
Adding constructors of the form

NOTE Confidence: 0.57166327

00:35:03.310 --> 00:35:06.610
take a range and an allocator.

NOTE Confidence: 0.57166327

00:35:06.610 --> 00:35:09.830
Take an input list and an allocator.

NOTE Confidence: 0.57166327

00:35:09.830 --> 00:35:14.098
Provide. Definitions for them.

NOTE Confidence: 0.57166327

00:35:14.100 --> 00:35:17.290
Same for unordered multi map.

NOTE Confidence: 0.57166327

00:35:17.290 --> 00:35:19.838
Did we ever? We should also guides.

NOTE Confidence: 0.57166327

00:35:19.840 --> 00:35:21.490
That's interesting, this doesn't mention,

NOTE Confidence: 0.57166327

00:35:21.490 --> 00:35:24.088
oh, this issue probably predates CTAD,

NOTE Confidence: 0.57166327

00:35:24.090 --> 00:35:25.590
doesn't it?

NOTE Confidence: 0.57166327

00:35:25.590 --> 00:35:28.348
Yeah 2016, this may have predated the

NOTE Confidence: 0.57166327

00:35:28.348 --> 00:35:30.250
class template argument deduction.

NOTE Confidence: 0.57166327

00:35:30.250 --> 00:35:31.420
OK, so aside from that,

NOTE Confidence: 0.57166327

00:35:31.420 --> 00:35:34.380
which I'm pretty sure we do have implemented,

NOTE Confidence: 0.57166327

00:35:34.380 --> 00:35:37.700
that means we should check do we have?

NOTE Confidence: 0.57166327

00:35:37.700 --> 00:35:40.240
Constructors for range and Alec,

NOTE Confidence: 0.57166327

00:35:40.240 --> 00:35:42.166
and I think we do because

NOTE Confidence: 0.57166327

00:35:42.166 --> 00:35:44.000
I see this from range.

NOTE Confidence: 0.57166327

00:35:44.000 --> 00:35:46.346
So let's look at the paper.

NOTE Confidence: 0.57166327

00:35:46.350 --> 00:35:48.430
Unordered mam from range.

NOTE Confidence: 0.57166327

00:35:48.430 --> 00:35:50.782
OK, this is actually simpler

NOTE Confidence: 0.57166327

00:35:50.782 --> 00:35:52.614
because we just provide.

NOTE Confidence: 0.57166327

00:35:52.620 --> 00:35:53.960
But we provide one here.

NOTE Confidence: 0.814107855555556

00:35:57.190 --> 00:35:58.675
OK, so it actually is

NOTE Confidence: 0.814107855555556

00:35:58.675 --> 00:35:59.863
following the pattern of.

NOTE Confidence: 0.814107855555556

00:35:59.870 --> 00:36:02.798
Let's provide several overloads.

NOTE Confidence: 0.814107855555556

00:36:02.798 --> 00:36:05.566
That provide various defaults. Uhm?

NOTE Confidence: 0.814107855555556

00:36:05.566 --> 00:36:09.215
And the one that's missing is range

NOTE Confidence: 0.814107855555556

00:36:09.215 --> 00:36:11.760
followed by just an allocator.

NOTE Confidence: 0.814107855555556

00:36:11.760 --> 00:36:12.612
It's not this one.

NOTE Confidence: 0.814107855555556

00:36:12.612 --> 00:36:14.400
This one's got way too many arguments.

NOTE Confidence: 0.814107855555556

00:36:14.400 --> 00:36:16.590
This is range size Alec.

NOTE Confidence: 0.814107855555556

00:36:16.590 --> 00:36:18.280
Grain size hash your Alec.

NOTE Confidence: 0.875508734615385

00:36:21.240 --> 00:36:24.047
It looks like the new proposal is

NOTE Confidence: 0.875508734615385

00:36:24.047 --> 00:36:26.459
equally affected by this LWG issue,

NOTE Confidence: 0.875508734615385

00:36:26.460 --> 00:36:31.266
presumably because it imitated the existing.

NOTE Confidence: 0.875508734615385

00:36:31.270 --> 00:36:35.280
Functions are the existing constructors.

NOTE Confidence: 0.875508734615385

00:36:35.280 --> 00:36:36.759
So because this.

NOTE Confidence: 0.875508734615385

00:36:36.759 --> 00:36:41.480
Is not it's not the end of the world.

NOTE Confidence: 0.875508734615385

00:36:41.480 --> 00:36:44.070
I don't know if I would write a comment here

NOTE Confidence: 0.875508734615385

00:36:44.132 --> 00:36:46.484
saying that we should file an LWG issue.

NOTE Confidence: 0.875508734615385

00:36:46.490 --> 00:36:48.170
It seems like we should because otherwise,

NOTE Confidence: 0.875508734615385

00:36:48.170 --> 00:36:49.810
like I'm maybe the first

NOTE Confidence: 0.875508734615385

00:36:49.810 --> 00:36:52.890
person to notice this, UM.

NOTE Confidence: 0.875508734615385

00:36:52.890 --> 00:36:54.348
Perhaps we should point this out.

NOTE Confidence: 0.875508734615385

00:36:54.350 --> 00:36:55.784
Uh, this got a forward citation

NOTE Confidence: 0.875508734615385

00:36:55.784 --> 00:36:57.340
of 35 or six with that.

NOTE Confidence: 0.59021339575

00:37:01.260 --> 00:37:03.664
Missing ohh allocators think

NOTE Confidence: 0.59021339575

00:37:03.664 --> 00:37:06.068
structures for priority queue.

NOTE Confidence: 0.59021339575

00:37:06.070 --> 00:37:08.534
Yeah, let me check real quick to

NOTE Confidence: 0.59021339575

00:37:08.534 --> 00:37:12.760
see if UM, we come into 2713 in.

NOTE Confidence: 0.59021339575

00:37:12.760 --> 00:37:15.736
What is this unordered map itself?

NOTE Confidence: 0.59021339575

00:37:15.740 --> 00:37:17.540
Unordered map.

NOTE Confidence: 0.75890405375

00:37:19.840 --> 00:37:22.012
We didn't. I thought we just

NOTE Confidence: 0.75890405375

00:37:22.012 --> 00:37:24.084
implemented it, so let's look at

NOTE Confidence: 0.75890405375

00:37:24.084 --> 00:37:27.549
the unordered map constructors.

NOTE Confidence: 0.75890405375

00:37:27.550 --> 00:37:28.854
And it would be.

NOTE Confidence: 0.75890405375

00:37:28.854 --> 00:37:31.419
In a in an allocator as the

NOTE Confidence: 0.75890405375

00:37:31.419 --> 00:37:33.507
signature we're looking for.

NOTE Confidence: 0.770513320625

00:37:36.090 --> 00:37:38.460
Yeah, we just straight up implemented

NOTE Confidence: 0.770513320625

00:37:38.460 --> 00:37:40.490
it without actually commenting that

NOTE Confidence: 0.770513320625

00:37:40.490 --> 00:37:42.425
it's technically implementing a PR,

NOTE Confidence: 0.770513320625

00:37:42.430 --> 00:37:43.900
uh, proposed resolution.

NOTE Confidence: 0.770513320625

00:37:43.900 --> 00:37:47.330
And same with the the CTAD below.

NOTE Confidence: 0.770513320625

00:37:47.330 --> 00:37:48.898
Usually we we do like to comment that

NOTE Confidence: 0.770513320625

00:37:48.898 --> 00:37:50.635
I guess we just went ahead and did it.

NOTE Confidence: 0.7279271072

00:37:53.830 --> 00:37:56.920
Ah, let's see. This was, uh,

NOTE Confidence: 0.7279271072

00:37:56.920 --> 00:38:00.160
wasn't this one of Casey's proposals?

NOTE Confidence: 0.7279271072

00:38:00.160 --> 00:38:02.116
Yes, he was actually involved here.

NOTE Confidence: 0.7279271072

00:38:02.120 --> 00:38:03.300
I will add a comment.

NOTE Confidence: 0.7279271072

00:38:03.300 --> 00:38:04.777
Uh, it will be no change requested,

NOTE Confidence: 0.7279271072

00:38:04.780 --> 00:38:08.676
but I will observe that I believe that.

NOTE Confidence: 0.7279271072

00:38:08.680 --> 00:38:10.520
This is affected because let's

NOTE Confidence: 0.7279271072

00:38:10.520 --> 00:38:12.360
bring here is just range.

NOTE Confidence: 0.7279271072

00:38:12.360 --> 00:38:15.300
No, here's range in Alec.

NOTE Confidence: 0.7279271072

00:38:15.300 --> 00:38:16.575
OK, I'm confused.

NOTE Confidence: 0.7279271072

00:38:16.575 --> 00:38:19.125
Am I missing something or did

NOTE Confidence: 0.7279271072

00:38:19.125 --> 00:38:20.573
Casey's implementation just

NOTE Confidence: 0.7279271072

00:38:20.573 --> 00:38:23.877
replicate the thing that we did in?

NOTE Confidence: 0.7279271072

00:38:23.880 --> 00:38:26.856
Our code OK, so unordered map.

NOTE Confidence: 0.770105419285714

00:38:29.020 --> 00:38:30.940
This one specifies from range range

NOTE Confidence: 0.770105419285714

00:38:30.940 --> 00:38:32.699
and then immediately goes on to

NOTE Confidence: 0.770105419285714

00:38:32.699 --> 00:38:35.010
size type, so that can't be it.

NOTE Confidence: 0.770105419285714

00:38:35.010 --> 00:38:38.058
From range, range size type no.

NOTE Confidence: 0.770105419285714

00:38:38.060 --> 00:38:40.646
Delegate from range range size type.

NOTE Confidence: 0.62431949

00:38:43.090 --> 00:38:45.138
And then deduction guides.

NOTE Confidence: 0.748601974615385

00:38:47.850 --> 00:38:49.754
OK, Casey is splitting out all of the

NOTE Confidence: 0.748601974615385

00:38:49.754 --> 00:38:51.470
default args in different instructors.

NOTE Confidence: 0.748601974615385

00:38:51.470 --> 00:38:53.050
That's following our existing,

NOTE Confidence: 0.748601974615385

00:38:53.050 --> 00:38:55.420
but he is implementing the one

NOTE Confidence: 0.748601974615385

00:38:55.490 --> 00:38:57.500
that is range and allocator so.

NOTE Confidence: 0.748601974615385

00:38:57.500 --> 00:38:58.946
I will comment saying that I

NOTE Confidence: 0.748601974615385

00:38:58.946 --> 00:38:59.910
think his implementation is

NOTE Confidence: 0.748601974615385

00:38:59.954 --> 00:39:01.159
doing the exact right thing,

NOTE Confidence: 0.748601974615385

00:39:01.160 --> 00:39:04.540
like we're replicating our extension,

NOTE Confidence: 0.748601974615385

00:39:04.540 --> 00:39:07.588
but we really should at least mention in

NOTE Confidence: 0.748601974615385

00:39:07.588 --> 00:39:10.757
this LWG issue that it's also affected.

NOTE Confidence: 0.748601974615385

00:39:10.760 --> 00:39:14.387
OK, so let's comment here, UM.

NOTE Confidence: 0.748601974615385

00:39:14.387 --> 00:39:19.910
It appears that. This paper.

NOTE Confidence: 0.771028135

00:39:22.450 --> 00:39:24.314
I want to link to the actual revisions,

NOTE Confidence: 0.771028135

00:39:24.320 --> 00:39:25.706
so I'll need the full number.

NOTE Confidence: 0.87456365

00:39:33.500 --> 00:39:39.950
Doesn't mention. This. Signature.

NOTE Confidence: 0.858497046

00:39:42.600 --> 00:39:47.870
But it's consistent with LWG.

NOTE Confidence: 0.858497046

00:39:47.870 --> 00:39:52.086
27 thirteens proposed resolution.

NOTE Confidence: 0.858497046

00:39:52.086 --> 00:39:55.248
And our implementation.

NOTE Confidence: 0.858497046

00:39:55.250 --> 00:40:00.060
Where we added such instructors.

NOTE Confidence: 0.858497046

00:40:00.060 --> 00:40:04.700
And the reduction guides.

NOTE Confidence: 0.858497046

00:40:04.700 --> 00:40:08.909
Without any. Comments.

NOTE Confidence: 0.858497046

00:40:08.910 --> 00:40:13.008
No change requested for this PR,

NOTE Confidence: 0.858497046

00:40:13.010 --> 00:40:17.189
but I believe we should at a minimum.

NOTE Confidence: 0.019879669

00:40:19.560 --> 00:40:20.250
Umm?

NOTE Confidence: 0.653597128571428

00:40:22.990 --> 00:40:29.360
Contact the LBG and add a note.

NOTE Confidence: 0.653597128571428

00:40:29.360 --> 00:40:33.890
2. Alderbridge 2713.

NOTE Confidence: 0.653597128571428

00:40:33.890 --> 00:40:35.675
Whoo, I don't want to do that.

NOTE Confidence: 0.653597128571428

00:40:35.680 --> 00:40:38.740
Now it's 2713. That

NOTE Confidence: 0.77124613

00:40:41.570 --> 00:40:46.430
copy this. P 1206 R sevens.

NOTE Confidence: 0.77124613

00:40:46.430 --> 00:40:49.680
New constructors are also affected.

NOTE Confidence: 0.77124613

00:40:49.680 --> 00:40:51.072
That's what we get for not

NOTE Confidence: 0.77124613

00:40:51.072 --> 00:40:52.750
solving it in the standard yet.

NOTE Confidence: 0.77124613

00:40:52.750 --> 00:40:55.192
OK, so let me double check

NOTE Confidence: 0.77124613

00:40:55.192 --> 00:40:57.730
these links open and open, Yep.

NOTE Confidence: 0.77124613

00:40:57.730 --> 00:40:59.880
And yet more missing allocator

NOTE Confidence: 0.77124613

00:40:59.880 --> 00:41:02.578
extended structures for our containers.

NOTE Confidence: 0.77124613

00:41:02.580 --> 00:41:04.169
It appears that P 1206 R 7

NOTE Confidence: 0.77124613

00:41:04.169 --> 00:41:05.400
doesn't mention the signature,

NOTE Confidence: 0.77124613

00:41:05.400 --> 00:41:07.381
but it's consistent with LG 2713 proposed

NOTE Confidence: 0.77124613

00:41:07.381 --> 00:41:08.643
resolution and our implementation

NOTE Confidence: 0.77124613

00:41:08.643 --> 00:41:10.797
where we added such constructors and

NOTE Confidence: 0.77124613

00:41:10.797 --> 00:41:12.539
deduction guides without any comments.

NOTE Confidence: 0.77124613

00:41:12.540 --> 00:41:13.908
No change requested for this PR,

NOTE Confidence: 0.77124613

00:41:13.910 --> 00:41:15.828
but I believe we should add a

NOTE Confidence: 0.77124613

00:41:15.828 --> 00:41:17.291
minimal contact the LWG and add

NOTE Confidence: 0.77124613

00:41:17.291 --> 00:41:19.344
a note to LBG 2713 the P.

NOTE Confidence: 0.77124613

00:41:19.344 --> 00:41:21.174
1206 or 7's new constructors

NOTE Confidence: 0.77124613

00:41:21.174 --> 00:41:22.689
are also affected.

NOTE Confidence: 0.77124613

00:41:22.690 --> 00:41:25.456
OK, let's do the right thing.

NOTE Confidence: 0.77124613

00:41:25.460 --> 00:41:27.917
OK, so let's make sure that each

NOTE Confidence: 0.77124613

00:41:27.917 --> 00:41:29.435
of these constructors otherwise

NOTE Confidence: 0.77124613

00:41:29.435 --> 00:41:31.390
has a reason for existing.

NOTE Confidence: 0.77124613

00:41:31.390 --> 00:41:33.166
If Dev people have containers ranges.

NOTE Confidence: 0.77124613

00:41:33.170 --> 00:41:36.178
So we have template on range in order

NOTE Confidence: 0.77124613

00:41:36.178 --> 00:41:39.250
to map from range T just a range.

NOTE Confidence: 0.77124613

00:41:39.250 --> 00:41:42.330
So let me switch over to highlight mode.

NOTE Confidence: 0.77124613

00:41:42.330 --> 00:41:44.946
We've got this one so far,

NOTE Confidence: 0.77124613

00:41:44.950 --> 00:41:46.598
the rest being defaulted.

NOTE Confidence: 0.77124613

00:41:46.598 --> 00:41:49.350
Uh, my base uses key compare Prime

NOTE Confidence: 0.77124613

00:41:49.350 --> 00:41:51.330
Pran allocator type print Pran.

NOTE Confidence: 0.77124613

00:41:51.330 --> 00:41:52.210
This insert engine checked.

NOTE Confidence: 0.77124613

00:41:52.210 --> 00:41:54.753
You begin, you end OK.

NOTE Confidence: 0.77124613

00:41:54.753 --> 00:41:58.959
Then, if we have an allocator.

NOTE Confidence: 0.77124613

00:41:58.960 --> 00:42:01.660
Here I want to scroll the right key compare.

NOTE Confidence: 0.77124613

00:42:01.660 --> 00:42:02.980
We need to use that L.

NOTE Confidence: 0.77124613

00:42:02.980 --> 00:42:04.926
OK, this is the one that does

NOTE Confidence: 0.77124613

00:42:04.926 --> 00:42:06.050
not exist anywhere yet.

NOTE Confidence: 0.77124613

00:42:06.050 --> 00:42:07.490
Uh, insert you beginning with.

NOTE Confidence: 0.77124613

00:42:07.490 --> 00:42:09.002
That's always going to be the

NOTE Confidence: 0.77124613

00:42:09.002 --> 00:42:11.320
same if you have buckets.

NOTE Confidence: 0.77124613

00:42:11.320 --> 00:42:13.895
That is this one here.

NOTE Confidence: 0.77124613

00:42:13.900 --> 00:42:15.224
Key compare allocator type.

NOTE Confidence: 0.77124613

00:42:15.224 --> 00:42:17.540
Because we don't have an allocator here,

NOTE Confidence: 0.77124613

00:42:17.540 --> 00:42:18.360
my base.

NOTE Confidence: 0.77124613

00:42:18.360 --> 00:42:18.770
Yeah,

NOTE Confidence: 0.77124613

00:42:18.770 --> 00:42:21.000
here's a good reason to audit everything

NOTE Confidence: 0.77124613

00:42:21.000 --> 00:42:23.020
to make sure we don't miss something.

NOTE Confidence: 0.77124613

00:42:23.020 --> 00:42:25.132
We need to rehash up to buckets and

NOTE Confidence: 0.77124613

00:42:25.132 --> 00:42:27.125
then insert a bunch of stuff, OK?

NOTE Confidence: 0.77124613

00:42:27.125 --> 00:42:29.795
If we have buckets and L,

NOTE Confidence: 0.77124613

00:42:29.800 --> 00:42:31.540
that's not this one.

NOTE Confidence: 0.77124613

00:42:31.540 --> 00:42:33.280
That's this one here.

NOTE Confidence: 0.77124613

00:42:33.280 --> 00:42:36.230
Size Tye followed by allocator.

NOTE Confidence: 0.77124613

00:42:36.230 --> 00:42:38.698
We can do that.

NOTE Confidence: 0.77124613

00:42:38.700 --> 00:42:41.746
My base key compare use that L, use the

NOTE Confidence: 0.77124613

00:42:41.746 --> 00:42:45.316
buckets and then insert OK if we have.

NOTE Confidence: 0.77124613

00:42:45.316 --> 00:42:47.511
Buckets and hasher that's up

NOTE Confidence: 0.77124613

00:42:47.511 --> 00:42:50.247
here buckets and then hasher.

NOTE Confidence: 0.77124613

00:42:50.250 --> 00:42:54.698
Uh, my base, so you got a hasher?

NOTE Confidence: 0.77124613

00:42:54.700 --> 00:42:57.409
Construct a key. Compare from hash Arg.

NOTE Confidence: 0.77124613

00:42:57.410 --> 00:42:59.114
And then we don't have any

NOTE Confidence: 0.77124613

00:42:59.114 --> 00:43:00.570
allocator allocator type on pren.

NOTE Confidence: 0.77124613

00:43:00.570 --> 00:43:01.260
Use the buckets,

NOTE Confidence: 0.77124613

00:43:01.260 --> 00:43:02.410
so we're using all arguments.

NOTE Confidence: 0.77124613

00:43:02.410 --> 00:43:04.246
OK, good if you have buckets,

NOTE Confidence: 0.77124613

00:43:04.250 --> 00:43:07.980
hasher, and an allocator Al.

NOTE Confidence: 0.77124613

00:43:07.980 --> 00:43:09.080
So that's not this one.

NOTE Confidence: 0.77124613

00:43:09.080 --> 00:43:11.140
There's no key equal.

NOTE Confidence: 0.77124613

00:43:11.140 --> 00:43:13.608
Yeah, it's this one.

NOTE Confidence: 0.77124613

00:43:13.610 --> 00:43:17.640
It's, uh, buckets hasher allocator.

NOTE Confidence: 0.77124613

00:43:17.640 --> 00:43:19.440
Size type hasher allocator.

NOTE Confidence: 0.77124613

00:43:19.440 --> 00:43:23.498
Yep, so that one. Umm, use the hash Arg.

NOTE Confidence: 0.77124613

00:43:23.500 --> 00:43:25.396
Use the allocator. Use the buckets.

NOTE Confidence: 0.77124613

00:43:25.400 --> 00:43:26.852
Insert OK, that's good.

NOTE Confidence: 0.77124613

00:43:26.852 --> 00:43:28.667
Let's go back up here.

NOTE Confidence: 0.77124613

00:43:28.670 --> 00:43:31.510
If you have buckets, hash your key EQ.

NOTE Confidence: 0.77124613

00:43:31.510 --> 00:43:34.709
That's this. Then let's use the hash.

NOTE Confidence: 0.77124613

00:43:34.710 --> 00:43:35.882
Argue the key eqr.

NOTE Confidence: 0.77124613

00:43:35.882 --> 00:43:37.793
We don't have an allocator, though.

NOTE Confidence: 0.77124613

00:43:37.793 --> 00:43:38.679
Rehash buckets,

NOTE Confidence: 0.77124613

00:43:38.679 --> 00:43:40.008
insert and then.

NOTE Confidence: 0.77124613

00:43:40.010 --> 00:43:41.078
If you have everything.

NOTE Confidence: 0.503967194166667

00:43:43.160 --> 00:43:45.400
Buckets hasher key equal

NOTE Confidence: 0.503967194166667

00:43:45.400 --> 00:43:46.900
and allocator buckets.

NOTE Confidence: 0.503967194166667

00:43:46.900 --> 00:43:48.420
Hasher Key Q allocator

NOTE Confidence: 0.503967194166667

00:43:48.420 --> 00:43:51.536
use all of them. Hash arq.

NOTE Confidence: 0.503967194166667

00:43:51.536 --> 00:43:54.728
Argall buckets insert good.

NOTE Confidence: 0.503967194166667

00:43:54.730 --> 00:43:56.661
OK, that was a lot, uh,

NOTE Confidence: 0.503967194166667

00:43:56.661 --> 00:43:59.366
let's see now guides OK?

NOTE Confidence: 0.79326202125

00:44:01.640 --> 00:44:03.176
Guides can be simpler because we

NOTE Confidence: 0.79326202125

00:44:03.176 --> 00:44:04.509
actually don't care about the

NOTE Confidence: 0.79326202125

00:44:04.509 --> 00:44:05.799
values being cast as arguments.

NOTE Confidence: 0.79326202125

00:44:05.800 --> 00:44:09.022
Uh, let me go ahead and expand this now.

NOTE Confidence: 0.79326202125

00:44:09.030 --> 00:44:10.422
FFC flip containers ranges,

NOTE Confidence: 0.79326202125

00:44:10.422 --> 00:44:12.162
so we're templated on range

NOTE Confidence: 0.79326202125

00:44:12.162 --> 00:44:13.770
of support range range.

NOTE Confidence: 0.79326202125

00:44:13.770 --> 00:44:15.306
Here we can have some default hash here.

NOTE Confidence: 0.79326202125

00:44:15.310 --> 00:44:16.414
If you don't have 1 hash

NOTE Confidence: 0.79326202125

00:44:16.414 --> 00:44:17.370
of range key type key,

NOTE Confidence: 0.79326202125

00:44:17.370 --> 00:44:21.554
Q is equal to range key type Alec

NOTE Confidence: 0.79326202125

00:44:21.554 --> 00:44:25.217
is allocator range to Alec type OK.

NOTE Confidence: 0.79326202125

00:44:25.220 --> 00:44:26.936
It's interesting range to Alec type.

NOTE Confidence: 0.905153208571429

00:44:33.290 --> 00:44:34.214
I want to see what this is,

NOTE Confidence: 0.905153208571429

00:44:34.220 --> 00:44:36.116
but I do remember we used it elsewhere

NOTE Confidence: 0.905153208571429

00:44:36.116 --> 00:44:37.694
trying to think like why would

NOTE Confidence: 0.905153208571429

00:44:37.694 --> 00:44:39.266
the Alec type be different than?

NOTE Confidence: 0.905153208571429

00:44:39.270 --> 00:44:41.426
Oh, that's right because it's a pair.

NOTE Confidence: 0.905153208571429

00:44:41.430 --> 00:44:43.670
This will be OK. This will be V.

NOTE Confidence: 0.905153208571429

00:44:43.670 --> 00:44:47.407
This needs to be pair of constant K&amp;amp;V so this

NOTE Confidence: 0.905153208571429

00:44:47.407 --> 00:44:50.190
alias is needed to form that obnoxious type.

NOTE Confidence: 0.905153208571429

00:44:50.190 --> 00:44:52.310
OK, so that's good.

NOTE Confidence: 0.905153208571429

00:44:52.310 --> 00:44:55.638
Enable if hash has got to be a hasher.

NOTE Confidence: 0.905153208571429

00:44:55.640 --> 00:44:58.488
Because we have a specific concept for that

NOTE Confidence: 0.905153208571429

00:44:58.490 --> 00:45:00.250
key, Q had better not be an allocator.

NOTE Confidence: 0.905153208571429

00:45:00.250 --> 00:45:03.306
Alex should be an allocator that looks good,

NOTE Confidence: 0.905153208571429

00:45:03.310 --> 00:45:05.644
so range. This guide size type

NOTE Confidence: 0.905153208571429

00:45:05.644 --> 00:45:07.660
prevents deduction in certain cases.

NOTE Confidence: 0.905153208571429

00:45:07.660 --> 00:45:10.540
We need that.

NOTE Confidence: 0.905153208571429

00:45:10.540 --> 00:45:13.894
Hashire Q Alec OK so this

NOTE Confidence: 0.905153208571429

00:45:13.894 --> 00:45:16.480
is the fully defaulted 1.

NOTE Confidence: 0.905153208571429

00:45:16.480 --> 00:45:20.045
The deuce unordered map from range key

NOTE Confidence: 0.905153208571429

00:45:20.045 --> 00:45:22.359
type range map type hasher key to Alex.

NOTE Confidence: 0.905153208571429

00:45:22.360 --> 00:45:23.800
We've got all of them.

NOTE Confidence: 0.905153208571429

00:45:23.800 --> 00:45:25.928
If we only have size type for

NOTE Confidence: 0.905153208571429

00:45:25.928 --> 00:45:27.240
buckets and then Alec.

NOTE Confidence: 0.905153208571429

00:45:27.240 --> 00:45:29.459
Then we have an unordered map of

NOTE Confidence: 0.905153208571429

00:45:29.459 --> 00:45:32.391
key diet map Tye from range hash of

NOTE Confidence: 0.905153208571429

00:45:32.391 --> 00:45:34.728
keytype equal to keedie because these

NOTE Confidence: 0.905153208571429

00:45:34.728 --> 00:45:37.255
are all defaulted and then Alec OK.

NOTE Confidence: 0.905153208571429

00:45:37.260 --> 00:45:38.736
If you have range and Alec,

NOTE Confidence: 0.905153208571429

00:45:38.740 --> 00:45:40.875
we deduce the exact same thing because

NOTE Confidence: 0.905153208571429

00:45:40.875 --> 00:45:42.889
the buckets don't influence anything.

NOTE Confidence: 0.905153208571429

00:45:42.890 --> 00:45:44.810
Yep. That's all good.

NOTE Confidence: 0.905153208571429

00:45:44.810 --> 00:45:47.840
And then finally, if you have.

NOTE Confidence: 0.905153208571429

00:45:47.840 --> 00:45:49.960
And Hasher and Alec.

NOTE Confidence: 0.905153208571429

00:45:49.960 --> 00:45:52.150
But no key EQ in there.

NOTE Confidence: 0.905153208571429

00:45:52.150 --> 00:45:55.489
Then keidai map type, use the HASHER,

NOTE Confidence: 0.905153208571429

00:45:55.490 --> 00:45:56.852
but provide equal to range key

NOTE Confidence: 0.905153208571429

00:45:56.852 --> 00:45:58.329
type and then the given Alec.

NOTE Confidence: 0.905153208571429

00:45:58.330 --> 00:45:59.790
OK, that looks good.

NOTE Confidence: 0.905153208571429

00:45:59.790 --> 00:46:00.885
Unordered multi map.

NOTE Confidence: 0.905153208571429

00:46:00.890 --> 00:46:03.023
OK so this is going to be highly repetitive.

NOTE Confidence: 0.905153208571429

00:46:03.030 --> 00:46:04.906
Again I am not too concerned about

NOTE Confidence: 0.905153208571429

00:46:04.906 --> 00:46:06.888
copy paste errors here because it's

NOTE Confidence: 0.905153208571429

00:46:06.888 --> 00:46:08.758
especially between the multi containers.

NOTE Confidence: 0.905153208571429

00:46:08.760 --> 00:46:10.144
It really is just a search and replace.

NOTE Confidence: 0.905153208571429

00:46:10.150 --> 00:46:12.900
There's very little go wrong so I

NOTE Confidence: 0.905153208571429

00:46:12.900 --> 00:46:15.570
will give this a cursory review.

NOTE Confidence: 0.905153208571429

00:46:15.570 --> 00:46:17.070
We're always saying multi mapped.

NOTE Confidence: 0.905153208571429

00:46:17.070 --> 00:46:18.127
Most I want to make sure we

NOTE Confidence: 0.905153208571429

00:46:18.127 --> 00:46:18.890
don't forget the buckets,

NOTE Confidence: 0.905153208571429

00:46:18.890 --> 00:46:20.162
so there's because that's

NOTE Confidence: 0.905153208571429

00:46:20.162 --> 00:46:22.460
like the one line I see that.

NOTE Confidence: 0.905153208571429

00:46:22.460 --> 00:46:24.935
We could forget and it would be very subtle.

NOTE Confidence: 0.905153208571429

00:46:24.940 --> 00:46:28.140
Uh, we're using the buckets when it's there.

NOTE Confidence: 0.905153208571429

00:46:28.140 --> 00:46:31.656
That's looking good. Yeah, that's good.

NOTE Confidence: 0.905153208571429

00:46:31.656 --> 00:46:33.566
And then the guides again.

NOTE Confidence: 0.905153208571429

00:46:33.570 --> 00:46:37.385
We should have those four guides before.

NOTE Confidence: 0.905153208571429

00:46:37.390 --> 00:46:40.290
Yep, 4 guides before.

NOTE Confidence: 0.905153208571429

00:46:40.290 --> 00:46:44.130
OK, so each of these unordered multi map.

NOTE Confidence: 0.905153208571429

00:46:44.130 --> 00:46:44.387
Yeah,

NOTE Confidence: 0.905153208571429

00:46:44.387 --> 00:46:46.700
of course we have to admit the same type.

NOTE Confidence: 0.905153208571429

00:46:46.700 --> 00:46:49.676
And. This really should just be a search.

NOTE Confidence: 0.905153208571429

00:46:49.680 --> 00:46:52.382
Replace key dot map type hash your

NOTE Confidence: 0.905153208571429

00:46:52.382 --> 00:46:55.118
key because we have them all here,

NOTE Confidence: 0.905153208571429

00:46:55.120 --> 00:46:57.031
we need to synthesize hash of range

NOTE Confidence: 0.905153208571429

00:46:57.031 --> 00:46:58.898
key type equal to range key type.

NOTE Confidence: 0.905153208571429

00:46:58.900 --> 00:47:00.868
But we do have the Alec.

NOTE Confidence: 0.905153208571429

00:47:00.870 --> 00:47:04.002
Uh, here hash Range key 2 range key dibalik.

NOTE Confidence: 0.905153208571429

00:47:04.010 --> 00:47:05.270
OK, because we don't have anything.

NOTE Confidence: 0.905153208571429

00:47:05.270 --> 00:47:07.088
If we have the hasher we can use it,

NOTE Confidence: 0.905153208571429

00:47:07.090 --> 00:47:08.656
but we still need equal to.

NOTE Confidence: 0.905153208571429

00:47:08.660 --> 00:47:09.470
We can use the Alec.

NOTE Confidence: 0.905153208571429

00:47:09.470 --> 00:47:11.528
OK, that's an order of map.

NOTE Confidence: 0.905153208571429

00:47:11.530 --> 00:47:13.474
Let's take a look at unordered

NOTE Confidence: 0.905153208571429

00:47:13.474 --> 00:47:14.770
set under 52 lines.

NOTE Confidence: 0.905153208571429

00:47:14.770 --> 00:47:15.111
Again,

NOTE Confidence: 0.905153208571429

00:47:15.111 --> 00:47:17.839
we can speed through this one fairly quickly.

NOTE Confidence: 0.905153208571429

00:47:17.840 --> 00:47:18.700
This one's a little bit

NOTE Confidence: 0.905153208571429

00:47:18.700 --> 00:47:19.388
different than the map,

NOTE Confidence: 0.905153208571429

00:47:19.390 --> 00:47:21.730
but not too different.

NOTE Confidence: 0.905153208571429

00:47:21.730 --> 00:47:22.650
So if we have nothing,

NOTE Confidence: 0.905153208571429

00:47:22.650 --> 00:47:24.000
use key compare allocator type.

NOTE Confidence: 0.741971994

00:47:24.000 --> 00:47:25.252
If you have the L, use it.

NOTE Confidence: 0.741971994

00:47:25.252 --> 00:47:27.009
If you have the buckets rehash buckets.

NOTE Confidence: 0.741971994

00:47:27.010 --> 00:47:30.990
If you have buckets, use it and all use it.

NOTE Confidence: 0.741971994

00:47:30.990 --> 00:47:33.700
When I Scroll down I'll like to select a bit

NOTE Confidence: 0.741971994

00:47:33.769 --> 00:47:36.235
and then that way I don't lose my place.

NOTE Confidence: 0.741971994

00:47:36.240 --> 00:47:39.304
So, buckets rehashed hash

NOTE Confidence: 0.741971994

00:47:39.304 --> 00:47:43.134
argues it buckets hashar al.

NOTE Confidence: 0.741971994

00:47:43.140 --> 00:47:50.320
K buckets hashar key QR, but no L and then

NOTE Confidence: 0.741971994

00:47:50.320 --> 00:47:54.590
finally buckets hashar key QR now OK.

NOTE Confidence: 0.741971994

00:47:54.590 --> 00:47:57.766
And of guides we do expect 4 guides,

NOTE Confidence: 0.741971994

00:47:57.770 --> 00:48:00.934
but now we don't need all that.

NOTE Confidence: 0.741971994

00:48:00.940 --> 00:48:04.024
Uh. Type 4 allocator.

NOTE Confidence: 0.741971994

00:48:04.024 --> 00:48:06.460
So if we have all the types,

NOTE Confidence: 0.741971994

00:48:06.460 --> 00:48:09.127
we can just reduce an ordered set.

NOTE Confidence: 0.741971994

00:48:09.130 --> 00:48:11.590
If you only have the allocator,

NOTE Confidence: 0.741971994

00:48:11.590 --> 00:48:13.086
then we'll use it,

NOTE Confidence: 0.741971994

00:48:13.086 --> 00:48:15.998
but we'll synthesize range of value T hash

NOTE Confidence: 0.741971994

00:48:15.998 --> 00:48:18.660
range value T equal to range value T OK.

NOTE Confidence: 0.741971994

00:48:18.660 --> 00:48:20.858
If you just have the allec again

NOTE Confidence: 0.741971994

00:48:20.858 --> 00:48:22.600
exact same deduction. And then.

NOTE Confidence: 0.741971994

00:48:22.600 --> 00:48:25.862
Here, if you have the hasher, use it,

NOTE Confidence: 0.741971994

00:48:25.862 --> 00:48:28.017
but otherwise synthesize equal to.

NOTE Confidence: 0.741971994

00:48:28.020 --> 00:48:29.142
OK, that's good,

NOTE Confidence: 0.741971994

00:48:29.142 --> 00:48:31.386
and allocator defaults to allocator ranges.

NOTE Confidence: 0.741971994

00:48:31.390 --> 00:48:33.404
Range of value T. OK, that's good.

NOTE Confidence: 0.741971994

00:48:33.404 --> 00:48:36.450
It really is, it is.

NOTE Confidence: 0.741971994

00:48:36.450 --> 00:48:37.920
Uh, less than awesome that there's

NOTE Confidence: 0.741971994

00:48:37.920 --> 00:48:40.207
no way to say I would like him to

NOTE Confidence: 0.741971994

00:48:40.207 --> 00:48:41.847
span out deduction guides for any

NOTE Confidence: 0.741971994

00:48:41.847 --> 00:48:43.507
combination of parameters here and

NOTE Confidence: 0.741971994

00:48:43.507 --> 00:48:45.362
including like defaults in the middle.

NOTE Confidence: 0.741971994

00:48:45.362 --> 00:48:46.667
It's just the core language

NOTE Confidence: 0.741971994

00:48:46.667 --> 00:48:47.450
doesn't have that,

NOTE Confidence: 0.741971994

00:48:47.450 --> 00:48:49.105
and honestly this cursor rarely

NOTE Confidence: 0.741971994

00:48:49.105 --> 00:48:51.080
the only place in the STL.

NOTE Confidence: 0.741971994

00:48:51.080 --> 00:48:53.485
This weird like super spammy

NOTE Confidence: 0.741971994

00:48:53.485 --> 00:48:56.042
set of overloads happens is in

NOTE Confidence: 0.741971994

00:48:56.042 --> 00:48:56.990
the unordered containers.

NOTE Confidence: 0.741971994

00:48:56.990 --> 00:48:58.383
This is by far the worst of

NOTE Confidence: 0.741971994

00:48:58.383 --> 00:48:59.723
them because they want to make

NOTE Confidence: 0.741971994

00:48:59.723 --> 00:49:00.655
so many things optional.

NOTE Confidence: 0.775539923684211

00:49:02.690 --> 00:49:04.944
OK, and then on order multi again

NOTE Confidence: 0.775539923684211

00:49:04.944 --> 00:49:07.032
very similar not to worry about

NOTE Confidence: 0.775539923684211

00:49:07.032 --> 00:49:09.138
copy paste errors so nothing here.

NOTE Confidence: 0.775539923684211

00:49:09.140 --> 00:49:12.110
Use the ASL. Use the buckets.

NOTE Confidence: 0.775539923684211

00:49:12.110 --> 00:49:14.366
Use the buckets, use the L,

NOTE Confidence: 0.775539923684211

00:49:14.370 --> 00:49:17.830
the buckets the hash Arg.

NOTE Confidence: 0.775539923684211

00:49:17.830 --> 00:49:21.046
Buckets the hash argue the L.

NOTE Confidence: 0.775539923684211

00:49:21.050 --> 00:49:25.570
Buckheads hashar key QR binol.

NOTE Confidence: 0.775539923684211

00:49:25.570 --> 00:49:31.317
Buckets Hashar key QRL. OK that's good.

NOTE Confidence: 0.775539923684211

00:49:31.320 --> 00:49:33.060
We've got induction guides again,

NOTE Confidence: 0.775539923684211

00:49:33.060 --> 00:49:35.679
four of them.

NOTE Confidence: 0.775539923684211

00:49:35.680 --> 00:49:41.070
It's always a murdered multiset. Yep.

NOTE Confidence: 0.775539923684211

00:49:41.070 --> 00:49:45.156
And all the types it's emitting are the same.

NOTE Confidence: 0.775539923684211

00:49:45.160 --> 00:49:47.500
As what we would expect.

NOTE Confidence: 0.775539923684211

00:49:47.500 --> 00:49:50.545
OK, that looks good. OK,

NOTE Confidence: 0.775539923684211

00:49:50.545 --> 00:49:53.512
so that's all the node based containers. Uh,

NOTE Confidence: 0.775539923684211

00:49:53.512 --> 00:49:55.960
let's look at deck which is quasi node base.

NOTE Confidence: 0.775539923684211

00:49:55.960 --> 00:49:58.400
That's a lot of changes.

NOTE Confidence: 0.775539923684211

00:49:58.400 --> 00:50:00.318
And well, 234. It's not that much.

NOTE Confidence: 0.775539923684211

00:50:00.320 --> 00:50:02.395
Yeah, it's more vector like

NOTE Confidence: 0.775539923684211

00:50:02.395 --> 00:50:04.470
because we we need some.

NOTE Confidence: 0.775539923684211

00:50:04.470 --> 00:50:07.830
Extra code here. OK so.

NOTE Confidence: 0.775539923684211

00:50:07.830 --> 00:50:08.922
Priority, ignoring white space.

NOTE Confidence: 0.775539923684211

00:50:08.922 --> 00:50:10.287
I'm already ignoring white space.

NOTE Confidence: 0.775539923684211

00:50:10.290 --> 00:50:13.587
This is as good as it gets.

NOTE Confidence: 0.775539923684211

00:50:13.590 --> 00:50:14.960
OK, this diff looks horrible,

NOTE Confidence: 0.775539923684211

00:50:14.960 --> 00:50:18.008
which makes me want to switch to before

NOTE Confidence: 0.775539923684211

00:50:18.008 --> 00:50:20.648
and after or side-by-side really.

NOTE Confidence: 0.775539923684211

00:50:20.650 --> 00:50:21.766
Yeah, let's do that.

NOTE Confidence: 0.775539923684211

00:50:21.766 --> 00:50:22.882
I'm reading this interleave

NOTE Confidence: 0.775539923684211

00:50:22.882 --> 00:50:23.990
code is obnoxious.

NOTE Confidence: 0.775539923684211

00:50:23.990 --> 00:50:25.348
OK, so let's switch over to deck.

NOTE Confidence: 0.775539923684211

00:50:25.350 --> 00:50:26.350
What is this comment here?

NOTE Confidence: 0.775539923684211

00:50:26.350 --> 00:50:26.690
Ohh,

NOTE Confidence: 0.775539923684211

00:50:26.690 --> 00:50:28.730
this is Misco saying refactoring the

NOTE Confidence: 0.775539923684211

00:50:28.730 --> 00:50:30.727
internal helper could be a separate PR.

NOTE Confidence: 0.775539923684211

00:50:30.730 --> 00:50:33.350
Yeah, can't argue with that.

NOTE Confidence: 0.775539923684211

00:50:33.350 --> 00:50:34.942
I wouldn't demand it,

NOTE Confidence: 0.775539923684211

00:50:34.942 --> 00:50:38.320
but it could be separate.

NOTE Confidence: 0.775539923684211

00:50:38.320 --> 00:50:39.541
OK, so uhm.

NOTE Confidence: 0.775539923684211

00:50:39.541 --> 00:50:41.169
I'm actually I'm tempted

NOTE Confidence: 0.775539923684211

00:50:41.169 --> 00:50:43.388
to view this in VS code,

NOTE Confidence: 0.775539923684211

00:50:43.390 --> 00:50:44.494
but I think I can view this on

NOTE Confidence: 0.775539923684211

00:50:44.494 --> 00:50:45.457
the right side of the screen.

NOTE Confidence: 0.775539923684211

00:50:45.460 --> 00:50:46.678
My screen is wide enough here.

NOTE Confidence: 0.735817982

00:50:50.880 --> 00:50:53.130
OK. So we're in deck.

NOTE Confidence: 0.735817982

00:50:53.130 --> 00:50:55.050
My least favorite container.

NOTE Confidence: 0.735817982

00:50:55.050 --> 00:50:57.618
If Dev, CPP, Lib containers ranges,

NOTE Confidence: 0.735817982

00:50:57.618 --> 00:50:59.628
that is the correct spelling.

NOTE Confidence: 0.735817982

00:50:59.630 --> 00:51:01.610
We have our new tag constructors

NOTE Confidence: 0.735817982

00:51:01.610 --> 00:51:02.930
container compatible range as

NOTE Confidence: 0.735817982

00:51:02.983 --> 00:51:04.515
the constraint construct from

NOTE Confidence: 0.735817982

00:51:04.515 --> 00:51:06.430
either range reference range and

NOTE Confidence: 0.735817982

00:51:06.430 --> 00:51:08.039
sometimes it comes out or found.

NOTE Confidence: 0.735817982

00:51:08.040 --> 00:51:10.098
My pair, either nothing or L,

NOTE Confidence: 0.735817982

00:51:10.100 --> 00:51:11.636
otherwise they do the same thing.

NOTE Confidence: 0.735817982

00:51:11.640 --> 00:51:14.090
Construct an AL proxy tie.

NOTE Confidence: 0.735817982

00:51:14.090 --> 00:51:15.746
And this is for leak protection.

NOTE Confidence: 0.735817982

00:51:15.750 --> 00:51:19.250
As usual container proxy putter,

NOTE Confidence: 0.735817982

00:51:19.250 --> 00:51:20.940
so we're going to install

NOTE Confidence: 0.735817982

00:51:20.940 --> 00:51:23.370
this a proxy for our iterator.

NOTE Confidence: 0.735817982

00:51:23.370 --> 00:51:25.260
Debugging into our get data.

NOTE Confidence: 0.790568341875

00:51:27.270 --> 00:51:28.053
Then construct from.

NOTE Confidence: 0.790568341875

00:51:28.053 --> 00:51:29.880
You begin you end Roxy release and

NOTE Confidence: 0.790568341875

00:51:29.927 --> 00:51:31.727
which will actually make it effective.

NOTE Confidence: 0.790568341875

00:51:31.730 --> 00:51:33.023
OK, that's good.

NOTE Confidence: 0.790568341875

00:51:33.023 --> 00:51:34.747
Here's the refactoring where

NOTE Confidence: 0.790568341875

00:51:34.747 --> 00:51:36.670
we're generalizing this Sentinel.

NOTE Confidence: 0.790568341875

00:51:36.670 --> 00:51:38.310
It could take conventional and

NOTE Confidence: 0.790568341875

00:51:38.310 --> 00:51:39.622
instead of saying initialize

NOTE Confidence: 0.790568341875

00:51:39.622 --> 00:51:41.110
first class input iterators,

NOTE Confidence: 0.790568341875

00:51:41.110 --> 00:51:42.562
the comment becomes initialized

NOTE Confidence: 0.790568341875

00:51:42.562 --> 00:51:44.014
from input range first.

NOTE Confidence: 0.790568341875

00:51:44.020 --> 00:51:44.941
Last. That's reasonable.

NOTE Confidence: 0.790568341875

00:51:44.941 --> 00:51:47.610
We're going to call and place back internal.

NOTE Confidence: 0.790568341875

00:51:47.610 --> 00:51:50.886
OK, so now we're adding prepend range.

NOTE Confidence: 0.790568341875

00:51:50.890 --> 00:51:52.178
This is, we got to make sure

NOTE Confidence: 0.790568341875

00:51:52.178 --> 00:51:53.419
we're in right access control,

NOTE Confidence: 0.790568341875

00:51:53.420 --> 00:51:55.550
which I'm assuming we are.

NOTE Confidence: 0.790568341875

00:51:55.550 --> 00:51:57.797
We are indeed public after push front.

NOTE Confidence: 0.790568341875

00:51:57.800 --> 00:52:00.269
Let's prepend range.

NOTE Confidence: 0.790568341875

00:52:00.270 --> 00:52:02.030
If Dempsey public containers ranges,

NOTE Confidence: 0.790568341875

00:52:02.030 --> 00:52:04.094
there's the end of the guard

NOTE Confidence: 0.790568341875

00:52:04.094 --> 00:52:05.470
template container compatible range.

NOTE Confidence: 0.790568341875

00:52:05.470 --> 00:52:07.248
Prepend range takes a Range Rover range.

NOTE Confidence: 0.790568341875

00:52:07.250 --> 00:52:08.895
OK, so we're going to do here.

NOTE Confidence: 0.758521158333333

00:52:11.270 --> 00:52:14.288
I could compare against something existing.

NOTE Confidence: 0.758521158333333

00:52:14.290 --> 00:52:16.887
This would look most like the insert,

NOTE Confidence: 0.758521158333333

00:52:16.890 --> 00:52:20.306
but it is special case to exactly prepending.

NOTE Confidence: 0.758521158333333

00:52:20.310 --> 00:52:22.188
I'll just review this because I'm

NOTE Confidence: 0.758521158333333

00:52:22.188 --> 00:52:24.090
familiar enough with how deck works.

NOTE Confidence: 0.758521158333333

00:52:24.090 --> 00:52:26.687
I think I'm familiar enough we'll see.

NOTE Confidence: 0.758521158333333

00:52:26.690 --> 00:52:28.104
So first thing we do is orphan.

NOTE Confidence: 0.758521158333333

00:52:28.110 --> 00:52:30.210
All we are inserting a bunch of

NOTE Confidence: 0.758521158333333

00:52:30.210 --> 00:52:32.338
stuff to the beginning of the.

NOTE Confidence: 0.758521158333333

00:52:32.340 --> 00:52:36.730
Deck deck has UM, interesting

NOTE Confidence: 0.758521158333333

00:52:36.730 --> 00:52:40.242
requirements or specification that.

NOTE Confidence: 0.758521158333333

00:52:40.250 --> 00:52:41.978
Inserting things at the beginning or

NOTE Confidence: 0.758521158333333

00:52:41.978 --> 00:52:44.727
the end of the deck does not invalidate

NOTE Confidence: 0.758521158333333

00:52:44.727 --> 00:52:46.642
pointers and references to elements,

NOTE Confidence: 0.758521158333333

00:52:46.650 --> 00:52:49.950
but iterators can be fully invalidated.

NOTE Confidence: 0.758521158333333

00:52:49.950 --> 00:52:53.082
This is because Dex elements are

NOTE Confidence: 0.758521158333333

00:52:53.082 --> 00:52:55.790
essentially allocated in contiguous blocks,

NOTE Confidence: 0.758521158333333

00:52:55.790 --> 00:52:57.446
but the blocks themselves are separate.

NOTE Confidence: 0.758521158333333

00:52:57.450 --> 00:52:58.376
They're chunked,

NOTE Confidence: 0.758521158333333

00:52:58.376 --> 00:53:01.154
and then the iterators can involve

NOTE Confidence: 0.758521158333333

00:53:01.154 --> 00:53:03.189
an intermediate data structure.

NOTE Confidence: 0.758521158333333

00:53:03.190 --> 00:53:04.886
In our case, what we call a map,

NOTE Confidence: 0.758521158333333

00:53:04.890 --> 00:53:06.354
which is really just a vector

NOTE Confidence: 0.758521158333333

00:53:06.354 --> 00:53:07.086
of block pointers.

NOTE Confidence: 0.758521158333333

00:53:07.090 --> 00:53:08.510
That intermediate data structure

NOTE Confidence: 0.758521158333333

00:53:08.510 --> 00:53:10.285
can be reallocated and that.

NOTE Confidence: 0.758521158333333

00:53:10.290 --> 00:53:12.426
Even invalidate iterator so that means

NOTE Confidence: 0.758521158333333

00:53:12.426 --> 00:53:15.199
deck along with the unordered containers.

NOTE Confidence: 0.758521158333333

00:53:15.200 --> 00:53:17.984
The only STL containers that can

NOTE Confidence: 0.758521158333333

00:53:17.984 --> 00:53:19.840
invalidate iterators without invalidating

NOTE Confidence: 0.758521158333333

00:53:19.911 --> 00:53:22.359
pointers and references simultaneously.

NOTE Confidence: 0.758521158333333

00:53:22.360 --> 00:53:25.000
So orphaning all is correct here,

NOTE Confidence: 0.758521158333333

00:53:25.000 --> 00:53:28.388
even though we're only prepending and the

NOTE Confidence: 0.758521158333333

00:53:28.388 --> 00:53:31.230
elements or otherwise remaining stable.

NOTE Confidence: 0.758521158333333

00:53:31.230 --> 00:53:31.843
OK,

NOTE Confidence: 0.758521158333333

00:53:31.843 --> 00:53:36.747
so next constant old size is my size.

NOTE Confidence: 0.758521158333333

00:53:36.750 --> 00:53:40.124
Let's have a restore old size guard.

NOTE Confidence: 0.758521158333333

00:53:40.130 --> 00:53:43.434
And we will pop from the front.

NOTE Confidence: 0.758521158333333

00:53:43.440 --> 00:53:45.239
This is some new machinery we added.

NOTE Confidence: 0.758521158333333

00:53:45.240 --> 00:53:47.970
I think this was Alex cutaneous

NOTE Confidence: 0.758521158333333

00:53:47.970 --> 00:53:49.375
PR to remove Sphene.

NOTE Confidence: 0.758521158333333

00:53:49.375 --> 00:53:51.580
I can actually let's bring that up

NOTE Confidence: 0.758521158333333

00:53:51.640 --> 00:53:53.758
because that was an interesting PR.

NOTE Confidence: 0.65279718

00:53:56.490 --> 00:53:59.691
Let's look at STL Inc deck.

NOTE Confidence: 0.65279718

00:53:59.691 --> 00:54:01.596
Deck doesn't change that often,

NOTE Confidence: 0.65279718

00:54:01.600 --> 00:54:02.758
so I'm pretty sure I'll be

NOTE Confidence: 0.65279718

00:54:02.758 --> 00:54:03.950
able to find it quickly.

NOTE Confidence: 0.65279718

00:54:03.950 --> 00:54:05.874
There's deck. OK, history,

NOTE Confidence: 0.65279718

00:54:05.874 --> 00:54:08.760
it's definitely not my little operator.

NOTE Confidence: 0.65279718

00:54:08.760 --> 00:54:09.954
Friendship is magic.

NOTE Confidence: 0.65279718

00:54:09.954 --> 00:54:13.300
Here we go PR 2308.

NOTE Confidence: 0.65279718

00:54:13.300 --> 00:54:14.998
Deck reraised to scope guard indeed.

NOTE Confidence: 0.65279718

00:54:15.000 --> 00:54:18.430
From our contributor Alex Butenyl V UH,

NOTE Confidence: 0.65279718

00:54:18.430 --> 00:54:21.766
which replaced. We used to have.

NOTE Confidence: 0.65279718

00:54:21.770 --> 00:54:23.816
Uh, the old logic tribe again,

NOTE Confidence: 0.65279718

00:54:23.820 --> 00:54:24.990
do a bunch of emplacement

NOTE Confidence: 0.65279718

00:54:24.990 --> 00:54:25.926
if something bad happened,

NOTE Confidence: 0.65279718

00:54:25.930 --> 00:54:27.475
pop a bunch of stuff, reraise,

NOTE Confidence: 0.65279718

00:54:27.475 --> 00:54:30.145
meaning, throw, and then catch end,

NOTE Confidence: 0.65279718

00:54:30.150 --> 00:54:32.390
and now we have RAII,

NOTE Confidence: 0.65279718

00:54:32.390 --> 00:54:34.120
which makes the code a

NOTE Confidence: 0.65279718

00:54:34.120 --> 00:54:35.504
lot clearer and better.

NOTE Confidence: 0.65279718

00:54:35.510 --> 00:54:38.490
When exceptions are thrown.

NOTE Confidence: 0.65279718

00:54:38.490 --> 00:54:40.118
And justice to save.

NOTE Confidence: 0.65279718

00:54:40.118 --> 00:54:41.746
And it's got a.

NOTE Confidence: 0.65279718

00:54:41.750 --> 00:54:43.007
You know, I'm,

NOTE Confidence: 0.65279718

00:54:43.007 --> 00:54:46.629
that controls how we pop if things go bad.

NOTE Confidence: 0.65279718

00:54:46.630 --> 00:54:47.710
So that's what that is.

NOTE Confidence: 0.701149783333333

00:54:50.510 --> 00:54:53.222
So if an exception is thrown, we want to pop.

NOTE Confidence: 0.701149783333333

00:54:53.222 --> 00:54:55.860
From the front because we are prepending,

NOTE Confidence: 0.701149783333333

00:54:55.860 --> 00:54:57.731
we're going to call it guard. Uh,

NOTE Confidence: 0.701149783333333

00:54:57.731 --> 00:55:00.118
initialize with this and our original size.

NOTE Confidence: 0.701149783333333

00:55:00.120 --> 00:55:02.127
That tells us how much we need to pop,

NOTE Confidence: 0.701149783333333

00:55:02.130 --> 00:55:04.338
so we don't need to otherwise

NOTE Confidence: 0.701149783333333

00:55:04.338 --> 00:55:05.810
record any other information.

NOTE Confidence: 0.701149783333333

00:55:05.810 --> 00:55:08.906
And then we have two possibilities.

NOTE Confidence: 0.701149783333333

00:55:08.910 --> 00:55:11.748
If we have a bidirectional range,

NOTE Confidence: 0.701149783333333

00:55:11.750 --> 00:55:14.725
then because we want to take our

NOTE Confidence: 0.701149783333333

00:55:14.725 --> 00:55:16.788
range and we want to prepend it,

NOTE Confidence: 0.701149783333333

00:55:16.790 --> 00:55:18.806
but we can only in place front,

NOTE Confidence: 0.701149783333333

00:55:18.810 --> 00:55:21.270
then if we have bidirectional range,

NOTE Confidence: 0.701149783333333

00:55:21.270 --> 00:55:23.967
we can start from the back of the range. And.

NOTE Confidence: 0.701149783333333

00:55:23.967 --> 00:55:27.463
Uh, push front to replace front in order,

NOTE Confidence: 0.701149783333333

00:55:27.470 --> 00:55:29.186
so that's what this is doing.

NOTE Confidence: 0.701149783333333

00:55:29.190 --> 00:55:31.225
So if constexpr we have

NOTE Confidence: 0.701149783333333

00:55:31.225 --> 00:55:32.446
a bidirectional range,

NOTE Confidence: 0.701149783333333

00:55:32.450 --> 00:55:35.078
then auto uast is ranges get

NOTE Confidence: 0.701149783333333

00:55:35.078 --> 00:55:36.392
final iterator unwrapped.

NOTE Confidence: 0.701149783333333

00:55:36.400 --> 00:55:38.157
This is that code that got moved

NOTE Confidence: 0.701149783333333

00:55:38.157 --> 00:55:39.907
constant to you first is EU begin,

NOTE Confidence: 0.701149783333333

00:55:39.910 --> 00:55:41.848
so we don't need any checking.

NOTE Confidence: 0.701149783333333

00:55:41.850 --> 00:55:44.720
We know it's a range while

NOTE Confidence: 0.701149783333333

00:55:44.720 --> 00:55:46.770
you first Nyquil you last.

NOTE Confidence: 0.701149783333333

00:55:46.770 --> 00:55:48.590
You last is the one that's being

NOTE Confidence: 0.701149783333333

00:55:48.590 --> 00:55:50.058
modified here, but we always see

NOTE Confidence: 0.701149783333333

00:55:50.058 --> 00:55:51.790
the order like first and then last.

NOTE Confidence: 0.701149783333333

00:55:51.790 --> 00:55:53.890
This is this is good.

NOTE Confidence: 0.701149783333333

00:55:53.890 --> 00:55:55.954
And then prepending order in place

NOTE Confidence: 0.701149783333333

00:55:55.954 --> 00:55:57.910
front internal avoids any checking.

NOTE Confidence: 0.701149783333333

00:55:57.910 --> 00:55:59.494
You last is.

NOTE Confidence: 0.701149783333333

00:55:59.494 --> 00:56:02.552
Cast the end and we know that

NOTE Confidence: 0.701149783333333

00:56:02.552 --> 00:56:04.024
we have a range.

NOTE Confidence: 0.701149783333333

00:56:04.030 --> 00:56:05.716
You first is not you last,

NOTE Confidence: 0.701149783333333

00:56:05.720 --> 00:56:07.604
so we need to unconditionally decrement

NOTE Confidence: 0.701149783333333

00:56:07.604 --> 00:56:09.630
and then we're looking at an element,

NOTE Confidence: 0.701149783333333

00:56:09.630 --> 00:56:10.720
and we can dereference it.

NOTE Confidence: 0.701149783333333

00:56:10.720 --> 00:56:12.268
So this is correct.

NOTE Confidence: 0.701149783333333

00:56:12.268 --> 00:56:15.760
Otherwise if it's not at least a byte irange,

NOTE Confidence: 0.701149783333333

00:56:15.760 --> 00:56:17.425
then we have no choice

NOTE Confidence: 0.701149783333333

00:56:17.425 --> 00:56:18.757
but to reverse direction.

NOTE Confidence: 0.701149783333333

00:56:18.760 --> 00:56:20.800
So here auto you first.

NOTE Confidence: 0.701149783333333

00:56:20.800 --> 00:56:22.816
This is the one that we're going to increment

NOTE Confidence: 0.701149783333333

00:56:22.816 --> 00:56:24.578
is you begin comes out of you last.

NOTE Confidence: 0.701149783333333

00:56:24.580 --> 00:56:27.736
While we have anything to do

NOTE Confidence: 0.701149783333333

00:56:27.736 --> 00:56:29.840
in place front internal.

NOTE Confidence: 0.701149783333333

00:56:29.840 --> 00:56:32.120
This says PREPEND flipped,

NOTE Confidence: 0.701149783333333

00:56:32.120 --> 00:56:36.250
so we're going to, uhm.

NOTE Confidence: 0.701149783333333

00:56:36.250 --> 00:56:39.330
If the range that we are prepending

NOTE Confidence: 0.701149783333333

00:56:39.330 --> 00:56:42.686
contains the values 1020, thirty 40 if we.

NOTE Confidence: 0.701149783333333

00:56:42.686 --> 00:56:45.710
If we in place front in order,

NOTE Confidence: 0.701149783333333

00:56:45.710 --> 00:56:48.006
we'll end up with 1020 thirty 40.

NOTE Confidence: 0.701149783333333

00:56:48.010 --> 00:56:48.682
So what?

NOTE Confidence: 0.701149783333333

00:56:48.682 --> 00:56:50.698
The deck will contain at the

NOTE Confidence: 0.701149783333333

00:56:50.698 --> 00:56:52.930
beginning will be 4020 or 4030, 2010.

NOTE Confidence: 0.701149783333333

00:56:52.930 --> 00:56:55.124
I can count backwards that's flipped,

NOTE Confidence: 0.701149783333333

00:56:55.124 --> 00:56:56.666
so we need to reverse it.

NOTE Confidence: 0.701149783333333

00:56:56.670 --> 00:56:58.425
So after we have successfully

NOTE Confidence: 0.701149783333333

00:56:58.425 --> 00:56:59.127
placed everything,

NOTE Confidence: 0.701149783333333

00:56:59.130 --> 00:57:00.695
and this emplacement could construct

NOTE Confidence: 0.701149783333333

00:57:00.695 --> 00:57:02.570
an object of a different type,

NOTE Confidence: 0.701149783333333

00:57:02.570 --> 00:57:04.730
it could be consuming from an input iterator,

NOTE Confidence: 0.701149783333333

00:57:04.730 --> 00:57:06.290
so we'll never get a chance to look at that.

NOTE Confidence: 0.701149783333333

00:57:06.290 --> 00:57:06.911
Tell you again,

NOTE Confidence: 0.701149783333333

00:57:06.911 --> 00:57:08.360
so we really do need to emplace,

NOTE Confidence: 0.701149783333333

00:57:08.360 --> 00:57:12.525
but once we have that we can.

NOTE Confidence: 0.701149783333333

00:57:12.530 --> 00:57:15.476
Do this stud reverse so this

NOTE Confidence: 0.701149783333333

00:57:15.476 --> 00:57:17.820
requires the elements to be.

NOTE Confidence: 0.701149783333333

00:57:17.820 --> 00:57:19.329
Assignable or swappable?

NOTE Confidence: 0.701149783333333

00:57:19.329 --> 00:57:19.832
Uh,

NOTE Confidence: 0.701149783333333

00:57:19.832 --> 00:57:22.850
I wanna say swappable for reverse,

NOTE Confidence: 0.701149783333333

00:57:22.850 --> 00:57:24.866
UM I do want to check to see if

NOTE Confidence: 0.701149783333333

00:57:24.866 --> 00:57:26.895
prepended range allows us to require that.

NOTE Confidence: 0.701149783333333

00:57:26.900 --> 00:57:29.072
I believe it does because it's

NOTE Confidence: 0.701149783333333

00:57:29.072 --> 00:57:30.520
similar to range insertion,

NOTE Confidence: 0.701149783333333

00:57:30.520 --> 00:57:31.936
but let's check the type requirement

NOTE Confidence: 0.701149783333333

00:57:31.936 --> 00:57:33.735
we can find out how many elements

NOTE Confidence: 0.701149783333333

00:57:33.735 --> 00:57:35.343
without having to have account because

NOTE Confidence: 0.701149783333333

00:57:35.343 --> 00:57:36.975
we can just ask what's our size.

NOTE Confidence: 0.701149783333333

00:57:36.980 --> 00:57:37.745
So my size,

NOTE Confidence: 0.701149783333333

00:57:37.745 --> 00:57:39.020
the current size minus the

NOTE Confidence: 0.701149783333333

00:57:39.020 --> 00:57:40.290
old size that we save.

NOTE Confidence: 0.701149783333333

00:57:40.290 --> 00:57:41.838
That's how many we just added.

NOTE Confidence: 0.701149783333333

00:57:41.840 --> 00:57:44.312
We can static cast that to

NOTE Confidence: 0.701149783333333

00:57:44.312 --> 00:57:45.960
different type store that

NOTE Confidence: 0.657581489411765

00:57:46.048 --> 00:57:48.428
in NUM and then this is where.

NOTE Confidence: 0.657581489411765

00:57:48.430 --> 00:57:52.326
We say stud reverse from begin begin NUM.

NOTE Confidence: 0.657581489411765

00:57:52.330 --> 00:57:56.954
Uhm? It is interesting that this is begin.

NOTE Confidence: 0.657581489411765

00:57:56.960 --> 00:57:58.320
This should really be unchecked.

NOTE Confidence: 0.657581489411765

00:57:58.320 --> 00:57:59.340
I think we can say unchecked.

NOTE Confidence: 0.657581489411765

00:57:59.340 --> 00:58:02.286
Begin here because like we're forming.

NOTE Confidence: 0.657581489411765

00:58:02.290 --> 00:58:03.978
I'm decorator, like, uh,

NOTE Confidence: 0.657581489411765

00:58:03.978 --> 00:58:05.666
they're expensive to check.

NOTE Confidence: 0.657581489411765

00:58:05.670 --> 00:58:07.855
Uh, we know that we're

NOTE Confidence: 0.657581489411765

00:58:07.855 --> 00:58:10.040
forming a valid range here.

NOTE Confidence: 0.657581489411765

00:58:10.040 --> 00:58:11.965
Now it is true that deck has

NOTE Confidence: 0.657581489411765

00:58:11.965 --> 00:58:13.480
not been thoroughly modernized.

NOTE Confidence: 0.657581489411765

00:58:13.480 --> 00:58:15.580
We we really modernized vector.

NOTE Confidence: 0.657581489411765

00:58:15.580 --> 00:58:16.460
We haven't spent nearly

NOTE Confidence: 0.657581489411765

00:58:16.460 --> 00:58:17.560
as many cycles on deck.

NOTE Confidence: 0.657581489411765

00:58:17.560 --> 00:58:19.552
This could be consistent

NOTE Confidence: 0.657581489411765

00:58:19.552 --> 00:58:21.544
with our existing code.

NOTE Confidence: 0.657581489411765

00:58:21.550 --> 00:58:24.168
Whereas the list has gotten some attention,

NOTE Confidence: 0.657581489411765

00:58:24.170 --> 00:58:25.286
let's see looking at the OK,

NOTE Confidence: 0.657581489411765

00:58:25.290 --> 00:58:26.506
like looking at insert.

NOTE Confidence: 0.657581489411765

00:58:26.506 --> 00:58:28.026
Insert just says reverse begin,

NOTE Confidence: 0.657581489411765

00:58:28.030 --> 00:58:29.054
begin, rotate, begin, begin.

NOTE Confidence: 0.657581489411765

00:58:29.054 --> 00:58:30.590
We do not try to call

NOTE Confidence: 0.657581489411765

00:58:30.641 --> 00:58:31.868
our unchecked functions,

NOTE Confidence: 0.657581489411765

00:58:31.870 --> 00:58:34.241
so it's consistent with precedence precedent.

NOTE Confidence: 0.657581489411765

00:58:34.241 --> 00:58:35.646
I don't think we're going.

NOTE Confidence: 0.657581489411765

00:58:35.650 --> 00:58:36.945
I don't think I'm going

NOTE Confidence: 0.657581489411765

00:58:36.945 --> 00:58:38.610
to ask for a change here,

NOTE Confidence: 0.657581489411765

00:58:38.610 --> 00:58:40.129
even though I think we do have.

NOTE Confidence: 0.657581489411765

00:58:40.130 --> 00:58:43.178
What is it unchecked?

NOTE Confidence: 0.657581489411765

00:58:43.180 --> 00:58:43.588
Again.

NOTE Confidence: 0.657581489411765

00:58:43.588 --> 00:58:46.852
Yeah we do and sometimes we use it.

NOTE Confidence: 0.783865058571429

00:58:50.080 --> 00:58:52.472
Primarily in move construction.

NOTE Confidence: 0.783865058571429

00:58:52.472 --> 00:58:54.266
Sometimes an assignment.

NOTE Confidence: 0.783865058571429

00:58:54.270 --> 00:58:55.968
We're not super disciplined about it.

NOTE Confidence: 0.84117919

00:58:58.740 --> 00:59:02.540
Sometimes, like a sign does.

NOTE Confidence: 0.84117919

00:59:02.540 --> 00:59:04.736
OK, we're we're just halfway consistent.

NOTE Confidence: 0.84117919

00:59:04.740 --> 00:59:06.558
Uh, we do use in spaceship.

NOTE Confidence: 0.84117919

00:59:06.560 --> 00:59:07.781
It's new code.

NOTE Confidence: 0.84117919

00:59:07.781 --> 00:59:09.816
Casey's writing a new code.

NOTE Confidence: 0.84117919

00:59:09.820 --> 00:59:13.390
I think I I'll mention it.

NOTE Confidence: 0.84117919

00:59:13.390 --> 00:59:16.855
OK Mr was asking about changes here.

NOTE Confidence: 0.84117919

00:59:16.860 --> 00:59:18.384
Uh, the different changes.

NOTE Confidence: 0.84117919

00:59:18.384 --> 00:59:19.527
I'll mention it.

NOTE Confidence: 0.749877958333333

00:59:22.300 --> 00:59:25.378
How do I wanna phrase this?

NOTE Confidence: 0.749877958333333

00:59:25.380 --> 00:59:30.770
I observe that. This.

NOTE Confidence: 0.749877958333333

00:59:30.770 --> 00:59:37.050
Reversal is using checked begin.

NOTE Confidence: 0.749877958333333

00:59:37.050 --> 00:59:42.330
But since we're forming this range

NOTE Confidence: 0.749877958333333

00:59:42.330 --> 00:59:46.570
ourselves, we could easily use.

NOTE Confidence: 0.749877958333333

00:59:46.570 --> 00:59:50.890
Unchecked begin. Uhm?

NOTE Confidence: 0.749877958333333

00:59:50.890 --> 00:59:57.175
Deck appears to be. Currently.

NOTE Confidence: 0.749877958333333

00:59:57.175 --> 01:00:01.480
Inconsistent. About UM

NOTE Confidence: 0.95409495

01:00:03.830 --> 01:00:10.712
how much? Effort to apply towards?

NOTE Confidence: 0.95409495

01:00:10.712 --> 01:00:14.303
Yeah, that's very verbose.

NOTE Confidence: 0.95409495

01:00:14.303 --> 01:00:16.856
Currently inconsistent about

NOTE Confidence: 0.95409495

01:00:16.856 --> 01:00:19.409
using unchecked iterators

NOTE Confidence: 0.95409495

01:00:19.409 --> 01:00:22.139
internally whenever possible.

NOTE Confidence: 0.95409495

01:00:22.140 --> 01:00:25.794
I see that some call sites do,

NOTE Confidence: 0.95409495

01:00:25.800 --> 01:00:29.840
but not all. Consider this.

NOTE Confidence: 0.95409495

01:00:29.840 --> 01:00:34.384
Uh, to be UM changes,

NOTE Confidence: 0.95409495

01:00:34.384 --> 01:00:36.588
optionally requested.

NOTE Confidence: 0.724366862

01:00:38.900 --> 01:00:43.947
I wouldn't. Object if you want

NOTE Confidence: 0.724366862

01:00:43.947 --> 01:00:47.076
to keep this as is for now,

NOTE Confidence: 0.724366862

01:00:47.080 --> 01:00:49.999
I can't really imagine that Casey would.

NOTE Confidence: 0.724366862

01:00:50.000 --> 01:00:51.640
Say yeah, I want to leave it as is because

NOTE Confidence: 0.724366862

01:00:51.688 --> 01:00:53.140
saying unchecked begin would be easy.

NOTE Confidence: 0.724366862

01:00:53.140 --> 01:00:55.276
It wouldn't. I as far as I know,

NOTE Confidence: 0.724366862

01:00:55.280 --> 01:00:56.720
it wouldn't have any other

NOTE Confidence: 0.724366862

01:00:56.720 --> 01:00:57.296
propagating changes.

NOTE Confidence: 0.724366862

01:00:57.300 --> 01:00:58.350
Just like a quick check to make

NOTE Confidence: 0.724366862

01:00:58.350 --> 01:00:59.289
sure we always say unchecked,

NOTE Confidence: 0.724366862

01:00:59.290 --> 01:01:03.746
begin and deck, but I won't demand it.

NOTE Confidence: 0.724366862

01:01:03.750 --> 01:01:06.210
Deck is not a paragon of

NOTE Confidence: 0.724366862

01:01:06.210 --> 01:01:07.850
performance to begin with.

NOTE Confidence: 0.724366862

01:01:07.850 --> 01:01:09.070
OI observed that this reversal

NOTE Confidence: 0.724366862

01:01:09.070 --> 01:01:10.046
is using check again,

NOTE Confidence: 0.724366862

01:01:10.050 --> 01:01:11.310
but since we're forming this range

NOTE Confidence: 0.724366862

01:01:11.310 --> 01:01:12.662
ourselves we could easily use unchecked

NOTE Confidence: 0.724366862

01:01:12.662 --> 01:01:14.072
begin deck appears to be currently

NOTE Confidence: 0.724366862

01:01:14.072 --> 01:01:15.221
inconsistent about using unchecked

NOTE Confidence: 0.724366862

01:01:15.221 --> 01:01:16.505
iterators internally whenever possible.

NOTE Confidence: 0.724366862

01:01:16.510 --> 01:01:17.644
I see that some call sites do,

NOTE Confidence: 0.724366862

01:01:17.650 --> 01:01:19.586
but not all consider this to be changes,

NOTE Confidence: 0.724366862

01:01:19.590 --> 01:01:20.150
optionally requested.

NOTE Confidence: 0.724366862

01:01:20.150 --> 01:01:20.990
I wouldn't object.

NOTE Confidence: 0.724366862

01:01:20.990 --> 01:01:21.716
If you want to keep this.

NOTE Confidence: 0.724366862

01:01:21.720 --> 01:01:23.409
As for now.

NOTE Confidence: 0.724366862

01:01:23.410 --> 01:01:25.282
OK, so after we flip your stuff I'm still

NOTE Confidence: 0.724366862

01:01:25.282 --> 01:01:27.165
going to check the type requirement, UM,

NOTE Confidence: 0.724366862

01:01:27.165 --> 01:01:29.525
regardless of whether we had bidi or not,

NOTE Confidence: 0.724366862

01:01:29.530 --> 01:01:31.518
we have succeeded so we can nail

NOTE Confidence: 0.724366862

01:01:31.518 --> 01:01:33.036
out the guards container, saying,

NOTE Confidence: 0.724366862

01:01:33.036 --> 01:01:35.367
OK, we're going to commit to this,

NOTE Confidence: 0.724366862

01:01:35.370 --> 01:01:37.198
and then we're done.

NOTE Confidence: 0.724366862

01:01:37.198 --> 01:01:39.483
So let's check prepend range.

NOTE Confidence: 0.724366862

01:01:39.490 --> 01:01:41.970
This would be in the probably a proposal.

NOTE Confidence: 0.724366862

01:01:41.970 --> 01:01:44.148
I could check the working paper.

NOTE Confidence: 0.724366862

01:01:44.150 --> 01:01:45.739
Let's see what the proposal has said.

NOTE Confidence: 0.724366862

01:01:45.740 --> 01:01:47.908
It would have been a diff to either

NOTE Confidence: 0.724366862

01:01:47.908 --> 01:01:50.230
deck or the container requirements.

NOTE Confidence: 0.724366862

01:01:50.230 --> 01:01:52.498
I want to say it's probably in.

NOTE Confidence: 0.724366862

01:01:52.500 --> 01:01:55.008
Let's check deck first.

NOTE Confidence: 0.724366862

01:01:55.010 --> 01:01:58.349
And this was prepend range prepend range.

NOTE Confidence: 0.831314558333333

01:02:01.540 --> 01:02:04.252
OK, this is talking about effects and

NOTE Confidence: 0.831314558333333

01:02:04.252 --> 01:02:05.740
complexity, but not requirements.

NOTE Confidence: 0.831314558333333

01:02:05.740 --> 01:02:08.130
So we gotta go to the overall

NOTE Confidence: 0.831314558333333

01:02:08.130 --> 01:02:09.600
sequence container requirements.

NOTE Confidence: 0.585513125833333

01:02:11.790 --> 01:02:14.118
OK, RG denotes container compatible range.

NOTE Confidence: 0.710456047142857

01:02:20.830 --> 01:02:23.310
We're on prepend range.

NOTE Confidence: 0.710456047142857

01:02:23.310 --> 01:02:25.170
Are these optional?

NOTE Confidence: 0.710456047142857

01:02:25.170 --> 01:02:26.314
They're probably optional because

NOTE Confidence: 0.710456047142857

01:02:26.314 --> 01:02:27.744
vector doesn't have it here.

NOTE Confidence: 0.710456047142857

01:02:27.750 --> 01:02:30.550
Go prep under range.

NOTE Confidence: 0.710456047142857

01:02:30.550 --> 01:02:32.390
Inserts copies elements range each

NOTE Confidence: 0.710456047142857

01:02:32.390 --> 01:02:33.862
iterators difference exactly once.

NOTE Confidence: 0.710456047142857

01:02:33.870 --> 01:02:35.725
No two *** note the order of

NOTE Confidence: 0.710456047142857

01:02:35.725 --> 01:02:37.578
elements in RG is not reversed.

NOTE Confidence: 0.710456047142857

01:02:37.580 --> 01:02:40.988
Thanks container deck forward list lists.

NOTE Confidence: 0.710456047142857

01:02:40.990 --> 01:02:42.963
OK, that should have been monospaced, uh?

NOTE Confidence: 0.710456047142857

01:02:42.963 --> 01:02:44.121
Or is the type requirement so

NOTE Confidence: 0.710456047142857

01:02:44.121 --> 01:02:45.690
there is no type requirement here.

NOTE Confidence: 0.925809477142857

01:02:49.970 --> 01:02:54.814
Interesting. Why are we not seeing this?

NOTE Confidence: 0.925809477142857

01:02:54.820 --> 01:02:56.180
There's some, there's something that's

NOTE Confidence: 0.925809477142857

01:02:56.180 --> 01:02:57.870
has something like this for vector.

NOTE Confidence: 0.925809477142857

01:02:57.870 --> 01:03:02.000
Let's take a look at the OR is it? Umm?

NOTE Confidence: 0.685112245

01:03:09.100 --> 01:03:14.128
Yeah, see like here. Assign range.

NOTE Confidence: 0.685112245

01:03:14.130 --> 01:03:16.706
Yeah, so like if I say assign range.

NOTE Confidence: 0.685112245

01:03:16.710 --> 01:03:18.070
I'm like a vector.

NOTE Confidence: 0.685112245

01:03:18.070 --> 01:03:20.636
This says for vector if R is

NOTE Confidence: 0.685112245

01:03:20.636 --> 01:03:22.428
neither sized nor forward,

NOTE Confidence: 0.685112245

01:03:22.430 --> 01:03:23.780
T must be move insertable.

NOTE Confidence: 0.685112245

01:03:23.780 --> 01:03:25.324
So this means if I can't instantly tell

NOTE Confidence: 0.685112245

01:03:25.324 --> 01:03:27.191
how big the range is and if it's not a

NOTE Confidence: 0.685112245

01:03:27.191 --> 01:03:28.565
forward range where I could just get

NOTE Confidence: 0.685112245

01:03:28.565 --> 01:03:30.250
the distance and see how big it is,

NOTE Confidence: 0.685112245

01:03:30.250 --> 01:03:32.290
then it's like an input only unsized range.

NOTE Confidence: 0.685112245

01:03:32.290 --> 01:03:33.310
I have no idea how many

NOTE Confidence: 0.685112245

01:03:33.310 --> 01:03:34.150
elements are going to be.

NOTE Confidence: 0.685112245

01:03:34.150 --> 01:03:35.950
Maybe they're coming from some

NOTE Confidence: 0.685112245

01:03:35.950 --> 01:03:37.390
sort of istream iterator,

NOTE Confidence: 0.685112245

01:03:37.390 --> 01:03:38.740
so I need to repeatedly and

NOTE Confidence: 0.685112245

01:03:38.740 --> 01:03:40.050
place back into a vector,

NOTE Confidence: 0.685112245

01:03:40.050 --> 01:03:41.202
but that could reallocate,

NOTE Confidence: 0.685112245

01:03:41.202 --> 01:03:42.642
so it's not sufficient for

NOTE Confidence: 0.685112245

01:03:42.642 --> 01:03:44.200
the elements to be in place.

NOTE Confidence: 0.685112245

01:03:44.200 --> 01:03:45.644
Constructible meaning in placeable

NOTE Confidence: 0.685112245

01:03:45.644 --> 01:03:46.727
from the iterator.

NOTE Confidence: 0.685112245

01:03:46.730 --> 01:03:49.355
They also need to be move insertable

NOTE Confidence: 0.685112245

01:03:49.355 --> 01:03:51.389
because reallocation will move elements,

NOTE Confidence: 0.685112245

01:03:51.390 --> 01:03:53.090
so that's where their type

NOTE Confidence: 0.685112245

01:03:53.090 --> 01:03:54.110
requirement comes from.

NOTE Confidence: 0.685112245

01:03:54.110 --> 01:03:55.560
That doesn't need that because

NOTE Confidence: 0.685112245

01:03:55.560 --> 01:03:56.430
it doesn't reallocate.

NOTE Confidence: 0.685112245

01:03:56.430 --> 01:03:59.160
It just allocates new blocks.

NOTE Confidence: 0.685112245

01:03:59.160 --> 01:04:03.724
However, this flipping is a new operation.

NOTE Confidence: 0.685112245

01:04:03.730 --> 01:04:04.480
Listen, let's see.

NOTE Confidence: 0.685112245

01:04:04.480 --> 01:04:05.980
Listen forward lists don't need it,

NOTE Confidence: 0.685112245

01:04:05.980 --> 01:04:07.930
because hold on.

NOTE Confidence: 0.84142666125

01:04:12.340 --> 01:04:15.060
List can link elements in the reverse order.

NOTE Confidence: 0.84142666125

01:04:15.060 --> 01:04:16.999
Now for lists can do that too.

NOTE Confidence: 0.84142666125

01:04:17.000 --> 01:04:18.470
We can traverse forward but

NOTE Confidence: 0.84142666125

01:04:18.470 --> 01:04:20.220
link them up the opposite way.

NOTE Confidence: 0.84142666125

01:04:20.220 --> 01:04:22.770
I'm pretty sure that's what it.

NOTE Confidence: 0.84142666125

01:04:22.770 --> 01:04:25.985
With that pre pen dots we if we have

NOTE Confidence: 0.84142666125

01:04:25.985 --> 01:04:28.682
1020 thirty 40 then as we consume

NOTE Confidence: 0.84142666125

01:04:28.682 --> 01:04:31.168
elements were like 10 and then we

NOTE Confidence: 0.84142666125

01:04:31.168 --> 01:04:33.728
change 20 we add them in forward order

NOTE Confidence: 0.84142666125

01:04:33.728 --> 01:04:36.450
and then we and then we fuse them to

NOTE Confidence: 0.84142666125

01:04:36.450 --> 01:04:38.780
the list whether list or forward list.

NOTE Confidence: 0.84142666125

01:04:38.780 --> 01:04:39.956
So there's no difficulty.

NOTE Confidence: 0.84142666125

01:04:39.956 --> 01:04:41.426
It's only for Dec only.

NOTE Confidence: 0.84142666125

01:04:41.430 --> 01:04:42.846
Deck needs to flip.

NOTE Confidence: 0.84142666125

01:04:42.846 --> 01:04:45.440
But there should be a requirement there.

NOTE Confidence: 0.784025890769231

01:04:47.730 --> 01:04:48.282
Would that exist?

NOTE Confidence: 0.784025890769231

01:04:48.282 --> 01:04:49.386
I'm trying to look for trying

NOTE Confidence: 0.784025890769231

01:04:49.386 --> 01:04:50.429
to think about precedent.

NOTE Confidence: 0.784025890769231

01:04:50.430 --> 01:04:54.230
Uhm, insert where comma first,

NOTE Confidence: 0.784025890769231

01:04:54.230 --> 01:04:58.178
last should also have the same requirement.

NOTE Confidence: 0.784025890769231

01:04:58.180 --> 01:05:03.090
Does it? I think let's see so.

NOTE Confidence: 0.784025890769231

01:05:03.090 --> 01:05:04.818
Yeah, here we go.

NOTE Confidence: 0.784025890769231

01:05:04.820 --> 01:05:06.935
Container insert where

NOTE Confidence: 0.784025890769231

01:05:06.935 --> 01:05:09.755
iterator comma I comma.

NOTE Confidence: 0.784025890769231

01:05:09.760 --> 01:05:11.419
JT's got to be in place constructable

NOTE Confidence: 0.784025890769231

01:05:11.419 --> 01:05:13.009
if you're a vector in a deck,

NOTE Confidence: 0.784025890769231

01:05:13.010 --> 01:05:14.480
you got to be move insertable,

NOTE Confidence: 0.784025890769231

01:05:14.480 --> 01:05:15.839
move constructible, move,

NOTE Confidence: 0.784025890769231

01:05:15.839 --> 01:05:17.198
assignable and swappable.

NOTE Confidence: 0.784025890769231

01:05:17.200 --> 01:05:18.943
That's I think some of these requirements

NOTE Confidence: 0.784025890769231

01:05:18.943 --> 01:05:20.743
are actually not always needed, but.

NOTE Confidence: 0.784025890769231

01:05:20.743 --> 01:05:23.161
In general, some of them are

NOTE Confidence: 0.784025890769231

01:05:23.161 --> 01:05:25.320
needed to reverse stuff more.

NOTE Confidence: 0.784025890769231

01:05:25.320 --> 01:05:25.926
Ah.

NOTE Confidence: 0.784025890769231

01:05:25.926 --> 01:05:28.350
Reallocate and insert range

NOTE Confidence: 0.784025890769231

01:05:28.350 --> 01:05:30.774
does have that requirement.

NOTE Confidence: 0.844022318333333

01:05:33.590 --> 01:05:35.676
So insert range is fine and it

NOTE Confidence: 0.844022318333333

01:05:35.676 --> 01:05:37.270
should be called out there.

NOTE Confidence: 0.844022318333333

01:05:37.270 --> 01:05:38.490
But Prepend I think.

NOTE Confidence: 0.844022318333333

01:05:38.490 --> 01:05:41.409
I think this is a defect in the wording.

NOTE Confidence: 0.844022318333333

01:05:41.410 --> 01:05:42.304
Clearly the implementation

NOTE Confidence: 0.844022318333333

01:05:42.304 --> 01:05:43.794
is doing the right thing.

NOTE Confidence: 0.844022318333333

01:05:43.800 --> 01:05:45.060
There's no other way to do this.

NOTE Confidence: 0.695457151111111

01:05:47.230 --> 01:05:48.290
Yeah, that's a defect.

NOTE Confidence: 0.695457151111111

01:05:48.290 --> 01:05:49.615
Deck needs that additional requirement.

NOTE Confidence: 0.695457151111111

01:05:49.620 --> 01:05:50.845
Let's see if this has been patched,

NOTE Confidence: 0.695457151111111

01:05:50.850 --> 01:05:53.230
otherwise I will ask Casey

NOTE Confidence: 0.695457151111111

01:05:53.230 --> 01:05:57.810
to file an LDG issue. Ohm.

NOTE Confidence: 0.695457151111111

01:05:57.810 --> 01:05:59.448
OK, it's not just a code review,

NOTE Confidence: 0.695457151111111

01:05:59.450 --> 01:06:02.390
it's a standard review surprise.

NOTE Confidence: 0.695457151111111

01:06:02.390 --> 01:06:09.360
Uhhh, OK, Container Library 424.

NOTE Confidence: 0.695457151111111

01:06:09.360 --> 01:06:11.128
Let's let's see quirements.

NOTE Confidence: 0.695457151111111

01:06:11.128 --> 01:06:12.454
They actually reformatted

NOTE Confidence: 0.695457151111111

01:06:12.454 --> 01:06:14.320
reformatted this from a table,

NOTE Confidence: 0.695457151111111

01:06:14.320 --> 01:06:16.876
a horrible table into something better.

NOTE Confidence: 0.695457151111111

01:06:16.880 --> 01:06:17.860
I think it was optional.

NOTE Confidence: 0.695457151111111

01:06:17.860 --> 01:06:19.106
Container requirements.

NOTE Confidence: 0.695457151111111

01:06:19.106 --> 01:06:21.598
Nope, not that optional.

NOTE Confidence: 0.695457151111111

01:06:21.600 --> 01:06:25.588
Umm? What was it?

NOTE Confidence: 0.695457151111111

01:06:25.590 --> 01:06:27.374
Optional sequence container requirements.

NOTE Confidence: 0.695457151111111

01:06:27.374 --> 01:06:30.050
I'm looking in the wrong place.

NOTE Confidence: 0.695457151111111

01:06:30.050 --> 01:06:34.730
Uh sequence container.

NOTE Confidence: 0.695457151111111

01:06:34.730 --> 01:06:37.118
Here we go.

NOTE Confidence: 0.695457151111111

01:06:37.120 --> 01:06:39.696
We're going to maximize this for a second.

NOTE Confidence: 0.695457151111111

01:06:39.700 --> 01:06:42.510
OK, so.

NOTE Confidence: 0.695457151111111

01:06:42.510 --> 01:06:46.294
Like do not wanna highlight OK on selection.

NOTE Confidence: 0.695457151111111

01:06:46.300 --> 01:06:48.230
We are on prepended range.

NOTE Confidence: 0.68224704

01:06:51.170 --> 01:06:53.650
Here we go prepend range.

NOTE Confidence: 0.68224704

01:06:53.650 --> 01:06:55.300
Preconditions T is in place

NOTE Confidence: 0.68224704

01:06:55.300 --> 01:06:56.290
constructable required for

NOTE Confidence: 0.68224704

01:06:56.290 --> 01:06:57.589
deck forward listen list.

NOTE Confidence: 0.68224704

01:06:57.590 --> 01:07:00.398
OK so it is a defect in the

NOTE Confidence: 0.68224704

01:07:00.398 --> 01:07:01.680
current working paper.

NOTE Confidence: 0.68224704

01:07:01.680 --> 01:07:03.078
OK, so let's get the section.

NOTE Confidence: 0.68224704

01:07:03.080 --> 01:07:04.235
Wow, paragraph 94.

NOTE Confidence: 0.68224704

01:07:04.235 --> 01:07:06.545
I guess that's the downside of

NOTE Confidence: 0.68224704

01:07:06.545 --> 01:07:08.529
breaking up that enormous table.

NOTE Confidence: 0.68224704

01:07:08.530 --> 01:07:10.606
OK 24 two four sequence requirements.

NOTE Confidence: 0.586629181

01:07:13.020 --> 01:07:16.877
OK, so prepended range I can comment

NOTE Confidence: 0.586629181

01:07:16.877 --> 01:07:20.778
on the flipping. Which is this here?

NOTE Confidence: 0.845052604

01:07:24.960 --> 01:07:32.119
There appears to be a. Wording defect here.

NOTE Confidence: 0.0057576597

01:07:34.640 --> 01:07:35.500
Ah.

NOTE Confidence: 0.6628771006

01:07:37.810 --> 01:07:40.100
And 4910 I'm pretty sure

NOTE Confidence: 0.6628771006

01:07:40.100 --> 01:07:41.932
I'm not transposing digits

NOTE Confidence: 0.6628771006

01:07:41.932 --> 01:07:43.470
there sequence requirements.

NOTE Confidence: 0.6628771006

01:07:43.470 --> 01:07:46.710
I can also cite the live

NOTE Confidence: 0.6628771006

01:07:46.710 --> 01:07:48.888
standard on eel dot is.

NOTE Confidence: 0.6628771006

01:07:48.890 --> 01:07:50.710
It was like paragraph.

NOTE Confidence: 0.6628771006

01:07:50.710 --> 01:07:56.600
What 94 something high, let's see. 94

NOTE Confidence: 0.18517545565

01:08:00.190 --> 01:08:06.712
text mines. Make big.

NOTE Confidence: 0.18517545565

01:08:06.712 --> 01:08:11.240
OK. Slash what? What 95?

NOTE Confidence: 0.498182855333333

01:08:13.710 --> 01:08:18.330
97 says. A prepend range only

NOTE Confidence: 0.498182855333333

01:08:18.330 --> 01:08:23.259
care about 95. And 97 whoops.

NOTE Confidence: 0.860339112222222

01:08:29.370 --> 01:08:30.294
These are italicized.

NOTE Confidence: 0.860339112222222

01:08:30.294 --> 01:08:32.142
I don't even need to look.

NOTE Confidence: 0.858527245454545

01:08:34.820 --> 01:08:36.185
I do need to look for the

NOTE Confidence: 0.858527245454545

01:08:36.185 --> 01:08:37.410
rest of the formatting.

NOTE Confidence: 0.858527245454545

01:08:37.410 --> 01:08:41.170
UM, place Constructable is italics.

NOTE Confidence: 0.858527245454545

01:08:41.170 --> 01:08:43.990
TX ranges begin, and the types,

NOTE Confidence: 0.858527245454545

01:08:43.990 --> 01:08:49.152
so we've got. Tea. X.

NOTE Confidence: 0.858527245454545

01:08:49.152 --> 01:08:53.856
Ranges begin range CP 17 in place.

NOTE Confidence: 0.858527245454545

01:08:53.860 --> 01:08:58.430
Constructible is a towel sized.

NOTE Confidence: 0.858527245454545

01:08:58.430 --> 01:09:03.080
Forward less and less. OK.

NOTE Confidence: 0.858527245454545

01:09:03.080 --> 01:09:04.958
Alright, I was going to get

NOTE Confidence: 0.858527245454545

01:09:04.960 --> 01:09:08.340
the short link to this.

NOTE Confidence: 0.858527245454545

01:09:08.340 --> 01:09:12.540
21 dot link slash sequence dot

NOTE Confidence: 0.858527245454545

01:09:12.540 --> 01:09:14.940
requirements load the live draft standard.

NOTE Confidence: 0.858527245454545

01:09:14.940 --> 01:09:19.600
Scroll down to. 95

NOTE Confidence: 0.832834975

01:09:26.700 --> 01:09:28.190
and 97.

NOTE Confidence: 0.595491648333333

01:09:36.230 --> 01:09:39.260
No, that's gotta be square brackets.

NOTE Confidence: 0.595491648333333

01:09:39.260 --> 01:09:42.210
It's like something's wrong here. 97

NOTE Confidence: 0.915072533333333

01:09:44.480 --> 01:09:49.785
however, there should be additional

NOTE Confidence: 0.915072533333333

01:09:49.785 --> 01:09:54.141
requirements for. Deck uhm.

NOTE Confidence: 0.915072533333333

01:09:54.141 --> 01:09:59.626
Possibly only when the range.

NOTE Confidence: 0.915072533333333

01:09:59.630 --> 01:10:01.576
Actually not possible because we can cite

NOTE Confidence: 0.915072533333333

01:10:01.576 --> 01:10:05.290
the other one when the range is weak.

NOTE Confidence: 0.915072533333333

01:10:05.290 --> 01:10:07.960
What was the precedent we

NOTE Confidence: 0.915072533333333

01:10:07.960 --> 01:10:10.630
found it was the assign.

NOTE Confidence: 0.915072533333333

01:10:10.630 --> 01:10:13.300
Can I find that quickly?

NOTE Confidence: 0.915072533333333

01:10:13.300 --> 01:10:17.084
Assign assign range and there

NOTE Confidence: 0.915072533333333

01:10:17.084 --> 01:10:17.994
I can point to the.

NOTE Confidence: 0.915072533333333

01:10:18.000 --> 01:10:20.700
This is new wording.

NOTE Confidence: 0.915072533333333

01:10:20.700 --> 01:10:22.191
So the insert one was even better

NOTE Confidence: 0.915072533333333

01:10:22.191 --> 01:10:23.859
because that one talked about swappable.

NOTE Confidence: 0.75180924

01:10:29.380 --> 01:10:33.690
Yeah. Interesting, this one doesn't say

NOTE Confidence: 0.75180924

01:10:33.690 --> 01:10:36.800
uh about signed or unsupported was the.

NOTE Confidence: 0.75180924

01:10:36.800 --> 01:10:40.130
I thought we saw wording that said if it's

NOTE Confidence: 0.75180924

01:10:40.130 --> 01:10:43.088
neither sign or neither sized nor forward.

NOTE Confidence: 0.75180924

01:10:43.090 --> 01:10:45.422
Uhm? Size range. Yeah,

NOTE Confidence: 0.75180924

01:10:45.422 --> 01:10:49.560
here we go X from range RGB.

NOTE Confidence: 0.75180924

01:10:49.560 --> 01:10:53.934
Assign range. Yeah, so it's really.

NOTE Confidence: 0.75180924

01:10:53.934 --> 01:10:55.890
I would want to ask for both,

NOTE Confidence: 0.75180924

01:10:55.890 --> 01:10:58.174
like this constraint about

NOTE Confidence: 0.75180924

01:10:58.174 --> 01:11:00.458
neither size nor forward.

NOTE Confidence: 0.75180924

01:11:00.460 --> 01:11:01.678
Actually here it is, not size.

NOTE Confidence: 0.75180924

01:11:01.680 --> 01:11:02.460
We don't care about size,

NOTE Confidence: 0.75180924

01:11:02.460 --> 01:11:03.720
we care about Bidi.

NOTE Confidence: 0.75180924

01:11:03.720 --> 01:11:06.070
Umm if it's not bite I then

NOTE Confidence: 0.75180924

01:11:06.070 --> 01:11:07.950
we gotta do the reversal.

NOTE Confidence: 0.7209864

01:11:11.030 --> 01:11:15.070
Yes. OK, so we're going to

NOTE Confidence: 0.7209864

01:11:15.070 --> 01:11:16.760
do where's the swap ball.

NOTE Confidence: 0.7209864

01:11:16.760 --> 01:11:20.258
It was insert. Here we go for

NOTE Confidence: 0.7209864

01:11:20.258 --> 01:11:22.418
vector index swappable. OK so 41.

NOTE Confidence: 0.73907192625

01:11:25.190 --> 01:11:27.286
Scroll up here and get the original text.

NOTE Confidence: 0.37685046

01:11:31.510 --> 01:11:32.450
41

NOTE Confidence: 0.6296626075

01:11:39.750 --> 01:11:44.342
You can copy this. Same section,

NOTE Confidence: 0.6296626075

01:11:44.342 --> 01:11:48.190
so I'll just cite it as slash 41.

NOTE Confidence: 0.6296626075

01:11:48.190 --> 01:11:49.894
And instead of weak,

NOTE Confidence: 0.6296626075

01:11:49.894 --> 01:11:52.450
I can be specific and say

NOTE Confidence: 0.6296626075

01:11:52.549 --> 01:11:54.957
not a bidirectional range.

NOTE Confidence: 0.6296626075

01:11:54.960 --> 01:11:58.926
Not. Bidirectional range.

NOTE Confidence: 0.6296626075

01:11:58.926 --> 01:12:03.540
Similar to how 41?

NOTE Confidence: 0.6296626075

01:12:03.540 --> 01:12:05.340
Says I would say it requires

NOTE Confidence: 0.6296626075

01:12:05.340 --> 01:12:07.009
because that's the term of art.

NOTE Confidence: 0.675008182

01:12:09.700 --> 01:12:12.295
Uh, preconditions, I'll chop this

NOTE Confidence: 0.675008182

01:12:12.295 --> 01:12:15.628
out because we don't care. Da da da.

NOTE Confidence: 0.63886805375

01:12:17.830 --> 01:12:23.508
And chop out the range in a OK. I forgot.

NOTE Confidence: 0.63886805375

01:12:23.508 --> 01:12:28.120
So for vector and deck this is unnecessary,

NOTE Confidence: 0.63886805375

01:12:28.120 --> 01:12:30.346
but I do like my standard

NOTE Confidence: 0.63886805375

01:12:30.346 --> 01:12:31.830
citations to look pretty.

NOTE Confidence: 0.63886805375

01:12:31.830 --> 01:12:35.162
It's gotta be moving insertable into X.

NOTE Confidence: 0.63886805375

01:12:35.162 --> 01:12:38.078
It's got to be move constructible.

NOTE Confidence: 0.63886805375

01:12:38.080 --> 01:12:38.770
It's got to be move,

NOTE Confidence: 0.63886805375

01:12:38.770 --> 01:12:43.018
assignable and swappable is not italicized.

NOTE Confidence: 0.63886805375

01:12:43.020 --> 01:12:45.790
OK, we just swap requirements.

NOTE Confidence: 0.828906495

01:12:50.670 --> 01:12:51.798
OK, and I did say similar,

NOTE Confidence: 0.828906495

01:12:51.800 --> 01:12:54.230
so I'm not mandating excuse me.

NOTE Confidence: 0.828906495

01:12:54.230 --> 01:12:59.070
That would be exactly that, UM.

NOTE Confidence: 0.828906495

01:12:59.070 --> 01:13:00.918
I will phrase this as a question

NOTE Confidence: 0.828906495

01:13:00.918 --> 01:13:02.730
should we file should we should?

NOTE Confidence: 0.828906495

01:13:02.730 --> 01:13:05.016
Should we file an LWG issue?

NOTE Confidence: 0.724049562727273

01:13:07.550 --> 01:13:09.209
OK, there appears to be a wording

NOTE Confidence: 0.724049562727273

01:13:09.209 --> 01:13:11.462
defect here at W. 21 and 4910.

NOTE Confidence: 0.724049562727273

01:13:11.462 --> 01:13:13.438
Seek requirements 9597 says a pretender

NOTE Confidence: 0.724049562727273

01:13:13.438 --> 01:13:15.010
range preconditions T as in place,

NOTE Confidence: 0.724049562727273

01:13:15.010 --> 01:13:16.642
constructible X range begin marks required

NOTE Confidence: 0.724049562727273

01:13:16.642 --> 01:13:18.190
for deck forward lists and lists.

NOTE Confidence: 0.724049562727273

01:13:18.190 --> 01:13:19.370
However, there should be additional

NOTE Confidence: 0.724049562727273

01:13:19.370 --> 01:13:20.781
requirements for deck when the range

NOTE Confidence: 0.724049562727273

01:13:20.781 --> 01:13:21.921
is not bidirectional and similar to

NOTE Confidence: 0.724049562727273

01:13:21.921 --> 01:13:23.349
how 41 says preconditions for veteran

NOTE Confidence: 0.724049562727273

01:13:23.349 --> 01:13:24.993
detectives also move insertable index move,

NOTE Confidence: 0.724049562727273

01:13:25.000 --> 01:13:27.070
retractable, move, assignable and swappable.

NOTE Confidence: 0.724049562727273

01:13:27.070 --> 01:13:29.398
Should we file an LDG issue.

NOTE Confidence: 0.724049562727273

01:13:29.400 --> 01:13:31.080
Let me double check, uh,

NOTE Confidence: 0.724049562727273

01:13:31.080 --> 01:13:33.432
these links make sure I didn't mess

NOTE Confidence: 0.724049562727273

01:13:33.432 --> 01:13:36.896
them up so the working paper. Yep Yep.

NOTE Confidence: 0.724049562727273

01:13:36.896 --> 01:13:42.040
Yep, OK, we're all good. Added.

NOTE Confidence: 0.724049562727273

01:13:42.040 --> 01:13:46.135
OK, that was repent range for deck.

NOTE Confidence: 0.724049562727273

01:13:46.140 --> 01:13:47.823
Let's see. We've got a little bit more time.

NOTE Confidence: 0.724049562727273

01:13:47.830 --> 01:13:49.156
I think I can get through.

NOTE Confidence: 0.724049562727273

01:13:49.160 --> 01:13:51.630
We'll see if I can get through deck if Dev,

NOTE Confidence: 0.724049562727273

01:13:51.630 --> 01:13:52.830
CPP, Lib, container ranges.

NOTE Confidence: 0.724049562727273

01:13:52.830 --> 01:13:55.798
Now we are appending range given Range

NOTE Confidence: 0.724049562727273

01:13:55.798 --> 01:13:57.436
Rover Range again we want to orphan

NOTE Confidence: 0.724049562727273

01:13:57.436 --> 01:13:58.905
all iterators because we are going

NOTE Confidence: 0.724049562727273

01:13:58.905 --> 01:14:00.867
to modify the size of the deck by

NOTE Confidence: 0.724049562727273

01:14:00.867 --> 01:14:02.868
emplacing consider old size is my size

NOTE Confidence: 0.724049562727273

01:14:02.868 --> 01:14:04.751
auto you first issue begin consulto

NOTE Confidence: 0.724049562727273

01:14:04.751 --> 01:14:07.335
ulas is you end restore all size guard.

NOTE Confidence: 0.724049562727273

01:14:07.340 --> 01:14:09.446
We're going to pop if things

NOTE Confidence: 0.724049562727273

01:14:09.446 --> 01:14:11.330
go bad this old size.

NOTE Confidence: 0.724049562727273

01:14:11.330 --> 01:14:13.074
Four, as long as first does not last,

NOTE Confidence: 0.724049562727273

01:14:13.080 --> 01:14:14.164
increment you first and

NOTE Confidence: 0.724049562727273

01:14:14.164 --> 01:14:14.977
place back everything.

NOTE Confidence: 0.724049562727273

01:14:14.980 --> 01:14:16.198
If it succeeds and all putter,

NOTE Confidence: 0.724049562727273

01:14:16.200 --> 01:14:18.540
OK, nice and simple.

NOTE Confidence: 0.724049562727273

01:14:18.540 --> 01:14:20.808
In place fun front we can refactor

NOTE Confidence: 0.724049562727273

01:14:20.808 --> 01:14:24.020
to column place front, internal.

NOTE Confidence: 0.724049562727273

01:14:24.020 --> 01:14:25.905
Overhaul in place for internal

NOTE Confidence: 0.724049562727273

01:14:25.905 --> 01:14:27.413
doesn't care about orphaning.

NOTE Confidence: 0.724049562727273

01:14:27.420 --> 01:14:28.536
Then we do this.

NOTE Confidence: 0.724049562727273

01:14:28.536 --> 01:14:30.605
This should be a pure code movement

NOTE Confidence: 0.724049562727273

01:14:30.605 --> 01:14:32.880
and in 17 mode we return front.

NOTE Confidence: 0.724049562727273

01:14:32.880 --> 01:14:34.070
OK resize.

NOTE Confidence: 0.747192181666667

01:14:36.710 --> 01:14:40.088
OK, so resize the refactoring here.

NOTE Confidence: 0.747192181666667

01:14:40.090 --> 01:14:42.146
We need to orphan all because in place

NOTE Confidence: 0.747192181666667

01:14:42.146 --> 01:14:43.847
back internal is not going to handle.

NOTE Confidence: 0.747192181666667

01:14:43.850 --> 01:14:44.930
I'm assuming when it's extract it's

NOTE Confidence: 0.747192181666667

01:14:44.930 --> 01:14:46.150
not going to handle any orphaning,

NOTE Confidence: 0.747192181666667

01:14:46.150 --> 01:14:48.193
so we should do a single orphaning and then

NOTE Confidence: 0.747192181666667

01:14:48.193 --> 01:14:50.308
in place back and that's the reasonable.

NOTE Confidence: 0.747192181666667

01:14:50.310 --> 01:14:51.470
It's better than repeatedly and

NOTE Confidence: 0.747192181666667

01:14:51.470 --> 01:14:52.630
placing back in that orphan,

NOTE Confidence: 0.747192181666667

01:14:52.630 --> 01:14:53.956
that's why we didn't bother before,

NOTE Confidence: 0.747192181666667

01:14:53.960 --> 01:14:55.810
so that's actually an improvement.

NOTE Confidence: 0.747192181666667

01:14:55.810 --> 01:14:57.502
OK, so we've got in place

NOTE Confidence: 0.747192181666667

01:14:57.502 --> 01:14:58.348
front internal here.

NOTE Confidence: 0.747192181666667

01:14:58.350 --> 01:15:00.170
We've got large code movement.

NOTE Confidence: 0.747192181666667

01:15:00.170 --> 01:15:03.530
I always want to make sure we're not

NOTE Confidence: 0.747192181666667

01:15:03.530 --> 01:15:05.606
damaging code 99% of the time you're fine,

NOTE Confidence: 0.747192181666667

01:15:05.610 --> 01:15:06.696
but we gotta catch that one.

NOTE Confidence: 0.747192181666667

01:15:06.700 --> 01:15:08.530
Percent where things are damaged,

NOTE Confidence: 0.747192181666667

01:15:08.530 --> 01:15:09.550
so I'm going to copy.

NOTE Confidence: 0.747192181666667

01:15:09.550 --> 01:15:10.630
You can't see what I'm doing.

NOTE Confidence: 0.747192181666667

01:15:10.630 --> 01:15:13.810
Let me move this over here.

NOTE Confidence: 0.747192181666667

01:15:13.810 --> 01:15:18.318
So this is old and lace front.

NOTE Confidence: 0.747192181666667

01:15:18.320 --> 01:15:21.668
Old and place front.

NOTE Confidence: 0.747192181666667

01:15:21.670 --> 01:15:24.652
Shouty comments remind me that it's not

NOTE Confidence: 0.747192181666667

01:15:24.652 --> 01:15:28.726
actual code change to CPP that's control KM.

NOTE Confidence: 0.747192181666667

01:15:28.730 --> 01:15:30.260
Here's new code.

NOTE Confidence: 0.82545107875

01:15:37.110 --> 01:15:40.494
OK, is that the same level of invitation?

NOTE Confidence: 0.82545107875

01:15:40.500 --> 01:15:43.670
The code is so good enough. OK, let's differ.

NOTE Confidence: 0.765709901666667

01:15:46.160 --> 01:15:47.468
And what do we get here?

NOTE Confidence: 0.765709901666667

01:15:47.470 --> 01:15:48.744
We get a little bit of OK,

NOTE Confidence: 0.765709901666667

01:15:48.750 --> 01:15:49.640
so there is some change,

NOTE Confidence: 0.765709901666667

01:15:49.640 --> 01:15:52.400
but it's OK. Change UM,

NOTE Confidence: 0.765709901666667

01:15:52.400 --> 01:15:54.339
this is now templated on class data.

NOTE Confidence: 0.765709901666667

01:15:54.340 --> 01:15:56.930
dot ties, void under score and place

NOTE Confidence: 0.765709901666667

01:15:56.930 --> 01:15:59.466
for an internal taking ties valves we

NOTE Confidence: 0.765709901666667

01:15:59.466 --> 01:16:01.730
add cons to the size type block that

NOTE Confidence: 0.765709901666667

01:16:01.801 --> 01:16:03.835
is an improvement because we don't

NOTE Confidence: 0.765709901666667

01:16:03.835 --> 01:16:06.060
modify that and then clang format.

NOTE Confidence: 0.765709901666667

01:16:06.060 --> 01:16:09.063
Readjust the spaces, the type and the

NOTE Confidence: 0.765709901666667

01:16:09.063 --> 01:16:11.679
arguments are now ties and valves.

NOTE Confidence: 0.765709901666667

01:16:11.680 --> 01:16:13.100
This name is new.

NOTE Confidence: 0.765709901666667

01:16:13.100 --> 01:16:14.875
We've never said ties before.

NOTE Confidence: 0.765709901666667

01:16:14.880 --> 01:16:16.860
I think we usually say types.

NOTE Confidence: 0.765709901666667

01:16:16.860 --> 01:16:17.760
Size is actually fine.

NOTE Confidence: 0.765709901666667

01:16:17.760 --> 01:16:19.110
It's probably better than what we've

NOTE Confidence: 0.765709901666667

01:16:19.150 --> 01:16:20.410
been using. I have no objection.

NOTE Confidence: 0.765709901666667

01:16:20.410 --> 01:16:22.948
OK, so that's a good code movement.

NOTE Confidence: 0.765709901666667

01:16:22.950 --> 01:16:25.592
Umm, OK. Let's expand again,

NOTE Confidence: 0.765709901666667

01:16:25.592 --> 01:16:27.160
Umm, so we just did in place.

NOTE Confidence: 0.765709901666667

01:16:27.160 --> 01:16:31.680
Front internal. Uh, now?

NOTE Confidence: 0.765709901666667

01:16:31.680 --> 01:16:36.027
A sign I'm assuming we're going to.

NOTE Confidence: 0.765709901666667

01:16:36.030 --> 01:16:38.198
OK, we're extracting something

NOTE Confidence: 0.765709901666667

01:16:38.198 --> 01:16:39.824
out assign range.

NOTE Confidence: 0.765709901666667

01:16:39.830 --> 01:16:40.822
Which is essentially the

NOTE Confidence: 0.765709901666667

01:16:40.822 --> 01:16:42.062
common version of a sign,

NOTE Confidence: 0.765709901666667

01:16:42.070 --> 01:16:43.750
but can handle different Sentinels.

NOTE Confidence: 0.765709901666667

01:16:43.750 --> 01:16:46.698
That's why this exists.

NOTE Confidence: 0.765709901666667

01:16:46.700 --> 01:16:46.998
OK,

NOTE Confidence: 0.765709901666667

01:16:46.998 --> 01:16:48.190
so we were public.

NOTE Confidence: 0.822973216666667

01:16:50.300 --> 01:16:54.236
Implementing pop back, so that's fine.

NOTE Confidence: 0.822973216666667

01:16:54.240 --> 01:16:55.392
Uh, we're going to jump into

NOTE Confidence: 0.822973216666667

01:16:55.392 --> 01:16:56.800
private and then go back to public.

NOTE Confidence: 0.822973216666667

01:16:56.800 --> 01:16:59.170
OK, so template class inter class

NOTE Confidence: 0.822973216666667

01:16:59.170 --> 01:17:01.783
sent void under score sign range

NOTE Confidence: 0.822973216666667

01:17:01.783 --> 01:17:03.699
take interfirst consent last.

NOTE Confidence: 0.822973216666667

01:17:03.700 --> 01:17:06.478
Same orphaning but instead of addl

NOTE Confidence: 0.822973216666667

01:17:06.478 --> 01:17:09.220
verifying and unwrapping and unwrapping,

NOTE Confidence: 0.822973216666667

01:17:09.220 --> 01:17:10.556
we're going to assume.

NOTE Confidence: 0.822973216666667

01:17:10.556 --> 01:17:13.240
That first and last are already unwrapped,

NOTE Confidence: 0.822973216666667

01:17:13.240 --> 01:17:14.224
because that's.

NOTE Confidence: 0.822973216666667

01:17:14.224 --> 01:17:15.700
What happens here?

NOTE Confidence: 0.822973216666667

01:17:15.700 --> 01:17:18.360
We verify and unwrap or just pass

NOTE Confidence: 0.822973216666667

01:17:18.360 --> 01:17:20.707
unwrapped O that's why we don't need to

NOTE Confidence: 0.822973216666667

01:17:20.707 --> 01:17:23.196
verify and unwrap here we do need our

NOTE Confidence: 0.822973216666667

01:17:23.196 --> 01:17:25.080
own unchecked begin and unchecked end.

NOTE Confidence: 0.822973216666667

01:17:25.080 --> 01:17:29.035
OK, so now the comments are changing.

NOTE Confidence: 0.822973216666667

01:17:29.040 --> 01:17:33.909
But the overall structure of the code is not.

NOTE Confidence: 0.822973216666667

01:17:33.910 --> 01:17:36.024
It's changing a little some of the

NOTE Confidence: 0.822973216666667

01:17:36.024 --> 01:17:38.520
some of the increments changing so.

NOTE Confidence: 0.822973216666667

01:17:38.520 --> 01:17:40.030
This overall thing is trying

NOTE Confidence: 0.822973216666667

01:17:40.030 --> 01:17:40.936
to reuse elements.

NOTE Confidence: 0.822973216666667

01:17:40.940 --> 01:17:43.812
We used to say try to assign over

NOTE Confidence: 0.822973216666667

01:17:43.812 --> 01:17:46.248
an element in the container and

NOTE Confidence: 0.822973216666667

01:17:46.248 --> 01:17:48.696
then if the container is too.

NOTE Confidence: 0.822973216666667

01:17:48.700 --> 01:17:49.858
If we run out of elements,

NOTE Confidence: 0.822973216666667

01:17:49.860 --> 01:17:51.546
we need to insert at end.

NOTE Confidence: 0.822973216666667

01:17:51.550 --> 01:17:53.030
So actually the control flow

NOTE Confidence: 0.822973216666667

01:17:53.030 --> 01:17:53.918
is changing here.

NOTE Confidence: 0.795659106

01:17:58.880 --> 01:18:00.000
The control flow is changing.

NOTE Confidence: 0.795659106

01:18:00.000 --> 01:18:03.680
It used to be try to insert everything,

NOTE Confidence: 0.795659106

01:18:03.680 --> 01:18:07.883
but if my first. Is equal to my last.

NOTE Confidence: 0.795659106

01:18:07.890 --> 01:18:10.530
Then I've run out of container space South.

NOTE Confidence: 0.795659106

01:18:10.530 --> 01:18:13.778
I need to inplace everything at the end.

NOTE Confidence: 0.795659106

01:18:13.780 --> 01:18:16.348
And then once we're finished consuming

NOTE Confidence: 0.795659106

01:18:16.348 --> 01:18:19.836
values, UM, if we're still not if we

NOTE Confidence: 0.795659106

01:18:19.836 --> 01:18:21.362
consume all the values from the input

NOTE Confidence: 0.795659106

01:18:21.362 --> 01:18:22.918
range without running out of space,

NOTE Confidence: 0.795659106

01:18:22.920 --> 01:18:24.792
the container we need to cauterize

NOTE Confidence: 0.795659106

01:18:24.792 --> 01:18:26.660
the container and chop off any

NOTE Confidence: 0.795659106

01:18:26.660 --> 01:18:28.065
elements that we don't want.

NOTE Confidence: 0.795659106

01:18:28.070 --> 01:18:29.894
So that's why the erase last is here.

NOTE Confidence: 0.795659106

01:18:29.900 --> 01:18:31.480
This is now being inverted,

NOTE Confidence: 0.795659106

01:18:31.480 --> 01:18:33.090
so there is a significant

NOTE Confidence: 0.795659106

01:18:33.090 --> 01:18:34.056
control flow transformation.

NOTE Confidence: 0.795659106

01:18:34.060 --> 01:18:34.996
I have no objection to this,

NOTE Confidence: 0.795659106

01:18:35.000 --> 01:18:37.034
but I want to make sure that I reviewed

NOTE Confidence: 0.795659106

01:18:37.034 --> 01:18:38.898
carefully, because this is where bugs occur.

NOTE Confidence: 0.795659106

01:18:38.900 --> 01:18:42.588
It's so easy to mess up control flow.

NOTE Confidence: 0.795659106

01:18:42.590 --> 01:18:45.670
So here as we iterate,

NOTE Confidence: 0.795659106

01:18:45.670 --> 01:18:49.406
if we run out of elements to consume.

NOTE Confidence: 0.795659106

01:18:49.410 --> 01:18:51.228
Ohh and what's interesting is actually

NOTE Confidence: 0.795659106

01:18:51.228 --> 01:18:53.150
iterating over elements in the container,

NOTE Confidence: 0.795659106

01:18:53.150 --> 01:18:54.526
not elements to consume.

NOTE Confidence: 0.795659106

01:18:54.526 --> 01:18:57.682
So that's why this is being transformed OK,

NOTE Confidence: 0.795659106

01:18:57.682 --> 01:18:58.850
and so this comment.

NOTE Confidence: 0.795659106

01:18:58.850 --> 01:19:01.346
These comments are good, reuse existing

NOTE Confidence: 0.795659106

01:19:01.346 --> 01:19:03.010
elements versus allocating elements.

NOTE Confidence: 0.795659106

01:19:03.010 --> 01:19:04.306
I'll double check that.

NOTE Confidence: 0.795659106

01:19:04.306 --> 01:19:06.845
OK, so same philosophy, but everything

NOTE Confidence: 0.795659106

01:19:06.845 --> 01:19:09.670
is being sort of flipped around,

NOTE Confidence: 0.795659106

01:19:09.670 --> 01:19:12.274
and the overall result is about as long,

NOTE Confidence: 0.795659106

01:19:12.274 --> 01:19:12.946
maybe a little bit.

NOTE Confidence: 0.795659106

01:19:12.950 --> 01:19:15.920
Sure, so four we've already initialized.

NOTE Confidence: 0.795659106

01:19:15.920 --> 01:19:18.840
As long as my first my own container

NOTE Confidence: 0.795659106

01:19:18.840 --> 01:19:21.360
first is not equal to my last.

NOTE Confidence: 0.795659106

01:19:21.360 --> 01:19:22.720
And then as we proceed,

NOTE Confidence: 0.795659106

01:19:22.720 --> 01:19:24.040
we're going to increment my first,

NOTE Confidence: 0.795659106

01:19:24.040 --> 01:19:25.984
so we're looking at every spot

NOTE Confidence: 0.795659106

01:19:25.984 --> 01:19:27.280
in our existing container.

NOTE Confidence: 0.795659106

01:19:27.280 --> 01:19:29.877
As long as we have existing elements,

NOTE Confidence: 0.795659106

01:19:29.880 --> 01:19:30.855
we're going to increment my

NOTE Confidence: 0.795659106

01:19:30.855 --> 01:19:32.120
first look at a new value,

NOTE Confidence: 0.795659106

01:19:32.120 --> 01:19:33.686
and we're going to increment first,

NOTE Confidence: 0.795659106

01:19:33.690 --> 01:19:34.986
which is the thing that we're

NOTE Confidence: 0.795659106

01:19:34.986 --> 01:19:36.140
consuming from the input range,

NOTE Confidence: 0.795659106

01:19:36.140 --> 01:19:38.850
and we want to put a void cast in there

NOTE Confidence: 0.795659106

01:19:38.924 --> 01:19:41.359
to avoid overloaded operator comma.

NOTE Confidence: 0.795659106

01:19:41.360 --> 01:19:43.285
So we know that we have elements

NOTE Confidence: 0.795659106

01:19:43.285 --> 01:19:44.110
in the container,

NOTE Confidence: 0.795659106

01:19:44.110 --> 01:19:45.540
because that's our loop condition.

NOTE Confidence: 0.795659106

01:19:45.540 --> 01:19:48.186
But if we run out of elements from the

NOTE Confidence: 0.795659106

01:19:48.186 --> 01:19:52.220
source range first equals last, then.

NOTE Confidence: 0.795659106

01:19:52.220 --> 01:19:53.636
This is the cauterization step where

NOTE Confidence: 0.795659106

01:19:53.636 --> 01:19:55.220
we have extra elements that container.

NOTE Confidence: 0.795659106

01:19:55.220 --> 01:19:57.299
Potentially we should get rid of them,

NOTE Confidence: 0.795659106

01:19:57.300 --> 01:19:59.850
so we're gonna call erase last

NOTE Confidence: 0.795659106

01:19:59.850 --> 01:20:02.299
end static size type my last,

NOTE Confidence: 0.795659106

01:20:02.300 --> 01:20:05.855
minus my first because we've

NOTE Confidence: 0.795659106

01:20:05.855 --> 01:20:07.988
incremented my first.

NOTE Confidence: 0.795659106

01:20:07.990 --> 01:20:10.141
So my last minus my first is the remaining

NOTE Confidence: 0.795659106

01:20:10.141 --> 01:20:12.196
number of elements, so this is correct.

NOTE Confidence: 0.795659106

01:20:12.196 --> 01:20:13.078
It's still correct.

NOTE Confidence: 0.795659106

01:20:13.080 --> 01:20:15.330
After doing that we should return.

NOTE Confidence: 0.795659106

01:20:15.330 --> 01:20:16.908
But if we have not returned,

NOTE Confidence: 0.795659106

01:20:16.910 --> 01:20:18.750
then we have an element in the container.

NOTE Confidence: 0.795659106

01:20:18.750 --> 01:20:20.794
We have an element in the source

NOTE Confidence: 0.795659106

01:20:20.794 --> 01:20:22.529
range we should assign to it.

NOTE Confidence: 0.795659106

01:20:22.530 --> 01:20:23.946
Do our first, assign that to.

NOTE Confidence: 0.795659106

01:20:23.950 --> 01:20:24.734
Do our my first,

NOTE Confidence: 0.795659106

01:20:24.734 --> 01:20:25.910
then we're going to increment both,

NOTE Confidence: 0.795659106

01:20:25.910 --> 01:20:26.870
so that's good.

NOTE Confidence: 0.795659106

01:20:26.870 --> 01:20:28.150
This is very structured.

NOTE Confidence: 0.795659106

01:20:28.150 --> 01:20:29.482
I like it.

NOTE Confidence: 0.795659106

01:20:29.482 --> 01:20:31.279
And then if we have.

NOTE Confidence: 0.795659106

01:20:31.279 --> 01:20:32.794
Used all the existing elements

NOTE Confidence: 0.795659106

01:20:32.794 --> 01:20:35.204
in the container and we have not

NOTE Confidence: 0.795659106

01:20:35.204 --> 01:20:36.939
yet exhausted the input range.

NOTE Confidence: 0.795659106

01:20:36.940 --> 01:20:39.292
Then we need to allocate new elements

NOTE Confidence: 0.795659106

01:20:39.292 --> 01:20:40.969
for remaining tail of values.

NOTE Confidence: 0.852113595

01:20:43.450 --> 01:20:44.620
This is fine.

NOTE Confidence: 0.852113595

01:20:44.620 --> 01:20:45.790
Allocate new elements.

NOTE Confidence: 0.852113595

01:20:45.790 --> 01:20:47.220
It kind of implies there's

NOTE Confidence: 0.852113595

01:20:47.220 --> 01:20:48.364
an allocation in deck.

NOTE Confidence: 0.852113595

01:20:48.370 --> 01:20:49.574
There generally is every

NOTE Confidence: 0.852113595

01:20:49.574 --> 01:20:50.778
16 elements or less.

NOTE Confidence: 0.85692909

01:20:53.330 --> 01:20:55.218
This is fine. I don't think it's confusing.

NOTE Confidence: 0.717821178571429

01:20:57.590 --> 01:20:59.970
If if this function we're concerned with,

NOTE Confidence: 0.717821178571429

01:20:59.970 --> 01:21:01.278
like memory allocation directly,

NOTE Confidence: 0.717821178571429

01:21:01.278 --> 01:21:03.240
I would want comments that distinguish

NOTE Confidence: 0.717821178571429

01:21:03.289 --> 01:21:04.809
when we're allocating versus not,

NOTE Confidence: 0.717821178571429

01:21:04.810 --> 01:21:06.469
but this is clearly implying an allocation

NOTE Confidence: 0.717821178571429

01:21:06.469 --> 01:21:08.654
some of the time, so this is fine.

NOTE Confidence: 0.717821178571429

01:21:08.654 --> 01:21:10.460
So for now we're gonna consume

NOTE Confidence: 0.717821178571429

01:21:10.524 --> 01:21:12.828
elements from the input range first,

NOTE Confidence: 0.717821178571429

01:21:12.830 --> 01:21:14.334
Nyquil, last, increment first,

NOTE Confidence: 0.717821178571429

01:21:14.334 --> 01:21:16.590
then just in place back internal,

NOTE Confidence: 0.717821178571429

01:21:16.590 --> 01:21:18.042
and we've already orphaned.

NOTE Confidence: 0.717821178571429

01:21:18.042 --> 01:21:19.857
So this avoids extra orphaning.

NOTE Confidence: 0.717821178571429

01:21:19.860 --> 01:21:20.664
That's good.

NOTE Confidence: 0.717821178571429

01:21:20.664 --> 01:21:23.478
OK, so now go to public template.

NOTE Confidence: 0.717821178571429

01:21:23.480 --> 01:21:25.265
This is the existing ITER

NOTE Confidence: 0.717821178571429

01:21:25.265 --> 01:21:27.050
need to enable if iterator.

NOTE Confidence: 0.717821178571429

01:21:27.050 --> 01:21:30.333
This prevents ambiguity with a sign like

NOTE Confidence: 0.717821178571429

01:21:30.333 --> 01:21:33.050
and copies of VUM so sign for slash,

NOTE Confidence: 0.717821178571429

01:21:33.050 --> 01:21:34.450
verify the range, unwrap them,

NOTE Confidence: 0.717821178571429

01:21:34.450 --> 01:21:36.874
good if Jeff split containers ranges

NOTE Confidence: 0.717821178571429

01:21:36.874 --> 01:21:39.021
endif assign range is constrained

NOTE Confidence: 0.717821178571429

01:21:39.021 --> 01:21:41.769
call you begin UN no verification.

NOTE Confidence: 0.717821178571429

01:21:41.770 --> 01:21:44.650
OK, and now.

NOTE Confidence: 0.717821178571429

01:21:44.650 --> 01:21:46.158
Insert looks like it's

NOTE Confidence: 0.717821178571429

01:21:46.158 --> 01:21:47.666
getting refactored as well.

NOTE Confidence: 0.717821178571429

01:21:47.670 --> 01:21:49.962
We now have an enum class

NOTE Confidence: 0.717821178571429

01:21:49.962 --> 01:21:52.170
is bytyqi backed by a bull.

NOTE Confidence: 0.717821178571429

01:21:52.170 --> 01:21:54.160
Defaults to no one, yes.

NOTE Confidence: 0.717821178571429

01:21:54.160 --> 01:21:55.260
No, should be fine now.

NOTE Confidence: 0.717821178571429

01:21:55.260 --> 01:21:56.716
We used to have a problem with macros,

NOTE Confidence: 0.717821178571429

01:21:56.720 --> 01:21:58.350
which is why the STL

NOTE Confidence: 0.717821178571429

01:21:58.350 --> 01:21:59.980
currently says Nope and yes,

NOTE Confidence: 0.717821178571429

01:21:59.980 --> 01:22:02.020
but that problem was fixed in

NOTE Confidence: 0.717821178571429

01:22:02.020 --> 01:22:03.380
an unrelated project upstream,

NOTE Confidence: 0.717821178571429

01:22:03.380 --> 01:22:06.854
so we should be able to say no again.

NOTE Confidence: 0.717821178571429

01:22:06.860 --> 01:22:09.534
So this is being generalized to handle.

NOTE Confidence: 0.717821178571429

01:22:09.540 --> 01:22:11.028
Iterator and arbitrary Sentinel.

NOTE Confidence: 0.717821178571429

01:22:11.028 --> 01:22:14.350
But we also need to be told is by dye.

NOTE Confidence: 0.717821178571429

01:22:14.350 --> 01:22:17.857
Because we've got if constexpr down here.

NOTE Confidence: 0.717821178571429

01:22:17.860 --> 01:22:20.464
OK, and we've already seen the requirement

NOTE Confidence: 0.717821178571429

01:22:20.470 --> 01:22:23.406
in the global wording about needing to swap,

NOTE Confidence: 0.717821178571429

01:22:23.406 --> 01:22:25.560
so I don't think we need to double

NOTE Confidence: 0.717821178571429

01:22:25.560 --> 01:22:29.438
check that here, so this is still.

NOTE Confidence: 0.717821178571429

01:22:29.438 --> 01:22:30.900
Well, let's see,

NOTE Confidence: 0.717821178571429

01:22:30.900 --> 01:22:33.120
are we still doing private helpers?

NOTE Confidence: 0.717821178571429

01:22:33.120 --> 01:22:36.025
Yes. OK, so we're in private here.

NOTE Confidence: 0.4729793777

01:22:38.340 --> 01:22:40.324
So template is bite.

NOTE Confidence: 0.4729793777

01:22:40.324 --> 01:22:42.804
I intercement turn iterator insert

NOTE Confidence: 0.4729793777

01:22:42.804 --> 01:22:45.478
range and instead of taking where we're

NOTE Confidence: 0.4729793777

01:22:45.478 --> 01:22:48.210
going to say off an offset concise

NOTE Confidence: 0.4729793777

01:22:48.210 --> 01:22:51.010
type off and then interfere set last.

NOTE Confidence: 0.4729793777

01:22:51.010 --> 01:22:55.427
It is interesting that last is modifiable.

NOTE Confidence: 0.4729793777

01:22:55.430 --> 01:22:57.638
Everywhere else last has been consed.

NOTE Confidence: 0.902118433333333

01:23:00.000 --> 01:23:00.930
Are we modifying?

NOTE Confidence: 0.769873835

01:23:03.770 --> 01:23:05.570
Last comment, use it.

NOTE Confidence: 0.769873835

01:23:05.570 --> 01:23:08.282
Use it. Oh, we decrement OK,

NOTE Confidence: 0.769873835

01:23:08.282 --> 01:23:11.000
so we do actually need to.

NOTE Confidence: 0.769873835

01:23:11.000 --> 01:23:12.120
So that's why it's modifiable.

NOTE Confidence: 0.769873835

01:23:12.120 --> 01:23:13.760
That's good.

NOTE Confidence: 0.769873835

01:23:13.760 --> 01:23:15.512
This is a good consequence of

NOTE Confidence: 0.769873835

01:23:15.512 --> 01:23:16.680
consistently marking value parameters.

NOTE Confidence: 0.769873835

01:23:16.680 --> 01:23:17.860
This constitutes when they're not.

NOTE Confidence: 0.769873835

01:23:17.860 --> 01:23:20.076
That indicates getting modified.

NOTE Confidence: 0.769873835

01:23:20.076 --> 01:23:21.738
Insert inclusive first,

NOTE Confidence: 0.769873835

01:23:21.740 --> 01:23:26.017
last exclusive at begin, plus off OK.

NOTE Confidence: 0.769873835

01:23:26.020 --> 01:23:28.366
Uhm, so the comments has changed.

NOTE Confidence: 0.769873835

01:23:28.370 --> 01:23:31.570
We already have off, UM.

NOTE Confidence: 0.769873835

01:23:31.570 --> 01:23:34.095
We still want that iterator

NOTE Confidence: 0.769873835

01:23:34.095 --> 01:23:35.610
debug global check.

NOTE Confidence: 0.769873835

01:23:35.610 --> 01:23:38.970
Get hot resetting, Umm, comments good.

NOTE Confidence: 0.769873835

01:23:38.970 --> 01:23:41.350
We've calculated off got the ideal check.

NOTE Confidence: 0.769873835

01:23:41.350 --> 01:23:44.132
We don't need a deal verify because we're

NOTE Confidence: 0.769873835

01:23:44.132 --> 01:23:46.037
gonna assume everybody's on ramped.

NOTE Confidence: 0.769873835

01:23:46.040 --> 01:23:46.415
Umm?

NOTE Confidence: 0.769873835

01:23:46.415 --> 01:23:49.790
But we do want to see if we're going

NOTE Confidence: 0.769873835

01:23:49.885 --> 01:23:53.084
to insert nothing if first is last.

NOTE Confidence: 0.769873835

01:23:53.090 --> 01:23:55.386
Then presumably this protects

NOTE Confidence: 0.769873835

01:23:55.386 --> 01:23:58.830
something below that would be wrong.

NOTE Confidence: 0.769873835

01:23:58.830 --> 01:24:00.979
Also we do skip orphaning so first

NOTE Confidence: 0.769873835

01:24:00.979 --> 01:24:02.994
is last you're asking us to do

NOTE Confidence: 0.769873835

01:24:02.994 --> 01:24:05.031
nothing so we can form an iterator

NOTE Confidence: 0.769873835

01:24:05.031 --> 01:24:07.186
return begin plus Statcast difference

NOTE Confidence: 0.769873835

01:24:07.186 --> 01:24:09.790
type off OK because if you insert

NOTE Confidence: 0.769873835

01:24:09.790 --> 01:24:11.530
nothing you haven't invalidated so.

NOTE Confidence: 0.769873835

01:24:11.530 --> 01:24:14.950
That seems fine, so no verification.

NOTE Confidence: 0.769873835

01:24:14.950 --> 01:24:17.478
Early exit old size can now be confused.

NOTE Confidence: 0.769873835

01:24:17.480 --> 01:24:18.468
That's good.

NOTE Confidence: 0.769873835

01:24:18.468 --> 01:24:19.950
Do orphan all.

NOTE Confidence: 0.769873835

01:24:19.950 --> 01:24:21.749
If off is less than old size

NOTE Confidence: 0.769873835

01:24:21.749 --> 01:24:23.030
because we've captured old size,

NOTE Confidence: 0.769873835

01:24:23.030 --> 01:24:24.246
so this is actually just a straight up.

NOTE Confidence: 0.769873835

01:24:24.250 --> 01:24:25.750
Umm, clean up slash improvement.

NOTE Confidence: 0.769873835

01:24:25.750 --> 01:24:28.396
Why call my size again when we have old

NOTE Confidence: 0.769873835

01:24:28.396 --> 01:24:31.486
size close to front push and rotate?

NOTE Confidence: 0.769873835

01:24:31.490 --> 01:24:33.698
Ah, but there's an improvement here.

NOTE Confidence: 0.769873835

01:24:33.700 --> 01:24:36.150
Previously, we would always in

NOTE Confidence: 0.769873835

01:24:36.150 --> 01:24:38.411
place front and then reverse,

NOTE Confidence: 0.769873835

01:24:38.411 --> 01:24:41.716
and now Casey is using our magical

NOTE Confidence: 0.769873835

01:24:41.716 --> 01:24:45.214
powers if constexpr to avoid that.

NOTE Confidence: 0.769873835

01:24:45.220 --> 01:24:47.194
At the end, we'll do the flip.

NOTE Confidence: 0.769873835

01:24:47.200 --> 01:24:48.228
OK, this is good.

NOTE Confidence: 0.769873835

01:24:48.228 --> 01:24:49.256
This is actually improving.

NOTE Confidence: 0.769873835

01:24:49.260 --> 01:24:49.595
Interestingly,

NOTE Confidence: 0.769873835

01:24:49.595 --> 01:24:51.940
it's improving the behavior of existing code,

NOTE Confidence: 0.769873835

01:24:51.940 --> 01:24:52.970
and for a common case,

NOTE Confidence: 0.769873835

01:24:52.970 --> 01:24:54.839
because biday iterator is the most common,

NOTE Confidence: 0.769873835

01:24:54.840 --> 01:24:56.480
because the random access and

NOTE Confidence: 0.769873835

01:24:56.480 --> 01:24:57.954
pointers are also bidding.

NOTE Confidence: 0.769873835

01:24:57.954 --> 01:25:00.396
If constexpr bidi equals is bidi,

NOTE Confidence: 0.769873835

01:25:00.400 --> 01:25:00.788
yes,

NOTE Confidence: 0.769873835

01:25:00.788 --> 01:25:03.892
this is the advantage of having a named

NOTE Confidence: 0.769873835

01:25:03.892 --> 01:25:06.896
enum class consume all the elements in place.

NOTE Confidence: 0.769873835

01:25:06.900 --> 01:25:08.216
Front internal.

NOTE Confidence: 0.769873835

01:25:08.216 --> 01:25:10.190
Dref redeck last,

NOTE Confidence: 0.769873835

01:25:10.190 --> 01:25:12.325
so that's going to look at every

NOTE Confidence: 0.769873835

01:25:12.325 --> 01:25:13.800
actual element prepend in order.

NOTE Confidence: 0.6921591575

01:25:17.750 --> 01:25:20.025
Yes, because. By Prepending from

NOTE Confidence: 0.6921591575

01:25:20.025 --> 01:25:23.149
last they they end up in order.

NOTE Confidence: 0.6921591575

01:25:23.150 --> 01:25:24.260
I'm trying to make sure the

NOTE Confidence: 0.6921591575

01:25:24.260 --> 01:25:24.815
comments aren't flipped.

NOTE Confidence: 0.6921591575

01:25:24.820 --> 01:25:26.476
Otherwise if you're not by dye,

NOTE Confidence: 0.6921591575

01:25:26.480 --> 01:25:28.412
then you just need to in lace

NOTE Confidence: 0.6921591575

01:25:28.412 --> 01:25:29.640
front starting from first,

NOTE Confidence: 0.6921591575

01:25:29.640 --> 01:25:31.695
but it ends up flipping

NOTE Confidence: 0.6921591575

01:25:31.695 --> 01:25:33.339
the order of elements.

NOTE Confidence: 0.6921591575

01:25:33.340 --> 01:25:36.606
OK. And then.

NOTE Confidence: 0.6921591575

01:25:36.606 --> 01:25:39.474
Here we have at least attached

NOTE Confidence: 0.6921591575

01:25:39.474 --> 01:25:41.430
all the elements,

NOTE Confidence: 0.6921591575

01:25:41.430 --> 01:25:43.270
so we nod the guard.

NOTE Confidence: 0.861495497857143

01:25:46.010 --> 01:25:47.704
It is interesting that we decide to

NOTE Confidence: 0.861495497857143

01:25:47.704 --> 01:25:49.719
do this and then we start reversing.

NOTE Confidence: 0.861495497857143

01:25:49.720 --> 01:25:52.464
I assume that swapping is required to be.

NOTE Confidence: 0.76160297

01:25:54.570 --> 01:25:57.366
All these swap they don't assign.

NOTE Confidence: 0.76160297

01:25:57.370 --> 01:25:59.629
So these this is actually no throw down here.

NOTE Confidence: 0.76160297

01:25:59.630 --> 01:26:01.275
I was wondering what happens if you

NOTE Confidence: 0.76160297

01:26:01.275 --> 01:26:02.610
successfully in place all the stuff,

NOTE Confidence: 0.76160297

01:26:02.610 --> 01:26:04.506
but then an exception is thrown.

NOTE Confidence: 0.76160297

01:26:04.510 --> 01:26:06.330
I don't think we have to worry about that and

NOTE Confidence: 0.76160297

01:26:06.373 --> 01:26:10.130
certainly the existing code wasn't OK, so.

NOTE Confidence: 0.76160297

01:26:10.130 --> 01:26:11.600
We calculate NUM.

NOTE Confidence: 0.76160297

01:26:11.600 --> 01:26:14.050
Why do we need numb?

NOTE Confidence: 0.76160297

01:26:14.050 --> 01:26:15.570
We need from mid.

NOTE Confidence: 0.76160297

01:26:15.570 --> 01:26:17.442
We definitely always excuse me.

NOTE Confidence: 0.76160297

01:26:17.442 --> 01:26:18.906
We always need that.

NOTE Confidence: 0.76160297

01:26:18.910 --> 01:26:23.790
We're doing insert range OK so.

NOTE Confidence: 0.76160297

01:26:23.790 --> 01:26:25.958
Uh, this is now going to be auto

NOTE Confidence: 0.76160297

01:26:25.958 --> 01:26:27.849
because this could be some arbitrary

NOTE Confidence: 0.76160297

01:26:27.849 --> 01:26:29.769
sort of size type like thing.

NOTE Confidence: 0.76160297

01:26:29.770 --> 01:26:32.560
Consolato NUM is static cast difference

NOTE Confidence: 0.76160297

01:26:32.560 --> 01:26:35.650
type my size minus old size consolato my

NOTE Confidence: 0.76160297

01:26:35.650 --> 01:26:37.150
first is unchecked again because we're

NOTE Confidence: 0.76160297

01:26:37.150 --> 01:26:38.610
not working with iterators anymore.

NOTE Confidence: 0.76160297

01:26:38.610 --> 01:26:40.690
We started with offset.

NOTE Confidence: 0.76160297

01:26:40.690 --> 01:26:42.398
OK so NUM is.

NOTE Confidence: 0.76160297

01:26:42.398 --> 01:26:44.106
The number of elements.

NOTE Confidence: 0.76160297

01:26:44.110 --> 01:26:46.470
My current size minus old size that we

NOTE Confidence: 0.76160297

01:26:46.470 --> 01:26:49.375
just in placed my first is unchecked again.

NOTE Confidence: 0.76160297

01:26:49.380 --> 01:26:51.970
My mid is my first plus NUM.

NOTE Confidence: 0.76160297

01:26:51.970 --> 01:26:54.340
If we are dealing with non

NOTE Confidence: 0.76160297

01:26:54.340 --> 01:26:56.341
bidirectional iterators then we need

NOTE Confidence: 0.76160297

01:26:56.341 --> 01:26:58.423
to reverse stuff so stud reverse

NOTE Confidence: 0.76160297

01:26:58.423 --> 01:27:01.071
from my first to my mid so our

NOTE Confidence: 0.76160297

01:27:01.071 --> 01:27:02.996
current beginning to the end of the

NOTE Confidence: 0.76160297

01:27:02.996 --> 01:27:04.347
new elements we need to flip them.

NOTE Confidence: 0.76160297

01:27:04.350 --> 01:27:06.708
So that's right.

NOTE Confidence: 0.76160297

01:27:06.710 --> 01:27:07.258
And then.

NOTE Confidence: 0.76160297

01:27:07.258 --> 01:27:08.902
Now that we've got the right

NOTE Confidence: 0.76160297

01:27:08.902 --> 01:27:10.615
elements place we need to do a

NOTE Confidence: 0.76160297

01:27:10.615 --> 01:27:12.358
rotate to actually get them to the

NOTE Confidence: 0.76160297

01:27:12.358 --> 01:27:13.798
right position given the offset.

NOTE Confidence: 0.76160297

01:27:13.800 --> 01:27:14.840
So that's the stud rotate,

NOTE Confidence: 0.76160297

01:27:14.840 --> 01:27:17.568
which we were always doing before my first,

NOTE Confidence: 0.76160297

01:27:17.570 --> 01:27:19.838
my mid my mid plus off these are unchecked.

NOTE Confidence: 0.76160297

01:27:19.840 --> 01:27:21.506
So here Casey is using unchecked iterator.

NOTE Confidence: 0.76160297

01:27:21.510 --> 01:27:22.560
So that's also an improvement

NOTE Confidence: 0.76160297

01:27:22.560 --> 01:27:24.026
compared to the oh this is this

NOTE Confidence: 0.76160297

01:27:24.026 --> 01:27:25.130
is the some of the president.

NOTE Confidence: 0.76160297

01:27:25.130 --> 01:27:26.061
I was looking at was like oh

NOTE Confidence: 0.76160297

01:27:26.061 --> 01:27:26.800
there's a bunch of begins.

NOTE Confidence: 0.76160297

01:27:26.800 --> 01:27:28.780
Well, they're actually turning into unchecks,

NOTE Confidence: 0.76160297

01:27:28.780 --> 01:27:29.430
so.

NOTE Confidence: 0.777649305

01:27:31.830 --> 01:27:35.720
There actually is some down here. Hi Michael,

NOTE Confidence: 0.777649305

01:27:35.720 --> 01:27:38.590
Michael back and edit that comment UM.

NOTE Confidence: 0.777649305

01:27:38.590 --> 01:27:40.254
Because it's sort of a semi global thing.

NOTE Confidence: 0.832722975714286

01:27:44.670 --> 01:27:46.098
This one certainly doesn't need to change.

NOTE Confidence: 0.832722975714286

01:27:46.100 --> 01:27:48.341
I'll maybe just comment this one, uh,

NOTE Confidence: 0.832722975714286

01:27:48.341 --> 01:27:51.047
because that's the only other case.

NOTE Confidence: 0.832722975714286

01:27:51.050 --> 01:27:53.438
I'll look at this in a SEC so stood

NOTE Confidence: 0.832722975714286

01:27:53.438 --> 01:27:56.910
to rotate from my first to my mid.

NOTE Confidence: 0.832722975714286

01:27:56.910 --> 01:27:58.464
It needs to go to my Microsoft.

NOTE Confidence: 0.832722975714286

01:27:58.470 --> 01:28:00.080
OK that's good and then

NOTE Confidence: 0.832722975714286

01:28:00.080 --> 01:28:01.368
synthesize the return iterator.

NOTE Confidence: 0.832722975714286

01:28:01.370 --> 01:28:03.070
OK, So what was this?

NOTE Confidence: 0.832722975714286

01:28:03.070 --> 01:28:04.435
This is if it's close to front,

NOTE Confidence: 0.832722975714286

01:28:04.440 --> 01:28:05.430
push to front, then rotate.

NOTE Confidence: 0.832722975714286

01:28:05.430 --> 01:28:08.300
Otherwise this is the opposite.

NOTE Confidence: 0.832722975714286

01:28:08.300 --> 01:28:09.316
Restore back.

NOTE Confidence: 0.832722975714286

01:28:09.316 --> 01:28:12.364
For, the iterators aren't checked here,

NOTE Confidence: 0.832722975714286

01:28:12.370 --> 01:28:14.510
I'm comparing first or before

NOTE Confidence: 0.832722975714286

01:28:14.510 --> 01:28:16.930
to after OK the rotate.

NOTE Confidence: 0.832722975714286

01:28:16.930 --> 01:28:20.320
This is just getting horribly reformatted.

NOTE Confidence: 0.832722975714286

01:28:20.320 --> 01:28:22.768
Began OK, so this code is really not

NOTE Confidence: 0.832722975714286

01:28:22.768 --> 01:28:24.824
changing at all and then return off.

NOTE Confidence: 0.832722975714286

01:28:24.824 --> 01:28:25.730
OK, that's good.

NOTE Confidence: 0.832722975714286

01:28:25.730 --> 01:28:28.170
I was going to check to see how

NOTE Confidence: 0.832722975714286

01:28:28.241 --> 01:28:30.455
many other begin uses there are.

NOTE Confidence: 0.832722975714286

01:28:30.460 --> 01:28:33.346
Comment return unchecked.

NOTE Confidence: 0.832722975714286

01:28:33.346 --> 01:28:35.270
Begin return.

NOTE Confidence: 0.832722975714286

01:28:35.270 --> 01:28:38.168
This is the one that's gratuitous return.

NOTE Confidence: 0.832722975714286

01:28:38.170 --> 01:28:42.820
Umm, I'll comment on this.

NOTE Confidence: 0.832722975714286

01:28:42.820 --> 01:28:48.847
I observe that these could also use.

NOTE Confidence: 0.832722975714286

01:28:48.850 --> 01:28:50.176
Unchecked begin.

NOTE Confidence: 0.832722975714286

01:28:50.176 --> 01:28:56.088
As the rest of the function is being.

NOTE Confidence: 0.832722975714286

01:28:56.088 --> 01:28:58.980
Improved like that.

NOTE Confidence: 0.832722975714286

01:28:58.980 --> 01:29:00.758
I observed that these could also use

NOTE Confidence: 0.832722975714286

01:29:00.758 --> 01:29:02.554
unchecked begin as the rest of the

NOTE Confidence: 0.832722975714286

01:29:02.554 --> 01:29:04.024
function is being improved like that.

NOTE Confidence: 0.832722975714286

01:29:04.030 --> 01:29:06.172
And here we just don't happen to

NOTE Confidence: 0.832722975714286

01:29:06.172 --> 01:29:08.078
have unchecked to begin out here.

NOTE Confidence: 0.832722975714286

01:29:08.080 --> 01:29:09.880
We could actually lift this up.

NOTE Confidence: 0.832722975714286

01:29:09.880 --> 01:29:11.252
Oh no, we couldn't.

NOTE Confidence: 0.832722975714286

01:29:11.252 --> 01:29:14.385
We needed to have it after we've been

NOTE Confidence: 0.832722975714286

01:29:14.385 --> 01:29:16.885
placed otherwise we get invalidated.

NOTE Confidence: 0.832722975714286

01:29:16.890 --> 01:29:18.786
But we could just call and check again,

NOTE Confidence: 0.832722975714286

01:29:18.790 --> 01:29:20.790
or case he could lift it out here.

NOTE Confidence: 0.832722975714286

01:29:20.790 --> 01:29:23.880
OK, so I had a comment.

NOTE Confidence: 0.832722975714286

01:29:23.880 --> 01:29:25.330
OK.

NOTE Confidence: 0.832722975714286

01:29:25.330 --> 01:29:27.138
And then simple extraction

NOTE Confidence: 0.832722975714286

01:29:27.138 --> 01:29:29.850
here go to public template ITER

NOTE Confidence: 0.832722975714286

01:29:29.937 --> 01:29:32.667
constrain to be an actual iterator.

NOTE Confidence: 0.832722975714286

01:29:32.670 --> 01:29:35.918
Insert first last at where input iterators.

NOTE Confidence: 0.856280162222222

01:29:39.120 --> 01:29:41.620
This this comment used to

NOTE Confidence: 0.856280162222222

01:29:41.620 --> 01:29:44.630
exist when we had tag dispatch.

NOTE Confidence: 0.856280162222222

01:29:44.630 --> 01:29:47.155
Do we still need that?

NOTE Confidence: 0.856280162222222

01:29:47.160 --> 01:29:48.460
And we weren't dispatching here.

NOTE Confidence: 0.85625403

01:29:50.610 --> 01:29:52.626
I question whether we need input iterators.

NOTE Confidence: 0.770723282727273

01:29:59.830 --> 01:30:01.258
That's the only comment in this

NOTE Confidence: 0.770723282727273

01:30:01.258 --> 01:30:02.720
file that says input iterators.

NOTE Confidence: 0.6122769225

01:30:05.520 --> 01:30:06.908
Old code, old code.

NOTE Confidence: 0.842643955714286

01:30:09.030 --> 01:30:11.242
Yeah, this is the only new one. UM,

NOTE Confidence: 0.842643955714286

01:30:11.242 --> 01:30:14.858
I'll simply ask, do we still need the.

NOTE Confidence: 0.821142

01:30:17.460 --> 01:30:19.746
Input iterators comment.

NOTE Confidence: 0.821142

01:30:19.746 --> 01:30:24.057
Since we're not dispatching on.

NOTE Confidence: 0.821142

01:30:24.057 --> 01:30:27.828
Iterator. Strength. Here.

NOTE Confidence: 0.29836512

01:30:29.840 --> 01:30:30.180
Car.

NOTE Confidence: 0.462810695

01:30:32.480 --> 01:30:39.940
We're handling. My diness we're

NOTE Confidence: 0.462810695

01:30:39.940 --> 01:30:42.830
handling. High directionality,

NOTE Confidence: 0.462810695

01:30:42.830 --> 01:30:47.309
UM within the upper function, OK.

NOTE Confidence: 0.6795012

01:30:49.790 --> 01:30:50.870
I don't want to say comma.

NOTE Confidence: 0.6795012

01:30:50.870 --> 01:30:51.926
I wanna say comment part because

NOTE Confidence: 0.6795012

01:30:51.926 --> 01:30:53.270
I only want to talk about that.

NOTE Confidence: 0.6795012

01:30:53.270 --> 01:30:55.552
But do we still need the comment

NOTE Confidence: 0.6795012

01:30:55.552 --> 01:30:57.210
input iterators come into part.

NOTE Confidence: 0.6795012

01:30:57.210 --> 01:30:58.776
We're handling bidirectionality

NOTE Confidence: 0.6795012

01:30:58.776 --> 01:31:00.864
within the helper function.

NOTE Confidence: 0.6795012

01:31:00.870 --> 01:31:03.078
OK, so template iterator enable if

NOTE Confidence: 0.6795012

01:31:03.078 --> 01:31:04.933
iterator iterator insert counselor aware

NOTE Confidence: 0.6795012

01:31:04.933 --> 01:31:06.883
it first and last insert inclusive

NOTE Confidence: 0.6795012

01:31:06.883 --> 01:31:08.919
first last exclusive at where input

NOTE Confidence: 0.6795012

01:31:08.919 --> 01:31:10.584
iterators probably don't need that.

NOTE Confidence: 0.6795012

01:31:10.590 --> 01:31:13.187
Verify the range then we should unwrap.

NOTE Confidence: 0.648102499666667

01:31:15.420 --> 01:31:17.718
On size step off is static

NOTE Confidence: 0.648102499666667

01:31:17.718 --> 01:31:20.070
cast size type where which is.

NOTE Confidence: 0.648102499666667

01:31:20.070 --> 01:31:24.390
Regrettably, checked minus begin.

NOTE Confidence: 0.648102499666667

01:31:24.390 --> 01:31:27.318
Return. Insert range. Static cast.

NOTE Confidence: 0.648102499666667

01:31:27.318 --> 01:31:31.300
To is bite eye when does ohh I see

NOTE Confidence: 0.648102499666667

01:31:31.300 --> 01:31:34.360
is Biti interv is our helper to see.

NOTE Confidence: 0.648102499666667

01:31:34.360 --> 01:31:35.700
Are you Bidi iterator but

NOTE Confidence: 0.648102499666667

01:31:35.700 --> 01:31:37.040
we need an enum class.

NOTE Confidence: 0.648102499666667

01:31:37.040 --> 01:31:39.965
So we need a static cast that is byte.

NOTE Confidence: 0.648102499666667

01:31:39.970 --> 01:31:41.979
This assumes that his bite eye occurs

NOTE Confidence: 0.648102499666667

01:31:41.979 --> 01:31:44.274
in the order false true, and it does.

NOTE Confidence: 0.648102499666667

01:31:44.274 --> 01:31:45.266
It starts with no.

NOTE Confidence: 0.648102499666667

01:31:45.270 --> 01:31:46.230
It says no, and then yes,

NOTE Confidence: 0.648102499666667

01:31:46.230 --> 01:31:47.338
so false is zero.

NOTE Confidence: 0.648102499666667

01:31:47.338 --> 01:31:49.238
True is 1, so that's fine.

NOTE Confidence: 0.65410264

01:31:52.490 --> 01:31:56.810
So we can static cast. And then.

NOTE Confidence: 0.65410264

01:31:56.810 --> 01:31:59.666
Off getting wrap first get unwrap last.

NOTE Confidence: 0.65410264

01:31:59.670 --> 01:32:00.837
OK, that's good.

NOTE Confidence: 0.65410264

01:32:00.837 --> 01:32:03.171
If Dev cycle container ranges template

NOTE Confidence: 0.65410264

01:32:03.171 --> 01:32:05.510
on range iterator insert range.

NOTE Confidence: 0.65410264

01:32:05.510 --> 01:32:10.600
Consider aware Ranger for range. Umm?

NOTE Confidence: 0.65410264

01:32:10.600 --> 01:32:13.309
We don't have a parent check here.

NOTE Confidence: 0.65410264

01:32:13.310 --> 01:32:14.398
We don't have a.

NOTE Confidence: 0.65410264

01:32:14.398 --> 01:32:16.030
We have a parent check here.

NOTE Confidence: 0.65410264

01:32:16.030 --> 01:32:17.935
Ah OK, it's happening within

NOTE Confidence: 0.65410264

01:32:17.935 --> 01:32:19.078
the subtraction iterator.

NOTE Confidence: 0.65410264

01:32:19.080 --> 01:32:20.105
Subtraction will check that they

NOTE Confidence: 0.65410264

01:32:20.105 --> 01:32:21.130
belong to the same container,

NOTE Confidence: 0.65410264

01:32:21.130 --> 01:32:22.642
so we don't need an explicit parent

NOTE Confidence: 0.65410264

01:32:22.642 --> 01:32:26.520
to check for where, so that's good.

NOTE Confidence: 0.65410264

01:32:26.520 --> 01:32:28.320
OK, so where range still want

NOTE Confidence: 0.65410264

01:32:28.320 --> 01:32:29.820
to form concise type off?

NOTE Confidence: 0.65410264

01:32:29.820 --> 01:32:33.588
Same way if Constexpr bidirectional range.

NOTE Confidence: 0.65410264

01:32:33.590 --> 01:32:35.790
Then OK, we do need special cases here,

NOTE Confidence: 0.65410264

01:32:35.790 --> 01:32:37.310
because if you're bidirectional

NOTE Confidence: 0.65410264

01:32:37.310 --> 01:32:39.781
you can say insert. Yes, it's bite.

NOTE Confidence: 0.65410264

01:32:39.781 --> 01:32:43.023
I give the off range as you begin and

NOTE Confidence: 0.65410264

01:32:43.023 --> 01:32:45.849
then ranges get final iterator unwrapped.

NOTE Confidence: 0.65410264

01:32:45.850 --> 01:32:48.298
Because if it's bite I we want the

NOTE Confidence: 0.65410264

01:32:48.298 --> 01:32:51.037
so it's what Casey's doing here is

NOTE Confidence: 0.65410264

01:32:51.037 --> 01:32:53.450
if the range is bidirectional then

NOTE Confidence: 0.65410264

01:32:53.450 --> 01:32:55.746
what we want to pass is the actual

NOTE Confidence: 0.65410264

01:32:55.746 --> 01:32:57.845
final iterator to that past the end

NOTE Confidence: 0.65410264

01:32:57.845 --> 01:32:59.676
element that we can decrement even

NOTE Confidence: 0.65410264

01:32:59.676 --> 01:33:01.825
if the Sentinel with some other type.

NOTE Confidence: 0.65410264

01:33:01.830 --> 01:33:03.456
So that's what ranges get final

NOTE Confidence: 0.65410264

01:33:03.456 --> 01:33:04.774
iterator unwrapped, does and why.

NOTE Confidence: 0.65410264

01:33:04.774 --> 01:33:06.322
We're not simply saying you end,

NOTE Confidence: 0.65410264

01:33:06.330 --> 01:33:08.978
but if we're not then we can just

NOTE Confidence: 0.65410264

01:33:08.978 --> 01:33:11.230
pass the Sentinel unchecked.

NOTE Confidence: 0.65410264

01:33:11.230 --> 01:33:15.259
So. That is good.

NOTE Confidence: 0.65410264

01:33:15.260 --> 01:33:16.308
This occurs infrequently enough.

NOTE Confidence: 0.65410264

01:33:16.308 --> 01:33:17.880
I'm wondering should we have a

NOTE Confidence: 0.65410264

01:33:17.927 --> 01:33:19.257
function that just handles this,

NOTE Confidence: 0.65410264

01:33:19.260 --> 01:33:21.636
but this seems to occur infrequently

NOTE Confidence: 0.65410264

01:33:21.636 --> 01:33:23.640
enough that we don't need.

NOTE Confidence: 0.65410264

01:33:23.640 --> 01:33:25.776
A helper function to do that,

NOTE Confidence: 0.65410264

01:33:25.780 --> 01:33:27.236
and then the last change to this

NOTE Confidence: 0.65410264

01:33:27.236 --> 01:33:28.709
file if declic containers ranges,

NOTE Confidence: 0.65410264

01:33:28.710 --> 01:33:30.612
we got a deduction guide template

NOTE Confidence: 0.65410264

01:33:30.612 --> 01:33:31.880
on input range range.

NOTE Confidence: 0.65410264

01:33:31.880 --> 01:33:33.250
Class Alec is allocated for

NOTE Confidence: 0.65410264

01:33:33.250 --> 01:33:34.620
ranges range value T enable.

NOTE Confidence: 0.65410264

01:33:34.620 --> 01:33:37.132
If Alex got to look like an allocator

NOTE Confidence: 0.65410264

01:33:37.132 --> 01:33:39.299
deck from range T range ref ref.

NOTE Confidence: 0.65410264

01:33:39.300 --> 01:33:41.460
Alec is Alec front prend deduce

NOTE Confidence: 0.65410264

01:33:41.460 --> 01:33:44.431
range value T and the Alec Endif

NOTE Confidence: 0.65410264

01:33:44.431 --> 01:33:46.371
CPPIB containers ranges looks

NOTE Confidence: 0.65410264

01:33:46.371 --> 01:33:48.270
good conversation was this?

NOTE Confidence: 0.65410264

01:33:48.270 --> 01:33:50.526
Variable templates ohh yeah,

NOTE Confidence: 0.65410264

01:33:50.526 --> 01:33:53.830
we don't have an allocator VUM

NOTE Confidence: 0.65410264

01:33:53.830 --> 01:33:56.230
OK so that's DAC excellent.

NOTE Confidence: 0.65410264

01:33:56.230 --> 01:33:58.780
So we've got 7 more comments.

NOTE Confidence: 0.65410264

01:33:58.780 --> 01:33:59.929
Uh, let's see.

NOTE Confidence: 0.65410264

01:33:59.929 --> 01:34:03.479
I would want to actually mark that as viewed.

NOTE Confidence: 0.65410264

01:34:03.480 --> 01:34:05.010
Let's minimize everything.

NOTE Confidence: 0.65410264

01:34:05.010 --> 01:34:07.560
I do want to summarize,

NOTE Confidence: 0.65410264

01:34:07.560 --> 01:34:11.890
let me open up my editor because I.

NOTE Confidence: 0.65410264

01:34:11.890 --> 01:34:14.306
Was trying to remember what I had reviewed.

NOTE Confidence: 0.65410264

01:34:14.310 --> 01:34:19.638
Uhm, OK, so let's split this.

NOTE Confidence: 0.65410264

01:34:19.640 --> 01:34:20.175
OK,

NOTE Confidence: 0.65410264

01:34:20.175 --> 01:34:20.710
so.

NOTE Confidence: 0.9167895875

01:34:24.840 --> 01:34:28.810
I'm just going to. Record algorithm.

NOTE Confidence: 0.9167895875

01:34:28.810 --> 01:34:35.090
We've got deck. Poured list. List map.

NOTE Confidence: 0.24505466

01:34:37.390 --> 01:34:43.289
Sat unordered. Map and set.

NOTE Confidence: 0.24505466

01:34:43.289 --> 01:34:45.098
For unordered meows,

NOTE Confidence: 0.24505466

01:34:45.100 --> 01:34:48.496
I call them U MX hash.

NOTE Confidence: 0.24505466

01:34:48.500 --> 01:34:52.240
Xtree extra utility.

NOTE Confidence: 0.37776533

01:34:54.960 --> 01:34:56.688
5 Valves Core H.

NOTE Confidence: 0.8650715025

01:34:59.440 --> 01:35:01.768
None of the tasks.

NOTE Confidence: 0.8650715025

01:35:01.770 --> 01:35:06.216
And the feature just backwards does.

NOTE Confidence: 0.8650715025

01:35:06.220 --> 01:35:09.888
I'll just say feature test macros tests.

NOTE Confidence: 0.8650715025

01:35:09.890 --> 01:35:13.150
And for my own organization.

NOTE Confidence: 0.8650715025

01:35:13.150 --> 01:35:15.868
I will group these that is

NOTE Confidence: 0.8650715025

01:35:15.868 --> 01:35:18.419
extreme map set that's X hash.

NOTE Confidence: 0.8650715025

01:35:18.420 --> 01:35:19.608
You map you set.

NOTE Confidence: 0.95567524

01:35:25.980 --> 01:35:28.645
OK. Great.

NOTE Confidence: 0.95567524

01:35:28.645 --> 01:35:31.555
And I will submit this review.

NOTE Confidence: 0.95567524

01:35:31.560 --> 01:35:36.776
Another partial video review.

NOTE Confidence: 0.95567524

01:35:36.776 --> 01:35:41.440
Fee and more progress.

NOTE Confidence: 0.95567524

01:35:41.440 --> 01:35:44.380
I've reviewed. Blah.

NOTE Confidence: 0.744618189166667

01:35:46.480 --> 01:35:47.620
I should have marked down this.

NOTE Confidence: 0.744618189166667

01:35:47.620 --> 01:35:50.036
I can do this faster in VS code.

NOTE Confidence: 0.744618189166667

01:35:50.040 --> 01:35:53.298
I love multi multi cursor editing.

NOTE Confidence: 0.744618189166667

01:35:53.300 --> 01:35:56.340
Uhm, I won't bother, UM.

NOTE Confidence: 0.744618189166667

01:35:56.340 --> 01:35:58.125
Actually, some of these those

NOTE Confidence: 0.744618189166667

01:35:58.125 --> 01:36:00.250
underscores might be yeah, fine.

NOTE Confidence: 0.860607602

01:36:02.720 --> 01:36:05.750
I need to tell it that this is marked down.

NOTE Confidence: 0.860607602

01:36:05.750 --> 01:36:10.334
And I want to. I shift click now.

NOTE Confidence: 0.860607602

01:36:10.340 --> 01:36:11.994
Can I control click no? Not doubleclicking?

NOTE Confidence: 0.860607602

01:36:11.994 --> 01:36:13.896
Interesting, I'll just go like this.

NOTE Confidence: 0.518003338

01:36:22.180 --> 01:36:25.220
Tell. That was correct, OK?

NOTE Confidence: 0.66606484875

01:36:29.880 --> 01:36:31.228
Review another partial video

NOTE Confidence: 0.66606484875

01:36:31.228 --> 01:36:32.576
review and more progress.

NOTE Confidence: 0.66606484875

01:36:32.580 --> 01:36:35.094
I've reviewed all these headers and

NOTE Confidence: 0.66606484875

01:36:35.094 --> 01:36:37.800
then featured this macros tests comment.

NOTE Confidence: 0.66606484875

01:36:37.800 --> 01:36:39.370
OK. Hesitating only because I

NOTE Confidence: 0.66606484875

01:36:39.370 --> 01:36:41.880
know if I write a comment here,

NOTE Confidence: 0.66606484875

01:36:41.880 --> 01:36:43.410
this cannot be collapsed later,

NOTE Confidence: 0.66606484875

01:36:43.410 --> 01:36:44.196
but that's OK.

NOTE Confidence: 0.66606484875

01:36:44.196 --> 01:36:45.730
It's not too verbose, I'll comment.

NOTE Confidence: 0.903021938

01:36:50.380 --> 01:36:52.460
OK, So what we found.

NOTE Confidence: 0.903021938

01:36:52.460 --> 01:36:55.428
To summarize, we found some comments or

NOTE Confidence: 0.903021938

01:36:55.428 --> 01:36:58.412
some assertion messages that seem to be

NOTE Confidence: 0.903021938

01:36:58.412 --> 01:37:00.467
completely damaged during copy pasting.

NOTE Confidence: 0.903021938

01:37:00.470 --> 01:37:02.758
This one was the same sort of deal.

NOTE Confidence: 0.903021938

01:37:02.760 --> 01:37:05.070
We found signatures being added that

NOTE Confidence: 0.903021938

01:37:05.070 --> 01:37:07.640
are consistent with our implementation,

NOTE Confidence: 0.903021938

01:37:07.640 --> 01:37:09.410
but we really should update

NOTE Confidence: 0.903021938

01:37:09.410 --> 01:37:11.180
an LWG issue for it.

NOTE Confidence: 0.903021938

01:37:11.180 --> 01:37:13.098
We found that we could be calling

NOTE Confidence: 0.903021938

01:37:13.098 --> 01:37:15.077
unchecked begin in a couple more places.

NOTE Confidence: 0.903021938

01:37:15.080 --> 01:37:16.220
We found a wording defect

NOTE Confidence: 0.903021938

01:37:16.220 --> 01:37:17.132
in the standard itself,

NOTE Confidence: 0.903021938

01:37:17.140 --> 01:37:19.149
saying that elements need to be required

NOTE Confidence: 0.903021938

01:37:19.149 --> 01:37:21.350
to be swappable under certain conditions.

NOTE Confidence: 0.903021938

01:37:21.350 --> 01:37:23.182
Another unchecked begin and

NOTE Confidence: 0.903021938

01:37:23.182 --> 01:37:25.014
then finally a comment.

NOTE Confidence: 0.903021938

01:37:25.020 --> 01:37:26.524
So overall nothing major.

NOTE Confidence: 0.903021938

01:37:26.524 --> 01:37:27.276
If anything,

NOTE Confidence: 0.903021938

01:37:27.280 --> 01:37:31.064
we found more issues in the standard itself.

NOTE Confidence: 0.903021938

01:37:31.070 --> 01:37:32.900
And just some assertion messages.

NOTE Confidence: 0.903021938

01:37:32.900 --> 01:37:35.148
So overall this is looking real good so

NOTE Confidence: 0.903021938

01:37:35.148 --> 01:37:37.509
far we are slowly getting through this PR.

NOTE Confidence: 0.903021938

01:37:37.510 --> 01:37:39.477
We will see if I can finish

NOTE Confidence: 0.903021938

01:37:39.477 --> 01:37:41.916
reviewing this or if we will have an

NOTE Confidence: 0.903021938

01:37:41.916 --> 01:37:43.950
unprecedented Part 3 for video review.

NOTE Confidence: 0.903021938

01:37:43.950 --> 01:37:45.917
So I hope this has been interesting

NOTE Confidence: 0.903021938

01:37:45.917 --> 01:37:48.030
and we'll see you next time, thanks.
